ImageRuntimeVersion: v4.0.30319
Assembly BulletSharp, Version=2.83.*, Culture=Invariante Sprache (Invariantes Land): 
	hash=SHA1, flags=PublicKey
Assembly mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089: 
	hash=None, flags=None
Assembly System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a: 
	hash=None, flags=None
Assembly SharpDX, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b4dcf0f35e5521f1: 
	hash=None, flags=None
Assembly SharpDX.Mathematics, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b4dcf0f35e5521f1: 
	hash=None, flags=None
Interface BulletSharp.ITrackingDisposable: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Events:
    System.EventHandler OnDisposed: SpecialName
    System.EventHandler OnDisposing: SpecialName
  Methods:
    add_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    remove_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    add_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    remove_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
Struct BulletSharp.ActivationState: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.ActivationState ActiveTag = 1 : Public, Static, Literal, HasDefault
    BulletSharp.ActivationState IslandSleeping = 2 : Public, Static, Literal, HasDefault
    BulletSharp.ActivationState WantsDeactivation = 3 : Public, Static, Literal, HasDefault
    BulletSharp.ActivationState DisableDeactivation = 4 : Public, Static, Literal, HasDefault
    BulletSharp.ActivationState DisableSimulation = 5 : Public, Static, Literal, HasDefault
Struct BulletSharp.AnisotropicFrictionFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.AnisotropicFrictionFlags AnisotropicFrictionDisabled = 0 : Public, Static, Literal, HasDefault
    BulletSharp.AnisotropicFrictionFlags AnisotropicFriction = 1 : Public, Static, Literal, HasDefault
    BulletSharp.AnisotropicFrictionFlags AnisotropicRollingFriction = 2 : Public, Static, Literal, HasDefault
Struct BulletSharp.BroadphaseNativeType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.BroadphaseNativeType BoxShape = 0 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType TriangleShape = 1 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType TetrahedralShape = 2 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ConvexTriangleMeshShape = 3 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ConvexHullShape = 4 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ConvexPointCloudShape = 5 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType CustomPolyhedralShape = 6 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ImplicitConvexShapesStartHere = 7 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType SphereShape = 8 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType MultiSphereShape = 9 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType CapsuleShape = 10 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ConeShape = 11 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ConvexShape = 12 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType CylinderShape = 13 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType UniformScalingShape = 14 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType MinkowskiSumShape = 15 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType MinkowskiDifferenceShape = 16 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType Box2DShape = 17 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType Convex2DShape = 18 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType CustomConvexShape = 19 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ConcaveShapesStartHere = 20 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType TriangleMeshShape = 21 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ScaledTriangleMeshShape = 22 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType FastConcaveMesh = 23 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType TerrainShape = 24 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType GImpactShape = 25 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType MultiMaterialTriangleMesh = 26 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType EmptyShape = 27 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType StaticPlaneShape = 28 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType CustomConcaveShape = 29 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType ConcaveShapesEndHere = 30 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType CompoundShape = 31 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType SoftBodyShape = 32 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType HfFluidShape = 33 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType HfFluidBuoyantConvexShape = 34 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType InvalidShape = 35 : Public, Static, Literal, HasDefault
    BulletSharp.BroadphaseNativeType MaxBroadphaseCollisionType = 36 : Public, Static, Literal, HasDefault
Struct BulletSharp.BufferType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.BufferType Cpu = 0 : Public, Static, Literal, HasDefault
    BulletSharp.BufferType DX11 = 1 : Public, Static, Literal, HasDefault
    BulletSharp.BufferType OpenGL = 2 : Public, Static, Literal, HasDefault
Struct BulletSharp.CollisionFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.CollisionFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFlags StaticObject = 1 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFlags KinematicObject = 2 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFlags NoContactResponse = 4 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFlags CustomMaterialCallback = 8 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFlags CharacterObject = 16 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFlags DisableVisualizeObject = 32 : Public, Static, Literal, HasDefault
Struct BulletSharp.CollisionObjectTypes: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.CollisionObjectTypes None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionObjectTypes CollisionObjectType = 1 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionObjectTypes RigidBodyType = 2 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionObjectTypes GhostObjectType = 4 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionObjectTypes SoftBodyType = 8 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionObjectTypes HfFluidType = 16 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionObjectTypes UserType = 32 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionObjectTypes FeatherStoneLinkType = 64 : Public, Static, Literal, HasDefault
Struct BulletSharp.CollisionFilterGroups: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.CollisionFilterGroups None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFilterGroups DefaultFilter = 1 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFilterGroups StaticFilter = 2 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFilterGroups KinematicFilter = 4 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFilterGroups DebrisFilter = 8 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFilterGroups SensorTrigger = 16 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFilterGroups CharacterFilter = 32 : Public, Static, Literal, HasDefault
    BulletSharp.CollisionFilterGroups AllFilter = -1 : Public, Static, Literal, HasDefault
Struct BulletSharp.ConstraintParam: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.ConstraintParam Erp = 1 : Public, Static, Literal, HasDefault
    BulletSharp.ConstraintParam StopErp = 2 : Public, Static, Literal, HasDefault
    BulletSharp.ConstraintParam Cfm = 3 : Public, Static, Literal, HasDefault
    BulletSharp.ConstraintParam StopCfm = 4 : Public, Static, Literal, HasDefault
Struct BulletSharp.ConstraintSolverType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.ConstraintSolverType SequentialImpulseSolver = 1 : Public, Static, Literal, HasDefault
    BulletSharp.ConstraintSolverType MlcpSolver = 2 : Public, Static, Literal, HasDefault
    BulletSharp.ConstraintSolverType NncgSolver = 4 : Public, Static, Literal, HasDefault
Struct BulletSharp.DebugDrawModes: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.DebugDrawModes None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes NoDebug = 0 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawWireframe = 1 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawAabb = 2 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawFeaturesText = 4 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawContactPoints = 8 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes NoDeactivation = 16 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes NoHelpText = 32 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawText = 64 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes ProfileTimings = 128 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes EnableSatComparison = 256 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DisableBulletLCP = 512 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes EnableCCD = 1024 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawConstraints = 2048 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawConstraintLimits = 4096 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes FastWireframe = 8192 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawNormals = 16384 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes DrawFrames = 32768 : Public, Static, Literal, HasDefault
    BulletSharp.DebugDrawModes MaxDebugDrawMode = 32769 : Public, Static, Literal, HasDefault
Struct BulletSharp.DispatcherFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.DispatcherFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.DispatcherFlags StaticStaticReported = 1 : Public, Static, Literal, HasDefault
    BulletSharp.DispatcherFlags UseRelativeContactBreakingThreshold = 2 : Public, Static, Literal, HasDefault
    BulletSharp.DispatcherFlags DisableContactPoolDynamicAllocation = 4 : Public, Static, Literal, HasDefault
Struct BulletSharp.DynamicsWorldType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.DynamicsWorldType Simple = 1 : Public, Static, Literal, HasDefault
    BulletSharp.DynamicsWorldType Discrete = 2 : Public, Static, Literal, HasDefault
    BulletSharp.DynamicsWorldType Continuous = 3 : Public, Static, Literal, HasDefault
    BulletSharp.DynamicsWorldType SoftRigid = 4 : Public, Static, Literal, HasDefault
    BulletSharp.DynamicsWorldType Gpu = 5 : Public, Static, Literal, HasDefault
Struct BulletSharp.PhyScalarType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.PhyScalarType Single = 0 : Public, Static, Literal, HasDefault
    BulletSharp.PhyScalarType Double = 1 : Public, Static, Literal, HasDefault
    BulletSharp.PhyScalarType Int32 = 2 : Public, Static, Literal, HasDefault
    BulletSharp.PhyScalarType Int16 = 3 : Public, Static, Literal, HasDefault
    BulletSharp.PhyScalarType FixedPoint88 = 4 : Public, Static, Literal, HasDefault
    BulletSharp.PhyScalarType Byte = 5 : Public, Static, Literal, HasDefault
Struct BulletSharp.SoftBody.PSolver: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.PSolver Linear = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.PSolver Anchors = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.PSolver RigidContacts = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.PSolver SoftContacts = 3 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.PSolver End = 4 : Public, Static, Literal, HasDefault
Struct BulletSharp.RigidBodyFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.RigidBodyFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.RigidBodyFlags DisableWorldGravity = 1 : Public, Static, Literal, HasDefault
    BulletSharp.RigidBodyFlags EnableGyroscopicForceExplicit = 2 : Public, Static, Literal, HasDefault
    BulletSharp.RigidBodyFlags EnableGyroscopicForceImplicitWorld = 4 : Public, Static, Literal, HasDefault
    BulletSharp.RigidBodyFlags EnableGyroscopicForceImplicitBody = 8 : Public, Static, Literal, HasDefault
    BulletSharp.RigidBodyFlags EnableGyroscopicForce = 8 : Public, Static, Literal, HasDefault
Struct BulletSharp.RotateOrder: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.RotateOrder XYZ = 0 : Public, Static, Literal, HasDefault
    BulletSharp.RotateOrder XZY = 1 : Public, Static, Literal, HasDefault
    BulletSharp.RotateOrder YXZ = 2 : Public, Static, Literal, HasDefault
    BulletSharp.RotateOrder YZX = 3 : Public, Static, Literal, HasDefault
    BulletSharp.RotateOrder ZXY = 4 : Public, Static, Literal, HasDefault
    BulletSharp.RotateOrder ZYX = 5 : Public, Static, Literal, HasDefault
Struct BulletSharp.SolverModes: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SolverModes None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes RandomizeOrder = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes FrictionSeparate = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes UseWarmStarting = 4 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes Use2FrictionDirections = 16 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes EnableFrictionDirectionCaching = 32 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes DisableVelocityDependentFrictionDirection = 64 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes CacheFriendly = 128 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes Simd = 256 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes InterleaveContactAndFrictionConstraints = 512 : Public, Static, Literal, HasDefault
    BulletSharp.SolverModes AllowZeroLengthFrictionDirections = 1024 : Public, Static, Literal, HasDefault
Struct BulletSharp.SolverType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SolverType Default = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SolverType Cpu = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SolverType CL = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SolverType CLSimd = 3 : Public, Static, Literal, HasDefault
    BulletSharp.SolverType DX = 4 : Public, Static, Literal, HasDefault
    BulletSharp.SolverType DXSimd = 5 : Public, Static, Literal, HasDefault
Struct BulletSharp.TraversalMode: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.TraversalMode Recursive = 2 : Public, Static, Literal, HasDefault
    BulletSharp.TraversalMode Stackless = 0 : Public, Static, Literal, HasDefault
    BulletSharp.TraversalMode StacklessCacheFriendly = 1 : Public, Static, Literal, HasDefault
Struct BulletSharp.TypedConstraintType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.TypedConstraintType Point2Point = 3 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType Hinge = 4 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType ConeTwist = 5 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType D6 = 6 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType Slider = 7 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType Contact = 8 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType D6Spring = 9 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType Gear = 10 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType Fixed = 11 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType D6Spring2 = 12 : Public, Static, Literal, HasDefault
    BulletSharp.TypedConstraintType MaxConstraint = 13 : Public, Static, Literal, HasDefault
Struct BulletSharp.SoftBody.VSolver: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.VSolver Linear = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.VSolver End = 1 : Public, Static, Literal, HasDefault
Class BulletSharp.ListDebugView: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(System.Collections.IEnumerable): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    System.Collections.ArrayList Items 'get ' : 
  Methods:
    get_Items(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Vector3ListDebugView: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(System.Collections.Generic.IList`1[SharpDX.Vector3]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3[] Items 'get ' : 
  Methods:
    get_Items(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ListEnumerator`1[T]: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Type parameter: T
    Void .ctor(System.Collections.Generic.IList`1[T]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.Collections.IEnumerator
    System.Collections.Generic.IEnumerator`1[T]
    System.IDisposable
  Properties:
    System.Object Current 'get ' : 
    T GenericCurrent 'get ' : 
  Methods:
    get_GenericCurrent(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Current(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    MoveNext(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Reset(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.GenericList`1[T]: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Type parameter: T
  Interfaces:
    System.Collections.Generic.IList`1[T]
    System.Collections.Generic.ICollection`1[T]
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
  Properties:
    Boolean IsReadOnly 'get ' : 
    T Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
  Methods:
    get_Count(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    set_Item(Int32, T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    get_IsReadOnly(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Add(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Clear(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Contains(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CopyTo(T[], Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    GetObjectEnumerator(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    IndexOf(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Insert(Int32, T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Remove(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    RemoveAt(Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
Class BulletSharp.BoolArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[System.Boolean]
  Properties:
    Boolean Item [Int32] 'get set' : 
  Methods:
    Contains(Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Boolean[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.BodyArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[BulletSharp.SoftBody.Body]
  Properties:
    BulletSharp.SoftBody.Body Item [Int32] 'get set' : 
  Methods:
    CopyTo(Body[], Int32): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Body): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.CompoundShapeChildArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[BulletSharp.CompoundShapeChild]
  Properties:
    Int32 Count 'get ' : 
    BulletSharp.CompoundShapeChild Item [Int32] 'get set' : 
  Methods:
    AddChildShape(Matrix&, CollisionShape): PrivateScope, Public, HideBySig
    CopyTo(CompoundShapeChild[], Int32): PrivateScope, Public, Virtual, HideBySig
    RemoveChildShape(CollisionShape): PrivateScope, Public, HideBySig
    RemoveChildShapeByIndex(Int32): PrivateScope, Public, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, CompoundShapeChild): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.FloatArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[System.Single]
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single Item [Int32] 'get set' : 
  Methods:
    Contains(Single): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Single[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Single): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Single): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.IntArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[System.Int32]
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Item [Int32] 'get set' : 
  Methods:
    Contains(Int32): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Int32[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Int32): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.NodePtrArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[BulletSharp.SoftBody.Node]
  Properties:
    BulletSharp.SoftBody.Node Item [Int32] 'get set' : 
  Methods:
    CopyTo(Node[], Int32): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Node): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.ScalarArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[System.Single]
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single Item [Int32] 'get set' : 
  Methods:
    Contains(Single): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Single[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Single): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Single): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.UIntArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[System.UInt32]
  Properties:
    UInt32 Item [Int32] 'get set' : 
  Methods:
    Contains(UInt32): PrivateScope, Public, Virtual, HideBySig
    CopyTo(UInt32[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(UInt32): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, UInt32): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.UShortArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[System.UInt16]
  Properties:
    UInt16 Item [Int32] 'get set' : 
  Methods:
    Contains(UInt16): PrivateScope, Public, Virtual, HideBySig
    CopyTo(UInt16[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(UInt16): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, UInt16): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.Vector3Array: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GenericList`1[SharpDX.Vector3]
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Stride 'get set' : 
    SharpDX.Vector3 Item [Int32] 'get set' : 
  Methods:
    CopyTo(Vector3[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Vector3): PrivateScope, Public, Virtual, HideBySig
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Vector3): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Stride(): PrivateScope, Public, HideBySig, SpecialName
    set_Stride(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CollisionShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Interfaces:
    BulletSharp.ITrackingDisposable
    System.IDisposable
  Properties:
    System.Object UserObject 'get set' : 
    Int32 UserIndex 'get set' : 
    BulletSharp.BroadphaseNativeType ShapeType 'get ' : 
    System.String Name 'get ' : 
    Single Margin 'get set' : 
    SharpDX.Vector3 LocalScaling 'get set' : 
    Boolean IsSoftBody 'get ' : 
    Boolean IsPolyhedral 'get ' : 
    Boolean IsNonMoving 'get ' : 
    Boolean IsInfinite 'get ' : 
    Boolean IsDisposed 'get ' : 
    Boolean IsConvex2D 'get ' : 
    Boolean IsConvex 'get ' : 
    Boolean IsConcave 'get ' : 
    Boolean IsCompound 'get ' : 
    SharpDX.Vector3 AnisotropicRollingFrictionDirection 'get ' : 
    Single AngularMotionDisc 'get ' : 
  Events:
    System.EventHandler OnDisposed: SpecialName
    System.EventHandler OnDisposing: SpecialName
  Methods:
    add_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    add_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    CalculateLocalInertia(Single): PrivateScope, Public, HideBySig
    CalculateLocalInertia(Single, Vector3&(Out)): PrivateScope, Public, HideBySig
    CalculateSerializeBufferSize(): PrivateScope, Public, HideBySig
    CalculateTemporalAabb(Matrix, Vector3, Vector3, Single, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    CalculateTemporalAabb(Matrix&, Vector3&, Vector3&, Single, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    Equals(Object): PrivateScope, Public, Virtual, HideBySig
    GetAabb(Matrix, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    GetAabb(Matrix&, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    GetBoundingSphere(Vector3&(Out), Single&(Out)): PrivateScope, Public, HideBySig
    GetContactBreakingThreshold(Single): PrivateScope, Public, HideBySig
    GetHashCode(): PrivateScope, Public, Virtual, HideBySig
    Serialize(IntPtr, Serializer): PrivateScope, Public, HideBySig
    SerializeSingleShape(Serializer): PrivateScope, Public, HideBySig
    get_AngularMotionDisc(): PrivateScope, Public, HideBySig, SpecialName
    get_AnisotropicRollingFrictionDirection(): PrivateScope, Public, HideBySig, SpecialName
    get_IsCompound(): PrivateScope, Public, HideBySig, SpecialName
    get_IsConcave(): PrivateScope, Public, HideBySig, SpecialName
    get_IsConvex(): PrivateScope, Public, HideBySig, SpecialName
    get_IsConvex2D(): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_IsInfinite(): PrivateScope, Public, HideBySig, SpecialName
    get_IsNonMoving(): PrivateScope, Public, HideBySig, SpecialName
    get_IsPolyhedral(): PrivateScope, Public, HideBySig, SpecialName
    get_IsSoftBody(): PrivateScope, Public, HideBySig, SpecialName
    get_LocalScaling(): PrivateScope, Public, HideBySig, SpecialName
    set_LocalScaling(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Margin(): PrivateScope, Public, HideBySig, SpecialName
    set_Margin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Name(): PrivateScope, Public, HideBySig, SpecialName
    get_ShapeType(): PrivateScope, Public, HideBySig, SpecialName
    get_UserIndex(): PrivateScope, Public, HideBySig, SpecialName
    set_UserIndex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_UserObject(): PrivateScope, Public, HideBySig, SpecialName
    set_UserObject(Object): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.CompoundShapeChild: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    SharpDX.Matrix Transform 'get set' : 
    BulletSharp.BroadphaseNativeType ChildShapeType 'get set' : 
    BulletSharp.CollisionShape ChildShape 'get set' : 
    Single ChildMargin 'get set' : 
  Methods:
    get_ChildMargin(): PrivateScope, Public, HideBySig, SpecialName
    set_ChildMargin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ChildShape(): PrivateScope, Public, HideBySig, SpecialName
    set_ChildShape(CollisionShape): PrivateScope, Public, HideBySig, SpecialName
    get_ChildShapeType(): PrivateScope, Public, HideBySig, SpecialName
    set_ChildShapeType(BroadphaseNativeType): PrivateScope, Public, HideBySig, SpecialName
    get_Transform(): PrivateScope, Public, HideBySig, SpecialName
    set_Transform(Matrix): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CompoundShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionShape
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 UpdateRevision 'get ' : 
    Int32 NumChildShapes 'get ' : 
    BulletSharp.CompoundShapeChildArray ChildList 'get ' : 
  Methods:
    AddChildShapeRef(Matrix&, CollisionShape): PrivateScope, Public, HideBySig
    AddChildShape(Matrix, CollisionShape): PrivateScope, Public, HideBySig
    CalculatePrincipalAxisTransform(Single[], Matrix&, Vector3&(Out)): PrivateScope, Public, HideBySig
    CreateAabbTreeFromChildren(): PrivateScope, Public, HideBySig
    GetChildShape(Int32): PrivateScope, Public, HideBySig
    GetChildTransform(Int32): PrivateScope, Public, HideBySig
    RecalculateLocalAabb(): PrivateScope, Public, HideBySig
    RemoveChildShape(CollisionShape): PrivateScope, Public, HideBySig
    RemoveChildShapeByIndex(Int32): PrivateScope, Public, HideBySig
    UpdateChildTransform(Int32, Matrix): PrivateScope, Public, HideBySig
    UpdateChildTransform(Int32, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    get_ChildList(): PrivateScope, Public, HideBySig, SpecialName
    get_NumChildShapes(): PrivateScope, Public, HideBySig, SpecialName
    get_UpdateRevision(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CollisionObject: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    BulletSharp.ITrackingDisposable
    System.IDisposable
  Properties:
    SharpDX.Matrix WorldTransform 'get set' : 
    System.Object UserObject 'get set' : 
    Int32 UserIndex 'get set' : 
    Int32 UpdateRevisionInternal 'get ' : 
    Single RollingFriction 'get set' : 
    Single Restitution 'get set' : 
    Boolean MergesSimulationIslands 'get ' : 
    Boolean IsStaticOrKinematicObject 'get ' : 
    Boolean IsStaticObject 'get ' : 
    Int32 IslandTag 'get set' : 
    Boolean IsKinematicObject 'get ' : 
    Boolean IsDisposed 'get ' : 
    Boolean IsActive 'get ' : 
    SharpDX.Matrix InterpolationWorldTransform 'get set' : 
    SharpDX.Vector3 InterpolationLinearVelocity 'get set' : 
    SharpDX.Vector3 InterpolationAngularVelocity 'get set' : 
    Single HitFraction 'get set' : 
    Boolean HasContactResponse 'get ' : 
    Single Friction 'get set' : 
    Single DeactivationTime 'get set' : 
    Single ContactProcessingThreshold 'get set' : 
    Int32 CompanionId 'get set' : 
    BulletSharp.CollisionShape CollisionShape 'get set' : 
    BulletSharp.CollisionFlags CollisionFlags 'get set' : 
    Single CcdSweptSphereRadius 'get set' : 
    Single CcdSquareMotionThreshold 'get ' : 
    Single CcdMotionThreshold 'get set' : 
    BulletSharp.BroadphaseProxy BroadphaseHandle 'get set' : 
    SharpDX.Vector3 AnisotropicFriction 'get set' : 
    BulletSharp.ActivationState ActivationState 'get set' : 
  Events:
    System.EventHandler OnDisposed: SpecialName
    System.EventHandler OnDisposing: SpecialName
  Methods:
    add_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    add_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Activate(): PrivateScope, Public, HideBySig
    Activate(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    CalculateSerializeBufferSize(): PrivateScope, Public, HideBySig
    CheckCollideWith(CollisionObject): PrivateScope, Public, HideBySig
    CheckCollideWithOverride(CollisionObject): PrivateScope, Public, HideBySig
    ForceActivationState(ActivationState): PrivateScope, Public, HideBySig
    GetHashCode(): PrivateScope, Public, Virtual, HideBySig
    GetWorldTransform(Matrix&(Out)): PrivateScope, Public, HideBySig
    HasAnisotropicFriction(): PrivateScope, Public, HideBySig
    HasAnisotropicFriction(AnisotropicFrictionFlags): PrivateScope, Public, HideBySig
    Serialize(IntPtr, Serializer): PrivateScope, Public, HideBySig
    SerializeSingleObject(Serializer): PrivateScope, Public, HideBySig
    SetAnisotropicFriction(Vector3): PrivateScope, Public, HideBySig
    SetAnisotropicFriction(Vector3, AnisotropicFrictionFlags): PrivateScope, Public, HideBySig
    SetIgnoreCollisionCheck(CollisionObject, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    get_ActivationState(): PrivateScope, Public, HideBySig, SpecialName
    set_ActivationState(ActivationState): PrivateScope, Public, HideBySig, SpecialName
    get_AnisotropicFriction(): PrivateScope, Public, HideBySig, SpecialName
    set_AnisotropicFriction(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_BroadphaseHandle(): PrivateScope, Public, HideBySig, SpecialName
    set_BroadphaseHandle(BroadphaseProxy): PrivateScope, Public, HideBySig, SpecialName
    get_CcdMotionThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_CcdMotionThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CcdSquareMotionThreshold(): PrivateScope, Public, HideBySig, SpecialName
    get_CcdSweptSphereRadius(): PrivateScope, Public, HideBySig, SpecialName
    set_CcdSweptSphereRadius(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFlags(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFlags(CollisionFlags): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionShape(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionShape(CollisionShape): PrivateScope, Public, HideBySig, SpecialName
    get_CompanionId(): PrivateScope, Public, HideBySig, SpecialName
    set_CompanionId(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_ContactProcessingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactProcessingThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DeactivationTime(): PrivateScope, Public, HideBySig, SpecialName
    set_DeactivationTime(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Friction(): PrivateScope, Public, HideBySig, SpecialName
    set_Friction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_HasContactResponse(): PrivateScope, Public, HideBySig, SpecialName
    get_HitFraction(): PrivateScope, Public, HideBySig, SpecialName
    set_HitFraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_InterpolationAngularVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_InterpolationAngularVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_InterpolationLinearVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_InterpolationLinearVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_InterpolationWorldTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_InterpolationWorldTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_IsActive(): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_IsKinematicObject(): PrivateScope, Public, HideBySig, SpecialName
    get_IslandTag(): PrivateScope, Public, HideBySig, SpecialName
    set_IslandTag(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_IsStaticObject(): PrivateScope, Public, HideBySig, SpecialName
    get_IsStaticOrKinematicObject(): PrivateScope, Public, HideBySig, SpecialName
    get_MergesSimulationIslands(): PrivateScope, Public, HideBySig, SpecialName
    get_Restitution(): PrivateScope, Public, HideBySig, SpecialName
    set_Restitution(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RollingFriction(): PrivateScope, Public, HideBySig, SpecialName
    set_RollingFriction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UpdateRevisionInternal(): PrivateScope, Public, HideBySig, SpecialName
    get_UserIndex(): PrivateScope, Public, HideBySig, SpecialName
    set_UserIndex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_UserObject(): PrivateScope, Public, HideBySig, SpecialName
    set_UserObject(Object): PrivateScope, Public, HideBySig, SpecialName
    get_WorldTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_WorldTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.SoftBodyWorldInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single WaterOffset 'get set' : 
    SharpDX.Vector3 WaterNormal 'get set' : 
    Single WaterDensity 'get set' : 
    BulletSharp.SparseSdf SparseSdf 'get ' : 
    Single MaxDisplacement 'get set' : 
    SharpDX.Vector3 Gravity 'get set' : 
    BulletSharp.Dispatcher Dispatcher 'get set' : 
    BulletSharp.BroadphaseInterface Broadphase 'get set' : 
    Single AirDensity 'get set' : 
  Methods:
    get_AirDensity(): PrivateScope, Public, HideBySig, SpecialName
    set_AirDensity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Broadphase(): PrivateScope, Public, HideBySig, SpecialName
    set_Broadphase(BroadphaseInterface): PrivateScope, Public, HideBySig, SpecialName
    get_Dispatcher(): PrivateScope, Public, HideBySig, SpecialName
    set_Dispatcher(Dispatcher): PrivateScope, Public, HideBySig, SpecialName
    get_Gravity(): PrivateScope, Public, HideBySig, SpecialName
    set_Gravity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_MaxDisplacement(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxDisplacement(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SparseSdf(): PrivateScope, Public, HideBySig, SpecialName
    get_WaterDensity(): PrivateScope, Public, HideBySig, SpecialName
    set_WaterDensity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WaterNormal(): PrivateScope, Public, HideBySig, SpecialName
    set_WaterNormal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_WaterOffset(): PrivateScope, Public, HideBySig, SpecialName
    set_WaterOffset(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.Joint: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Properties:
    JointType Type 'get ' : 
    Single Split 'get set' : 
    SharpDX.Vector3 SDrift 'get set' : 
    BulletSharp.Vector3Array Refs 'get ' : 
    SharpDX.Matrix MassMatrix 'get set' : 
    Single Erp 'get set' : 
    SharpDX.Vector3 Drift 'get set' : 
    Boolean Delete 'get set' : 
    Single Cfm 'get set' : 
    BulletSharp.SoftBody.BodyArray Bodies 'get ' : 
  Methods:
    Prepare(Single, Int32): PrivateScope, Public, HideBySig
    Solve(Single, Single): PrivateScope, Public, HideBySig
    Terminate(Single): PrivateScope, Public, HideBySig
    get_Bodies(): PrivateScope, Public, HideBySig, SpecialName
    get_Cfm(): PrivateScope, Public, HideBySig, SpecialName
    set_Cfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Delete(): PrivateScope, Public, HideBySig, SpecialName
    set_Delete(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_Drift(): PrivateScope, Public, HideBySig, SpecialName
    set_Drift(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Erp(): PrivateScope, Public, HideBySig, SpecialName
    set_Erp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MassMatrix(): PrivateScope, Public, HideBySig, SpecialName
    set_MassMatrix(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_Refs(): PrivateScope, Public, HideBySig, SpecialName
    get_SDrift(): PrivateScope, Public, HideBySig, SpecialName
    set_SDrift(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Split(): PrivateScope, Public, HideBySig, SpecialName
    set_Split(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Type(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Joint+Specs: AutoLayout, AnsiClass, Class, NestedPublic, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Single Split 'get set' : 
    Single Erp 'get set' : 
    Single Cfm 'get set' : 
  Methods:
    get_Cfm(): PrivateScope, Public, HideBySig, SpecialName
    set_Cfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Erp(): PrivateScope, Public, HideBySig, SpecialName
    set_Erp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Split(): PrivateScope, Public, HideBySig, SpecialName
    set_Split(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Struct BulletSharp.SoftBody.Joint+JointType: AutoLayout, AnsiClass, Class, NestedPublic, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    JointType Linear = 0 : Public, Static, Literal, HasDefault
    JointType Angular = 1 : Public, Static, Literal, HasDefault
    JointType Contact = 2 : Public, Static, Literal, HasDefault
Class BulletSharp.SoftBody.AJoint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Joint
  Properties:
    IControl Control 'get set' : 
    BulletSharp.Vector3Array Axis 'get ' : 
  Methods:
    get_Axis(): PrivateScope, Public, HideBySig, SpecialName
    get_Control(): PrivateScope, Public, HideBySig, SpecialName
    set_Control(IControl): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.AJoint+IControl: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Methods:
    Default(): PrivateScope, Public, Static, HideBySig
    Prepare(AJoint): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Speed(AJoint, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.AJoint+Specs: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.SoftBody.Joint+Specs
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    IControl Control 'get set' : 
    SharpDX.Vector3 Axis 'get set' : 
  Methods:
    get_Axis(): PrivateScope, Public, HideBySig, SpecialName
    set_Axis(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Control(): PrivateScope, Public, HideBySig, SpecialName
    set_Control(IControl): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Anchor: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    BulletSharp.SoftBody.Node Node 'get set' : 
    SharpDX.Vector3 Local 'get set' : 
    Single Influence 'get set' : 
    Single C2  'get set' : 
    SharpDX.Vector3 C1 'get set' : 
    SharpDX.Matrix C0 'get set' : 
    BulletSharp.RigidBody Body 'get set' : 
  Methods:
    get_Body(): PrivateScope, Public, HideBySig, SpecialName
    set_Body(RigidBody): PrivateScope, Public, HideBySig, SpecialName
    get_C0(): PrivateScope, Public, HideBySig, SpecialName
    set_C0(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_C1(): PrivateScope, Public, HideBySig, SpecialName
    set_C1(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_C2(): PrivateScope, Public, HideBySig, SpecialName
    set_C2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Influence(): PrivateScope, Public, HideBySig, SpecialName
    set_Influence(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Local(): PrivateScope, Public, HideBySig, SpecialName
    set_Local(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Node(): PrivateScope, Public, HideBySig, SpecialName
    set_Node(Node): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Body: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.SoftBody.Cluster): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.CollisionObject): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Matrix XForm 'get ' : 
    BulletSharp.SoftBody.Cluster Soft 'get set' : 
    BulletSharp.RigidBody Rigid 'get set' : 
    SharpDX.Vector3 LinearVelocity 'get ' : 
    SharpDX.Matrix InvWorldInertia 'get ' : 
    Single InvMass 'get ' : 
    BulletSharp.CollisionObject CollisionObject 'get set' : 
    SharpDX.Vector3 AngularVelocity 'get ' : 
  Methods:
    Activate(): PrivateScope, Public, HideBySig
    ApplyAImpulse(Impulse): PrivateScope, Public, HideBySig
    ApplyDAImpulse(Vector3): PrivateScope, Public, HideBySig
    ApplyDCImpulse(Vector3): PrivateScope, Public, HideBySig
    ApplyDImpulse(Vector3, Vector3): PrivateScope, Public, HideBySig
    ApplyImpulse(Impulse, Vector3): PrivateScope, Public, HideBySig
    ApplyVAImpulse(Vector3): PrivateScope, Public, HideBySig
    ApplyVImpulse(Vector3, Vector3): PrivateScope, Public, HideBySig
    GetAngularVelocity(Vector3): PrivateScope, Public, HideBySig
    Velocity(Vector3): PrivateScope, Public, HideBySig
    get_AngularVelocity(): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionObject(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionObject(CollisionObject): PrivateScope, Public, HideBySig, SpecialName
    get_InvMass(): PrivateScope, Public, HideBySig, SpecialName
    get_InvWorldInertia(): PrivateScope, Public, HideBySig, SpecialName
    get_LinearVelocity(): PrivateScope, Public, HideBySig, SpecialName
    get_Rigid(): PrivateScope, Public, HideBySig, SpecialName
    set_Rigid(RigidBody): PrivateScope, Public, HideBySig, SpecialName
    get_Soft(): PrivateScope, Public, HideBySig, SpecialName
    set_Soft(Cluster): PrivateScope, Public, HideBySig, SpecialName
    get_XForm(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.CJoint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Joint
  Properties:
    BulletSharp.Vector3Array RPos 'get ' : 
    SharpDX.Vector3 Normal 'get set' : 
    Int32 MaxLife 'get set' : 
    Int32 Life 'get set' : 
    Single Friction 'get set' : 
  Methods:
    get_Friction(): PrivateScope, Public, HideBySig, SpecialName
    set_Friction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Life(): PrivateScope, Public, HideBySig, SpecialName
    set_Life(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_MaxLife(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxLife(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Normal(): PrivateScope, Public, HideBySig, SpecialName
    set_Normal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_RPos(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Cluster: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    BulletSharp.Vector3Array VImpulses 'get ' : 
    Single SelfCollisionImpulseFactor 'get set' : 
    Int32 NVImpulses 'get ' : 
    BulletSharp.SoftBody.AlignedNodePtrArray Nodes 'get ' : 
    Single NodeDamping 'get set' : 
    Int32 NDImpulses 'get ' : 
    Single MaxSelfCollisionImpulse 'get set' : 
    Single Matching 'get set' : 
    BulletSharp.AlignedScalarArray Masses 'get ' : 
    SharpDX.Vector3 LV 'get set' : 
    SharpDX.Matrix Locii 'get set' : 
    Single LinearDamping 'get set' : 
    SharpDX.Matrix InvWI 'get set' : 
    Single IMass 'get set' : 
    Single IDMass 'get set' : 
    SharpDX.Matrix FrameTransform 'get set' : 
    BulletSharp.AlignedVector3Array FrameRefs 'get ' : 
    BulletSharp.Vector3Array DImpulses 'get ' : 
    Boolean ContainsAnchor 'get set' : 
    SharpDX.Vector3 Com 'get set' : 
    Boolean Collide 'get set' : 
    Int32 ClusterIndex 'get set' : 
    SharpDX.Vector3 AV 'get set' : 
    Single AngularDamping 'get set' : 
  Methods:
    get_AngularDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AV(): PrivateScope, Public, HideBySig, SpecialName
    set_AV(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_ClusterIndex(): PrivateScope, Public, HideBySig, SpecialName
    set_ClusterIndex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Collide(): PrivateScope, Public, HideBySig, SpecialName
    set_Collide(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_Com(): PrivateScope, Public, HideBySig, SpecialName
    set_Com(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_ContainsAnchor(): PrivateScope, Public, HideBySig, SpecialName
    set_ContainsAnchor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_DImpulses(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameRefs(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_FrameTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_IDMass(): PrivateScope, Public, HideBySig, SpecialName
    set_IDMass(Single): PrivateScope, Public, HideBySig, SpecialName
    get_IMass(): PrivateScope, Public, HideBySig, SpecialName
    set_IMass(Single): PrivateScope, Public, HideBySig, SpecialName
    get_InvWI(): PrivateScope, Public, HideBySig, SpecialName
    set_InvWI(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_LinearDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Locii(): PrivateScope, Public, HideBySig, SpecialName
    set_Locii(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_LV(): PrivateScope, Public, HideBySig, SpecialName
    set_LV(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Masses(): PrivateScope, Public, HideBySig, SpecialName
    get_Matching(): PrivateScope, Public, HideBySig, SpecialName
    set_Matching(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxSelfCollisionImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSelfCollisionImpulse(Single): PrivateScope, Public, HideBySig, SpecialName
    get_NDImpulses(): PrivateScope, Public, HideBySig, SpecialName
    get_NodeDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_NodeDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Nodes(): PrivateScope, Public, HideBySig, SpecialName
    get_NVImpulses(): PrivateScope, Public, HideBySig, SpecialName
    get_SelfCollisionImpulseFactor(): PrivateScope, Public, HideBySig, SpecialName
    set_SelfCollisionImpulseFactor(Single): PrivateScope, Public, HideBySig, SpecialName
    get_VImpulses(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Config: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    BulletSharp.SoftBody.AlignedVSolverArray VSequence 'get ' : 
    Int32 VIterations 'get set' : 
    Single VCF 'get set' : 
    Single VC  'get set' : 
    Single TimeScale 'get set' : 
    Single SSSplitCl 'get set' : 
    Single SRSplitCl 'get set' : 
    Single SKSplitCl 'get set' : 
    Single SshrCl 'get set' : 
    Single SrhrCl 'get set' : 
    Single SkhrCl 'get set' : 
    Single Shr 'get set' : 
    BulletSharp.SoftBody.AlignedPSolverArray PSequence 'get ' : 
    Single PR  'get set' : 
    Int32 PIterations 'get set' : 
    Single MT  'get set' : 
    Single MaxVolume 'get set' : 
    Single LF  'get set' : 
    Single Khr 'get set' : 
    BulletSharp.SoftBody.AlignedPSolverArray DSequence 'get ' : 
    Single DP  'get set' : 
    Int32 DIterations 'get set' : 
    Single DG  'get set' : 
    Single DF  'get set' : 
    BulletSharp.SoftBody.FCollisions Collisions 'get set' : 
    Int32 CIterations 'get set' : 
    Single Chr 'get set' : 
    Single Ahr 'get set' : 
    BulletSharp.SoftBody.AeroModel AeroModel 'get set' : 
  Methods:
    get_AeroModel(): PrivateScope, Public, HideBySig, SpecialName
    set_AeroModel(AeroModel): PrivateScope, Public, HideBySig, SpecialName
    get_Ahr(): PrivateScope, Public, HideBySig, SpecialName
    set_Ahr(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Chr(): PrivateScope, Public, HideBySig, SpecialName
    set_Chr(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_CIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Collisions(): PrivateScope, Public, HideBySig, SpecialName
    set_Collisions(FCollisions): PrivateScope, Public, HideBySig, SpecialName
    get_DF(): PrivateScope, Public, HideBySig, SpecialName
    set_DF(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DG(): PrivateScope, Public, HideBySig, SpecialName
    set_DG(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_DIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_DP(): PrivateScope, Public, HideBySig, SpecialName
    set_DP(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DSequence(): PrivateScope, Public, HideBySig, SpecialName
    get_Khr(): PrivateScope, Public, HideBySig, SpecialName
    set_Khr(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LF(): PrivateScope, Public, HideBySig, SpecialName
    set_LF(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxVolume(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxVolume(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MT(): PrivateScope, Public, HideBySig, SpecialName
    set_MT(Single): PrivateScope, Public, HideBySig, SpecialName
    get_PIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_PIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PR(): PrivateScope, Public, HideBySig, SpecialName
    set_PR(Single): PrivateScope, Public, HideBySig, SpecialName
    get_PSequence(): PrivateScope, Public, HideBySig, SpecialName
    get_Shr(): PrivateScope, Public, HideBySig, SpecialName
    set_Shr(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SkhrCl(): PrivateScope, Public, HideBySig, SpecialName
    set_SkhrCl(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SrhrCl(): PrivateScope, Public, HideBySig, SpecialName
    set_SrhrCl(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SshrCl(): PrivateScope, Public, HideBySig, SpecialName
    set_SshrCl(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SKSplitCl(): PrivateScope, Public, HideBySig, SpecialName
    set_SKSplitCl(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SRSplitCl(): PrivateScope, Public, HideBySig, SpecialName
    set_SRSplitCl(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SSSplitCl(): PrivateScope, Public, HideBySig, SpecialName
    set_SSSplitCl(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TimeScale(): PrivateScope, Public, HideBySig, SpecialName
    set_TimeScale(Single): PrivateScope, Public, HideBySig, SpecialName
    get_VC(): PrivateScope, Public, HideBySig, SpecialName
    set_VC(Single): PrivateScope, Public, HideBySig, SpecialName
    get_VCF(): PrivateScope, Public, HideBySig, SpecialName
    set_VCF(Single): PrivateScope, Public, HideBySig, SpecialName
    get_VIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_VIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_VSequence(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Element: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    IntPtr Tag 'get set' : 
  Methods:
    get_Tag(): PrivateScope, Public, HideBySig, SpecialName
    set_Tag(IntPtr): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Feature: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Element
  Properties:
    BulletSharp.SoftBody.Material Material 'get set' : 
  Methods:
    get_Material(): PrivateScope, Public, HideBySig, SpecialName
    set_Material(Material): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Face: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Feature
  Properties:
    Single RestArea 'get set' : 
    SharpDX.Vector3 Normal 'get set' : 
    BulletSharp.SoftBody.NodePtrArray N 'get ' : 
  Methods:
    get_N(): PrivateScope, Public, HideBySig, SpecialName
    get_Normal(): PrivateScope, Public, HideBySig, SpecialName
    set_Normal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_RestArea(): PrivateScope, Public, HideBySig, SpecialName
    set_RestArea(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.ImplicitFn: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Methods:
    Eval(Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.Impulse: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Vector3 Velocity 'get set' : 
    SharpDX.Vector3 Drift 'get set' : 
    Boolean AsVelocity 'get set' : 
    Boolean AsDrift 'get set' : 
  Methods:
    op_UnaryNegation(Impulse): PrivateScope, Public, Static, HideBySig, SpecialName
    op_Multiply(Impulse, Single): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AsDrift(): PrivateScope, Public, HideBySig, SpecialName
    set_AsDrift(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_AsVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_AsVelocity(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_Drift(): PrivateScope, Public, HideBySig, SpecialName
    set_Drift(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Velocity(): PrivateScope, Public, HideBySig, SpecialName
    set_Velocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.Link: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Feature
  Properties:
    Single RestLength 'get set' : 
    BulletSharp.SoftBody.NodePtrArray Nodes 'get ' : 
    Boolean IsBending 'get set' : 
    SharpDX.Vector3 C3 'get set' : 
    Single C2  'get set' : 
    Single C1  'get set' : 
    Single C0  'get set' : 
  Methods:
    get_C0(): PrivateScope, Public, HideBySig, SpecialName
    set_C0(Single): PrivateScope, Public, HideBySig, SpecialName
    get_C1(): PrivateScope, Public, HideBySig, SpecialName
    set_C1(Single): PrivateScope, Public, HideBySig, SpecialName
    get_C2(): PrivateScope, Public, HideBySig, SpecialName
    set_C2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_C3(): PrivateScope, Public, HideBySig, SpecialName
    set_C3(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_IsBending(): PrivateScope, Public, HideBySig, SpecialName
    set_IsBending(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_Nodes(): PrivateScope, Public, HideBySig, SpecialName
    get_RestLength(): PrivateScope, Public, HideBySig, SpecialName
    set_RestLength(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.LJoint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Joint
  Properties:
    BulletSharp.Vector3Array RPos 'get ' : 
  Methods:
    get_RPos(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.LJoint+Specs: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.SoftBody.Joint+Specs
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 Position 'get set' : 
  Methods:
    get_Position(): PrivateScope, Public, HideBySig, SpecialName
    set_Position(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Material: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Element
  Properties:
    Single Vst 'get set' : 
    Single Lst 'get set' : 
    BulletSharp.SoftBody.FMaterial Flags 'get set' : 
    Single Ast 'get set' : 
  Methods:
    get_Ast(): PrivateScope, Public, HideBySig, SpecialName
    set_Ast(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    set_Flags(FMaterial): PrivateScope, Public, HideBySig, SpecialName
    get_Lst(): PrivateScope, Public, HideBySig, SpecialName
    set_Lst(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Vst(): PrivateScope, Public, HideBySig, SpecialName
    set_Vst(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Node: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Feature
  Properties:
    SharpDX.Vector3 X 'get set' : 
    SharpDX.Vector3 Velocity 'get set' : 
    SharpDX.Vector3 Q 'get set' : 
    SharpDX.Vector3 Normal 'get set' : 
    Boolean IsAttached 'get set' : 
    Single InverseMass 'get set' : 
    SharpDX.Vector3 Force 'get set' : 
    Single Area 'get set' : 
  Methods:
    GetNormal(Vector3&(Out)): PrivateScope, Public, HideBySig
    GetX(Vector3&(Out)): PrivateScope, Public, HideBySig
    get_Area(): PrivateScope, Public, HideBySig, SpecialName
    set_Area(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Force(): PrivateScope, Public, HideBySig, SpecialName
    set_Force(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_InverseMass(): PrivateScope, Public, HideBySig, SpecialName
    set_InverseMass(Single): PrivateScope, Public, HideBySig, SpecialName
    get_IsAttached(): PrivateScope, Public, HideBySig, SpecialName
    set_IsAttached(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_Normal(): PrivateScope, Public, HideBySig, SpecialName
    set_Normal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Q(): PrivateScope, Public, HideBySig, SpecialName
    set_Q(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Velocity(): PrivateScope, Public, HideBySig, SpecialName
    set_Velocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_X(): PrivateScope, Public, HideBySig, SpecialName
    set_X(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Note: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Element
  Properties:
    System.String Text 'get set' : 
    Int32 Rank 'get set' : 
    SharpDX.Vector3 Offset 'get set' : 
    BulletSharp.SoftBody.NodePtrArray Nodes 'get ' : 
    BulletSharp.ScalarArray Coords 'get ' : 
  Methods:
    get_Coords(): PrivateScope, Public, HideBySig, SpecialName
    get_Nodes(): PrivateScope, Public, HideBySig, SpecialName
    get_Offset(): PrivateScope, Public, HideBySig, SpecialName
    set_Offset(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Rank(): PrivateScope, Public, HideBySig, SpecialName
    set_Rank(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Text(): PrivateScope, Public, HideBySig, SpecialName
    set_Text(String): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Pose: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    BulletSharp.AlignedScalarArray Weights 'get ' : 
    Single Volume 'get set' : 
    SharpDX.Matrix Scale 'get set' : 
    SharpDX.Matrix Rotation 'get set' : 
    BulletSharp.AlignedVector3Array Positions 'get ' : 
    Boolean IsVolumeValid 'get set' : 
    Boolean IsFrameValid 'get set' : 
    SharpDX.Vector3 Com 'get set' : 
    SharpDX.Matrix Aqq 'get set' : 
  Methods:
    get_Aqq(): PrivateScope, Public, HideBySig, SpecialName
    set_Aqq(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_Com(): PrivateScope, Public, HideBySig, SpecialName
    set_Com(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_IsFrameValid(): PrivateScope, Public, HideBySig, SpecialName
    set_IsFrameValid(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_IsVolumeValid(): PrivateScope, Public, HideBySig, SpecialName
    set_IsVolumeValid(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_Positions(): PrivateScope, Public, HideBySig, SpecialName
    get_Rotation(): PrivateScope, Public, HideBySig, SpecialName
    set_Rotation(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_Scale(): PrivateScope, Public, HideBySig, SpecialName
    set_Scale(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_Volume(): PrivateScope, Public, HideBySig, SpecialName
    set_Volume(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Weights(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.RigidContact: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    BulletSharp.SoftBody.Scti Scti 'get ' : 
    BulletSharp.SoftBody.Node Node 'get set' : 
    Single C4  'get set' : 
    Single C3  'get set' : 
    Single C2  'get set' : 
    SharpDX.Vector3 C1 'get set' : 
    SharpDX.Matrix C0 'get set' : 
  Methods:
    get_C0(): PrivateScope, Public, HideBySig, SpecialName
    set_C0(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_C1(): PrivateScope, Public, HideBySig, SpecialName
    set_C1(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_C2(): PrivateScope, Public, HideBySig, SpecialName
    set_C2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_C3(): PrivateScope, Public, HideBySig, SpecialName
    set_C3(Single): PrivateScope, Public, HideBySig, SpecialName
    get_C4(): PrivateScope, Public, HideBySig, SpecialName
    set_C4(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Node(): PrivateScope, Public, HideBySig, SpecialName
    set_Node(Node): PrivateScope, Public, HideBySig, SpecialName
    get_Scti(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.Scti: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single Offset 'get set' : 
    SharpDX.Vector3 Normal 'get set' : 
    BulletSharp.CollisionObject CollisionObject 'get set' : 
  Methods:
    get_CollisionObject(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionObject(CollisionObject): PrivateScope, Public, HideBySig, SpecialName
    get_Normal(): PrivateScope, Public, HideBySig, SpecialName
    set_Normal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Offset(): PrivateScope, Public, HideBySig, SpecialName
    set_Offset(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.SoftContact: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
Class BulletSharp.SoftBody.SolverState: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    Single VelocityMargin 'get set' : 
    Single UpdateMargin 'get set' : 
    Single Sdt 'get set' : 
    Single RadialMargin 'get set' : 
    Single InverseSdt 'get set' : 
  Methods:
    get_InverseSdt(): PrivateScope, Public, HideBySig, SpecialName
    set_InverseSdt(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RadialMargin(): PrivateScope, Public, HideBySig, SpecialName
    set_RadialMargin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Sdt(): PrivateScope, Public, HideBySig, SpecialName
    set_Sdt(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UpdateMargin(): PrivateScope, Public, HideBySig, SpecialName
    set_UpdateMargin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_VelocityMargin(): PrivateScope, Public, HideBySig, SpecialName
    set_VelocityMargin(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.SRayCast: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 Index 'get set' : 
    Single Fraction 'get set' : 
    BulletSharp.SoftBody.EFeature Feature 'get set' : 
    BulletSharp.SoftBody.SoftBody Body 'get set' : 
  Methods:
    get_Body(): PrivateScope, Public, HideBySig, SpecialName
    set_Body(SoftBody): PrivateScope, Public, HideBySig, SpecialName
    get_Feature(): PrivateScope, Public, HideBySig, SpecialName
    set_Feature(EFeature): PrivateScope, Public, HideBySig, SpecialName
    get_Fraction(): PrivateScope, Public, HideBySig, SpecialName
    set_Fraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Index(): PrivateScope, Public, HideBySig, SpecialName
    set_Index(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.Tetra: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.Feature
  Properties:
    Single RestVolume 'get set' : 
    BulletSharp.SoftBody.NodePtrArray Nodes 'get ' : 
    Single C2  'get set' : 
    Single C1  'get set' : 
    BulletSharp.Vector3Array C0 'get ' : 
  Methods:
    get_C0(): PrivateScope, Public, HideBySig, SpecialName
    get_C1(): PrivateScope, Public, HideBySig, SpecialName
    set_C1(Single): PrivateScope, Public, HideBySig, SpecialName
    get_C2(): PrivateScope, Public, HideBySig, SpecialName
    set_C2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Nodes(): PrivateScope, Public, HideBySig, SpecialName
    get_RestVolume(): PrivateScope, Public, HideBySig, SpecialName
    set_RestVolume(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.SoftBody: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionObject
    Void .ctor(BulletSharp.SoftBody.SoftBodyWorldInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.SoftBody.SoftBodyWorldInfo, BulletSharp.Vector3Array, BulletSharp.ScalarArray): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.SoftBody.SoftBodyWorldInfo, SharpDX.Vector3[], Single[]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.SoftBodyWorldInfo WorldInfo 'get set' : 
    SharpDX.Vector3 WindVelocity 'get set' : 
    Single Volume 'get ' : 
    BulletSharp.AlignedIntArray UserIndexMapping 'get ' : 
    Boolean UpdateRuntimeConstants 'get set' : 
    Single TotalMass 'get set' : 
    Single TimeAccumulator 'get set' : 
    BulletSharp.SoftBody.AlignedTetraArray Tetras 'get ' : 
    System.Object Tag 'get set' : 
    BulletSharp.SoftBody.SolverState SolverState 'get ' : 
    BulletSharp.SoftBody.AlignedSoftContactArray SoftContacts 'get ' : 
    BulletSharp.SoftBody.SoftBodySolver SoftBodySolver 'get set' : 
    BulletSharp.SoftBody.AlignedRigidContactArray RigidContacts 'get ' : 
    Single RestLengthScale 'get set' : 
    BulletSharp.SoftBody.Pose Pose 'get ' : 
    BulletSharp.SoftBody.AlignedNoteArray Notes 'get ' : 
    BulletSharp.SoftBody.AlignedNodeArray Nodes 'get ' : 
    BulletSharp.SoftBody.AlignedMaterialArray Materials 'get ' : 
    BulletSharp.SoftBody.AlignedLinkArray Links 'get ' : 
    BulletSharp.SoftBody.AlignedJointArray Joints 'get ' : 
    SharpDX.Matrix InitialWorldTransform 'get set' : 
    BulletSharp.SoftBody.AlignedFaceArray Faces 'get ' : 
    BulletSharp.AlignedCollisionObjectArray CollisionDisabledObjects 'get ' : 
    BulletSharp.SoftBody.AlignedClusterArray Clusters 'get ' : 
    Int32 ClusterCount 'get ' : 
    BulletSharp.SoftBody.Config Cfg 'get ' : 
    BulletSharp.Vector3Array Bounds 'get ' : 
    BulletSharp.SoftBody.AlignedAnchorArray Anchors 'get ' : 
  Methods:
    set_TotalMass(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UpdateRuntimeConstants(): PrivateScope, Public, HideBySig, SpecialName
    set_UpdateRuntimeConstants(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_UserIndexMapping(): PrivateScope, Public, HideBySig, SpecialName
    get_Volume(): PrivateScope, Public, HideBySig, SpecialName
    get_WindVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_WindVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_WorldInfo(): PrivateScope, Public, HideBySig, SpecialName
    set_WorldInfo(SoftBodyWorldInfo): PrivateScope, Public, HideBySig, SpecialName
    GetLinkVertexData(Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetLinkVertexNormalData(Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetMass(Int32): PrivateScope, Public, HideBySig
    GetTetraVertexData(Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetTetraVertexNormalData(Vector3[]&(Out), Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetTetraVertexNormalData(Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetVertexNormalData(Vector3[]&(Out), Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetVertexNormalData(Vector3[]&(Out)): PrivateScope, Public, HideBySig
    IndicesToPointers(): PrivateScope, Public, HideBySig
    InitDefaults(): PrivateScope, Public, HideBySig
    InitializeClusters(): PrivateScope, Public, HideBySig
    InitializeFaceTree(): PrivateScope, Public, HideBySig
    IntegrateMotion(): PrivateScope, Public, HideBySig
    PointersToIndices(): PrivateScope, Public, HideBySig
    PredictMotion(Single): PrivateScope, Public, HideBySig
    PrepareClusters(Int32): PrivateScope, Public, HideBySig
    PSolveAnchors(SoftBody, Single, Single): PrivateScope, Public, Static, HideBySig
    PSolveLinks(SoftBody, Single, Single): PrivateScope, Public, Static, HideBySig
    PSolveRContacts(SoftBody, Single, Single): PrivateScope, Public, Static, HideBySig
    PSolveSContacts(SoftBody, Single, Single): PrivateScope, Public, Static, HideBySig
    RandomizeConstraints(): PrivateScope, Public, HideBySig
    RayTest(Vector3, Vector3, SRayCast): PrivateScope, Public, HideBySig
    RayTest(Vector3, Vector3, Single&(Out), EFeature, Int32&(Out), Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    Refine(ImplicitFn, Single, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    ReleaseCluster(Int32): PrivateScope, Public, HideBySig
    ReleaseClusters(): PrivateScope, Public, HideBySig
    ResetLinkRestLengths(): PrivateScope, Public, HideBySig
    Rotate(Quaternion): PrivateScope, Public, HideBySig
    Scale(Vector3): PrivateScope, Public, HideBySig
    SetMass(Int32, Single): PrivateScope, Public, HideBySig
    SetPose(Boolean(HasFieldMarshal), Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetSolver(ESolverPresets): PrivateScope, Public, HideBySig
    SetTotalDensity(Single): PrivateScope, Public, HideBySig
    SetTotalMass(Single): PrivateScope, Public, HideBySig
    SetTotalMass(Single, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetVelocity(Vector3): PrivateScope, Public, HideBySig
    SetVolumeDensity(Single): PrivateScope, Public, HideBySig
    SetVolumeMass(Single): PrivateScope, Public, HideBySig
    SolveClusters(Single): PrivateScope, Public, HideBySig
    SolveClusters(AlignedSoftBodyArray): PrivateScope, Public, Static, HideBySig
    SolveCommonConstraints(SoftBody[], Int32): PrivateScope, Public, Static, HideBySig
    SolveConstraints(): PrivateScope, Public, HideBySig
    StaticSolve(Int32): PrivateScope, Public, HideBySig
    Transform(Matrix): PrivateScope, Public, HideBySig
    Translate(Single, Single, Single): PrivateScope, Public, HideBySig
    Translate(Vector3): PrivateScope, Public, HideBySig
    Upcast(CollisionObject): PrivateScope, Public, Static, HideBySig
    UpdateArea(): PrivateScope, Public, HideBySig
    UpdateArea(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    UpdateBounds(): PrivateScope, Public, HideBySig
    UpdateClusters(): PrivateScope, Public, HideBySig
    UpdateConstants(): PrivateScope, Public, HideBySig
    UpdateLinkConstants(): PrivateScope, Public, HideBySig
    UpdateNormals(): PrivateScope, Public, HideBySig
    UpdatePose(): PrivateScope, Public, HideBySig
    VSolveLinks(SoftBody, Single): PrivateScope, Public, Static, HideBySig
    get_Anchors(): PrivateScope, Public, HideBySig, SpecialName
    get_Bounds(): PrivateScope, Public, HideBySig, SpecialName
    get_Cfg(): PrivateScope, Public, HideBySig, SpecialName
    get_ClusterCount(): PrivateScope, Public, HideBySig, SpecialName
    get_Clusters(): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionDisabledObjects(): PrivateScope, Public, HideBySig, SpecialName
    get_Faces(): PrivateScope, Public, HideBySig, SpecialName
    get_InitialWorldTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_InitialWorldTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_Joints(): PrivateScope, Public, HideBySig, SpecialName
    get_Links(): PrivateScope, Public, HideBySig, SpecialName
    get_Materials(): PrivateScope, Public, HideBySig, SpecialName
    get_Nodes(): PrivateScope, Public, HideBySig, SpecialName
    get_Notes(): PrivateScope, Public, HideBySig, SpecialName
    get_Pose(): PrivateScope, Public, HideBySig, SpecialName
    get_RestLengthScale(): PrivateScope, Public, HideBySig, SpecialName
    set_RestLengthScale(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RigidContacts(): PrivateScope, Public, HideBySig, SpecialName
    get_SoftBodySolver(): PrivateScope, Public, HideBySig, SpecialName
    set_SoftBodySolver(SoftBodySolver): PrivateScope, Public, HideBySig, SpecialName
    get_SoftContacts(): PrivateScope, Public, HideBySig, SpecialName
    get_SolverState(): PrivateScope, Public, HideBySig, SpecialName
    get_Tag(): PrivateScope, Public, HideBySig, SpecialName
    set_Tag(Object): PrivateScope, Public, HideBySig, SpecialName
    get_Tetras(): PrivateScope, Public, HideBySig, SpecialName
    get_TimeAccumulator(): PrivateScope, Public, HideBySig, SpecialName
    set_TimeAccumulator(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TotalMass(): PrivateScope, Public, HideBySig, SpecialName
    AddAeroForceToFace(Vector3, Int32): PrivateScope, Public, HideBySig
    AddAeroForceToNode(Vector3, Int32): PrivateScope, Public, HideBySig
    AddForce(Vector3, Int32): PrivateScope, Public, HideBySig
    AddForce(Vector3): PrivateScope, Public, HideBySig
    AddVelocity(Vector3): PrivateScope, Public, HideBySig
    AddVelocity(Vector3, Int32): PrivateScope, Public, HideBySig
    AppendAnchor(Int32, RigidBody): PrivateScope, Public, HideBySig
    AppendAnchor(Int32, RigidBody, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    AppendAnchor(Int32, RigidBody, Boolean(HasFieldMarshal), Single): PrivateScope, Public, HideBySig
    AppendAnchor(Int32, RigidBody, Vector3): PrivateScope, Public, HideBySig
    AppendAnchor(Int32, RigidBody, Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    AppendAnchor(Int32, RigidBody, Vector3, Boolean(HasFieldMarshal), Single): PrivateScope, Public, HideBySig
    AppendAngularJoint(Specs, SoftBody): PrivateScope, Public, HideBySig
    AppendAngularJoint(Specs, Cluster, Body): PrivateScope, Public, HideBySig
    AppendAngularJoint(Specs): PrivateScope, Public, HideBySig
    AppendAngularJoint(Specs, Body): PrivateScope, Public, HideBySig
    AppendFace(Int32, Int32, Int32): PrivateScope, Public, HideBySig
    AppendFace(Int32, Int32, Int32, Material): PrivateScope, Public, HideBySig
    AppendFace(): PrivateScope, Public, HideBySig
    AppendFace(Int32): PrivateScope, Public, HideBySig
    AppendFace(Int32, Material): PrivateScope, Public, HideBySig
    AppendLinearJoint(Specs, Cluster, Body): PrivateScope, Public, HideBySig
    AppendLinearJoint(Specs): PrivateScope, Public, HideBySig
    AppendLinearJoint(Specs, Body): PrivateScope, Public, HideBySig
    AppendLinearJoint(Specs, SoftBody): PrivateScope, Public, HideBySig
    AppendLink(Node, Node): PrivateScope, Public, HideBySig
    AppendLink(Node, Node, Material): PrivateScope, Public, HideBySig
    AppendLink(Node, Node, Material, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    AppendLink(): PrivateScope, Public, HideBySig
    AppendLink(Int32): PrivateScope, Public, HideBySig
    AppendLink(Int32, Material): PrivateScope, Public, HideBySig
    AppendLink(Int32, Int32): PrivateScope, Public, HideBySig
    AppendLink(Int32, Int32, Material): PrivateScope, Public, HideBySig
    AppendLink(Int32, Int32, Material, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    AppendMaterial(): PrivateScope, Public, HideBySig
    AppendNode(Vector3, Single): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Vector4): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Vector4, Node): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Vector4, Node, Node): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Vector4, Node, Node, Node): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Vector4, Node, Node, Node, Node): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Node): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Link): PrivateScope, Public, HideBySig
    AppendNote(String, Vector3, Face): PrivateScope, Public, HideBySig
    AppendTetra(Int32, Int32, Int32, Int32): PrivateScope, Public, HideBySig
    AppendTetra(Int32, Int32, Int32, Int32, Material): PrivateScope, Public, HideBySig
    AppendTetra(Int32, Material): PrivateScope, Public, HideBySig
    ApplyClusters(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    ApplyForces(): PrivateScope, Public, HideBySig
    CheckContact(CollisionObjectWrapper, Vector3, Single, Scti): PrivateScope, Public, HideBySig
    CheckFace(Int32, Int32, Int32): PrivateScope, Public, HideBySig
    CheckLink(Int32, Int32): PrivateScope, Public, HideBySig
    CheckLink(Node, Node): PrivateScope, Public, HideBySig
    CleanupClusters(): PrivateScope, Public, HideBySig
    ClusterAImpulse(Cluster, Impulse): PrivateScope, Public, Static, HideBySig
    ClusterCom(Cluster): PrivateScope, Public, Static, HideBySig
    ClusterCom(Int32): PrivateScope, Public, HideBySig
    ClusterDAImpulse(Cluster, Vector3): PrivateScope, Public, Static, HideBySig
    ClusterDCImpulse(Cluster, Vector3): PrivateScope, Public, Static, HideBySig
    ClusterDImpulse(Cluster, Vector3, Vector3): PrivateScope, Public, Static, HideBySig
    ClusterImpulse(Cluster, Vector3, Impulse): PrivateScope, Public, Static, HideBySig
    ClusterVAImpulse(Cluster, Vector3): PrivateScope, Public, Static, HideBySig
    ClusterVelocity(Cluster, Vector3): PrivateScope, Public, Static, HideBySig
    ClusterVImpulse(Cluster, Vector3, Vector3): PrivateScope, Public, Static, HideBySig
    CutLink(Int32, Int32, Single): PrivateScope, Public, HideBySig
    CutLink(Node, Node, Single): PrivateScope, Public, HideBySig
    DampClusters(): PrivateScope, Public, HideBySig
    DefaultCollisionHandler(SoftBody): PrivateScope, Public, HideBySig
    DefaultCollisionHandler(CollisionObjectWrapper): PrivateScope, Public, HideBySig
    EvaluateCom(): PrivateScope, Public, HideBySig
    GenerateBendingConstraints(Int32): PrivateScope, Public, HideBySig
    GenerateBendingConstraints(Int32, Material): PrivateScope, Public, HideBySig
    GenerateClusters(Int32): PrivateScope, Public, HideBySig
    GenerateClusters(Int32, Int32): PrivateScope, Public, HideBySig
    GetAabb(Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    GetFaceVertexData(Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetFaceVertexNormalData(Vector3[]&(Out), Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetFaceVertexNormalData(Vector3[]&(Out)): PrivateScope, Public, HideBySig
Struct BulletSharp.SoftBody.AeroModel: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.AeroModel VPoint = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.AeroModel VTwoSided = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.AeroModel VTwoSidedLiftDrag = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.AeroModel VOneSided = 3 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.AeroModel FTwoSided = 4 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.AeroModel FTwoSidedLiftDrag = 5 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.AeroModel FOneSided = 6 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.AeroModel End = 7 : Public, Static, Literal, HasDefault
Struct BulletSharp.SoftBody.EFeature: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.EFeature None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.EFeature Node = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.EFeature Link = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.EFeature Face = 3 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.EFeature Tetra = 4 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.EFeature End = 5 : Public, Static, Literal, HasDefault
Struct BulletSharp.SoftBody.FCollisions: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.FCollisions RvsMask = 15 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions SdfRS = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions CLRS = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions SvsMask = 48 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions VFSS = 16 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions CLSS = 32 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions CLSelf = 64 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions Default = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FCollisions End = 2 : Public, Static, Literal, HasDefault
Struct BulletSharp.SoftBody.FMaterial: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.FMaterial DebugDraw = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FMaterial Default = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.FMaterial End = 2 : Public, Static, Literal, HasDefault
Struct BulletSharp.SoftBody.ESolverPresets: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.ESolverPresets Positions = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.ESolverPresets Velocities = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.ESolverPresets Default = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.ESolverPresets End = 1 : Public, Static, Literal, HasDefault
Class BulletSharp.DataStream: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :System.IO.Stream
    Void .ctor(System.Array, Boolean, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(IntPtr, Int64, Boolean, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int64, Boolean, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    IntPtr DataPointer 'get ' : 
    Int64 Position 'get set' : 
    Int64 Length 'get ' : 
    Boolean CanWrite 'get ' : 
    Boolean CanSeek 'get ' : 
    Boolean CanRead 'get ' : 
  Methods:
    Seek(Int64, SeekOrigin): PrivateScope, Public, Virtual, HideBySig
    Write(Byte[], Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    Write(T): PrivateScope, Public, HideBySig
    WriteRange(IntPtr, Int64): PrivateScope, Public, HideBySig
    WriteRange(T[]): PrivateScope, Public, HideBySig
    WriteRange(T[], Int32, Int32): PrivateScope, Public, HideBySig
    Read(Byte[], Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    Read(): PrivateScope, Public, HideBySig
    ReadRange(Int32): PrivateScope, Public, HideBySig
    ReadRange(T[], Int32, Int32): PrivateScope, Public, HideBySig
    Flush(): PrivateScope, Public, Virtual, HideBySig
    SetLength(Int64): PrivateScope, Public, Virtual, HideBySig
    get_CanRead(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_CanSeek(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_CanWrite(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Length(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Position(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Position(Int64): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_DataPointer(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ContactDestroyedEventHandler: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, SpecialName, RTSpecialName
  Methods:
    Invoke(Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    BeginInvoke(Object, AsyncCallback, Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Final, Virtual, VtableLayoutMask
Class BulletSharp.ContactProcessedEventHandler: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, SpecialName, RTSpecialName
  Methods:
    Invoke(ManifoldPoint, CollisionObject, CollisionObject): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    BeginInvoke(ManifoldPoint, CollisionObject, CollisionObject, AsyncCallback, Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Final, Virtual, VtableLayoutMask
Struct BulletSharp.PersistentManifold: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
  Fields:
    BulletSharp.PersistentManifold Zero : Public, Static
  Properties:
    Int32 NumContacts 'get set' : 
    Int32 Index1A 'get set' : 
    Single ContactProcessingThreshold 'get set' : 
    Single ContactBreakingThreshold 'get set' : 
    Int32 CompanionIDB 'get set' : 
    Int32 CompanionIDA 'get set' : 
    BulletSharp.CollisionObject Body1 'get ' : 
    BulletSharp.CollisionObject Body0 'get ' : 
  Events:
    BulletSharp.ContactProcessedEventHandler ContactProcessed: SpecialName
    BulletSharp.ContactDestroyedEventHandler ContactDestroyed: SpecialName
  Methods:
    add_ContactDestroyed(ContactDestroyedEventHandler): PrivateScope, Public, Static, HideBySig, SpecialName
    remove_ContactDestroyed(ContactDestroyedEventHandler): PrivateScope, Public, Static, HideBySig, SpecialName
    add_ContactProcessed(ContactProcessedEventHandler): PrivateScope, Public, Static, HideBySig, SpecialName
    remove_ContactProcessed(ContactProcessedEventHandler): PrivateScope, Public, Static, HideBySig, SpecialName
    AddManifoldPoint(ManifoldPoint): PrivateScope, Public, HideBySig
    AddManifoldPoint(ManifoldPoint, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    ClearManifold(): PrivateScope, Public, HideBySig
    ClearUserCache(ManifoldPoint): PrivateScope, Public, HideBySig
    Equals(Object): PrivateScope, Public, Final, Virtual, HideBySig
    GetCacheEntry(ManifoldPoint): PrivateScope, Public, HideBySig
    GetHashCode(): PrivateScope, Public, Final, Virtual, HideBySig
    GetContactPoint(Int32): PrivateScope, Public, HideBySig
    RefreshContactPoints(Matrix, Matrix): PrivateScope, Public, HideBySig
    RemoveContactPoint(Int32): PrivateScope, Public, HideBySig
    ReplaceContactPoint(ManifoldPoint, Int32): PrivateScope, Public, HideBySig
    SetBodies(CollisionObject, CollisionObject): PrivateScope, Public, HideBySig
    ValidContactDistance(ManifoldPoint): PrivateScope, Public, HideBySig
    op_Equality(PersistentManifold, PersistentManifold): PrivateScope, Public, Static, HideBySig, SpecialName
    op_Inequality(PersistentManifold, PersistentManifold): PrivateScope, Public, Static, HideBySig, SpecialName
    get_Body0(): PrivateScope, Public, HideBySig, SpecialName
    get_Body1(): PrivateScope, Public, HideBySig, SpecialName
    get_CompanionIDA(): PrivateScope, Public, HideBySig, SpecialName
    set_CompanionIDA(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_CompanionIDB(): PrivateScope, Public, HideBySig, SpecialName
    set_CompanionIDB(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_ContactBreakingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactBreakingThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ContactProcessingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactProcessingThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Index1A(): PrivateScope, Public, HideBySig, SpecialName
    set_Index1A(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumContacts(): PrivateScope, Public, HideBySig, SpecialName
    set_NumContacts(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.AlignedObjectArray`1[T]: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Type parameter: T
  Interfaces:
    System.Collections.Generic.IList`1[T]
    System.Collections.Generic.ICollection`1[T]
    System.Collections.Generic.IEnumerable`1[T]
    System.Collections.IEnumerable
    System.IDisposable
  Properties:
    Boolean IsReadOnly 'get ' : 
    Boolean IsDisposed 'get ' : 
    T Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
  Methods:
    get_Count(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    set_Item(Int32, T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_IsReadOnly(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Add(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Clear(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Contains(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CopyTo(T[], Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    GetObjectEnumerator(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    IndexOf(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Insert(Int32, T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    PopBack(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Remove(T): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    RemoveAt(Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.AlignedAnchorArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Anchor]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Anchor Item [Int32] 'get set' : 
    Int32 Capacity 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    Add(Anchor): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Anchor[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Anchor): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedBroadphasePairArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.BroadphasePair]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.BroadphasePair Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(BroadphasePair): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(BroadphasePair): PrivateScope, Public, Virtual, HideBySig
    CopyTo(BroadphasePair[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(BroadphasePair): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(BroadphasePair): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, BroadphasePair): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedClusterArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Cluster]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Cluster Item [Int32] 'get set' : 
    Int32 Capacity 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    Add(Cluster): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(Cluster): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Cluster[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Cluster): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(Cluster): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Cluster): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedCollisionObjectArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.CollisionObject]
  Properties:
    BulletSharp.CollisionObject Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(CollisionObject, Int16, Int16): PrivateScope, Public, HideBySig
    Add(CollisionObject): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(CollisionObject): PrivateScope, Public, Virtual, HideBySig
    CopyTo(CollisionObject[], Int32): PrivateScope, Public, Virtual, HideBySig
    GetObjectEnumerator(): PrivateScope, Public, Virtual, HideBySig
    GetEnumerator(): PrivateScope, Public, Virtual, HideBySig
    IndexOf(CollisionObject): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(CollisionObject): PrivateScope, Public, Virtual, HideBySig
    RemoveAt(Int32): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, CollisionObject): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedFaceArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Face]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Face Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Face): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Face[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Face): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedIndexedMeshArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.IndexedMesh]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.IndexedMesh Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(IndexedMesh): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(IndexedMesh[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, IndexedMesh): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedIntArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[System.Int32]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Int32): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(Int32): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Int32[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(Int32): PrivateScope, Public, Virtual, HideBySig
    Resize(Int32, Int32): PrivateScope, Public, HideBySig
    Resize(Int32): PrivateScope, Public, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedJointArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Joint]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Joint Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Joint): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(Joint): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Joint[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Joint): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(Joint): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Joint): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedManifoldArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.PersistentManifold]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.PersistentManifold Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(PersistentManifold): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(PersistentManifold): PrivateScope, Public, Virtual, HideBySig
    CopyTo(PersistentManifold[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(PersistentManifold): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(PersistentManifold): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, PersistentManifold): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedLinkArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Link]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Link Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Link): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Link[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Link): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedMaterialArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Material]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Material Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Material): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(Material): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Material[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Material): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(Material): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Material): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedNodeArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Node]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Node Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Node): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Node[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Node): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedNodePtrArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Node]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Node Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Node): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(Node): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Node[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Node): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(Node): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Node): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedNoteArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Note]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Note Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Note): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Note[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Note): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedPSolverArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.PSolver]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.PSolver Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(PSolver): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(PSolver): PrivateScope, Public, Virtual, HideBySig
    CopyTo(PSolver[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(PSolver): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(PSolver): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, PSolver): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedRigidContactArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.RigidContact]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.RigidContact Item [Int32] 'get set' : 
    Int32 Capacity 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    Add(RigidContact): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(RigidContact[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, RigidContact): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedScalarArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[System.Single]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Single): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(Single): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Single[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Single): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(Single): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Single): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedSoftBodyArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.SoftBody]
  Properties:
    BulletSharp.SoftBody.SoftBody Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(SoftBody): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(SoftBody): PrivateScope, Public, Virtual, HideBySig
    CopyTo(SoftBody[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(SoftBody): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(SoftBody): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, SoftBody): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedSoftContactArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.SoftContact]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.SoftContact Item [Int32] 'get set' : 
    Int32 Capacity 'get ' : 
    Int32 Count 'get ' : 
  Methods:
    Add(SoftContact): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(SoftContact[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, SoftContact): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedTetraArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.Tetra]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.Tetra Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Tetra): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Tetra[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Tetra): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedTriangleMeshArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.TriangleMesh]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.TriangleMesh Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(TriangleMesh): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    CopyTo(TriangleMesh[], Int32): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, TriangleMesh): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.AlignedVector3Array: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[SharpDX.Vector3]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(Vector4): PrivateScope, Public, HideBySig
    Add(Vector3): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(Vector3): PrivateScope, Public, Virtual, HideBySig
    CopyTo(Vector3[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(Vector3): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(Vector3): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, Vector3): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.SoftBody.AlignedVSolverArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.AlignedObjectArray`1[BulletSharp.SoftBody.VSolver]
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.VSolver Item [Int32] 'get set' : 
    Int32 Count 'get ' : 
    Int32 Capacity 'get ' : 
  Methods:
    Add(VSolver): PrivateScope, Public, Virtual, HideBySig
    Clear(): PrivateScope, Public, Virtual, HideBySig
    Contains(VSolver): PrivateScope, Public, Virtual, HideBySig
    CopyTo(VSolver[], Int32): PrivateScope, Public, Virtual, HideBySig
    IndexOf(VSolver): PrivateScope, Public, Virtual, HideBySig
    PopBack(): PrivateScope, Public, Virtual, HideBySig
    Remove(VSolver): PrivateScope, Public, Virtual, HideBySig
    Swap(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Capacity(): PrivateScope, Public, HideBySig, SpecialName
    get_Count(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    get_Item(Int32): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_Item(Int32, VSolver): PrivateScope, Public, Virtual, HideBySig, SpecialName
Class BulletSharp.BroadphaseAabbCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Methods:
    Process(BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.BroadphaseRayCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.BroadphaseAabbCallback
  Properties:
    BulletSharp.UIntArray Signs 'get ' : 
    SharpDX.Vector3 RayDirectionInverse 'get set' : 
    Single LambdaMax 'get set' : 
  Methods:
    get_LambdaMax(): PrivateScope, Public, HideBySig, SpecialName
    set_LambdaMax(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RayDirectionInverse(): PrivateScope, Public, HideBySig, SpecialName
    set_RayDirectionInverse(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Signs(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.BroadphaseInterface: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.OverlappingPairCache OverlappingPairCache 'get ' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    AabbTestRef(Vector3&, Vector3&, BroadphaseAabbCallback): PrivateScope, Public, HideBySig
    AabbTest(Vector3, Vector3, BroadphaseAabbCallback): PrivateScope, Public, HideBySig
    CalculateOverlappingPairs(Dispatcher): PrivateScope, Public, HideBySig
    CreateProxy(Vector3&, Vector3&, BroadphaseNativeType, IntPtr, Int16, Int16, Dispatcher, IntPtr): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DestroyProxy(BroadphaseProxy, Dispatcher): PrivateScope, Public, HideBySig
    GetAabb(BroadphaseProxy, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    GetBroadphaseAabb(Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    PrintStats(): PrivateScope, Public, HideBySig
    RayTestRef(Vector3&, Vector3&, BroadphaseRayCallback): PrivateScope, Public, HideBySig
    RayTestRef(Vector3&, Vector3&, BroadphaseRayCallback, Vector3&, Vector3&): PrivateScope, Public, HideBySig
    RayTest(Vector3, Vector3, BroadphaseRayCallback): PrivateScope, Public, HideBySig
    RayTest(Vector3, Vector3, BroadphaseRayCallback, Vector3, Vector3): PrivateScope, Public, HideBySig
    ResetPool(Dispatcher): PrivateScope, Public, HideBySig
    SetAabbRef(BroadphaseProxy, Vector3&, Vector3&, Dispatcher): PrivateScope, Public, HideBySig
    SetAabb(BroadphaseProxy, Vector3, Vector3, Dispatcher): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_OverlappingPairCache(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.BroadphaseProxy: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    Int32 UniqueID 'get set' : 
    IntPtr MultiSapParentProxy 'get set' : 
    BulletSharp.CollisionFilterGroups CollisionFilterMask 'get set' : 
    BulletSharp.CollisionFilterGroups CollisionFilterGroup 'get set' : 
    System.Object ClientObject 'get set' : 
    SharpDX.Vector3 AabbMin 'get set' : 
    SharpDX.Vector3 AabbMax 'get set' : 
  Methods:
    IsCompound(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    IsConcave(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    IsConvex(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    IsConvex2D(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    IsInfinite(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    IsNonMoving(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    IsPolyhedral(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    IsSoftBody(BroadphaseNativeType): PrivateScope, Public, Static, HideBySig
    get_AabbMax(): PrivateScope, Public, HideBySig, SpecialName
    set_AabbMax(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AabbMin(): PrivateScope, Public, HideBySig, SpecialName
    set_AabbMin(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_ClientObject(): PrivateScope, Public, HideBySig, SpecialName
    set_ClientObject(Object): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFilterGroup(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterGroup(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFilterMask(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterMask(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
    get_MultiSapParentProxy(): PrivateScope, Public, HideBySig, SpecialName
    set_MultiSapParentProxy(IntPtr): PrivateScope, Public, HideBySig, SpecialName
    get_UniqueID(): PrivateScope, Public, HideBySig, SpecialName
    set_UniqueID(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.BroadphasePair: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    BulletSharp.BroadphaseProxy Proxy1 'get set' : 
    BulletSharp.BroadphaseProxy Proxy0 'get set' : 
    BulletSharp.CollisionAlgorithm Algorithm 'get set' : 
  Methods:
    get_Algorithm(): PrivateScope, Public, HideBySig, SpecialName
    set_Algorithm(CollisionAlgorithm): PrivateScope, Public, HideBySig, SpecialName
    get_Proxy0(): PrivateScope, Public, HideBySig, SpecialName
    set_Proxy0(BroadphaseProxy): PrivateScope, Public, HideBySig, SpecialName
    get_Proxy1(): PrivateScope, Public, HideBySig, SpecialName
    set_Proxy1(BroadphaseProxy): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CollisionConfiguration: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.PoolAllocator PersistentManifoldPool 'get ' : 
    BulletSharp.PoolAllocator CollisionAlgorithmPool 'get ' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    GetCollisionAlgorithmCreateFunc(BroadphaseNativeType, BroadphaseNativeType): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_CollisionAlgorithmPool(): PrivateScope, Public, HideBySig, SpecialName
    get_PersistentManifoldPool(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.CollisionObjectWrapper: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    SharpDX.Matrix WorldTransform 'get ' : 
    Int32 PartID 'get set' : 
    Int32 Index 'get set' : 
    BulletSharp.CollisionShape CollisionShape 'get ' : 
    BulletSharp.CollisionObject CollisionObject 'get ' : 
  Methods:
    GetWorldTransform(Matrix&(Out)): PrivateScope, Public, HideBySig
    get_CollisionObject(): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionShape(): PrivateScope, Public, HideBySig, SpecialName
    get_Index(): PrivateScope, Public, HideBySig, SpecialName
    set_Index(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PartID(): PrivateScope, Public, HideBySig, SpecialName
    set_PartID(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_WorldTransform(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.LocalShapeInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 TriangleIndex 'get set' : 
    Int32 ShapePart 'get set' : 
  Methods:
    get_ShapePart(): PrivateScope, Public, HideBySig, SpecialName
    set_ShapePart(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleIndex(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleIndex(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.LocalRayResult: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.CollisionObject, BulletSharp.LocalShapeInfo, SharpDX.Vector3, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.LocalShapeInfo LocalShapeInfo 'get set' : 
    SharpDX.Vector3 HitNormalLocal 'get set' : 
    Single HitFraction 'get set' : 
    BulletSharp.CollisionObject CollisionObject 'get set' : 
  Methods:
    get_CollisionObject(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionObject(CollisionObject): PrivateScope, Public, HideBySig, SpecialName
    get_HitFraction(): PrivateScope, Public, HideBySig, SpecialName
    set_HitFraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_HitNormalLocal(): PrivateScope, Public, HideBySig, SpecialName
    set_HitNormalLocal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LocalShapeInfo(): PrivateScope, Public, HideBySig, SpecialName
    set_LocalShapeInfo(LocalShapeInfo): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.RayResultCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
    Boolean HasHit 'get ' : 
    UInt32 Flags 'get set' : 
    BulletSharp.CollisionObject CollisionObject 'get set' : 
    BulletSharp.CollisionFilterGroups CollisionFilterMask 'get set' : 
    BulletSharp.CollisionFilterGroups CollisionFilterGroup 'get set' : 
    Single ClosestHitFraction 'get set' : 
  Methods:
    AddSingleResult(LocalRayResult, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    NeedsCollision(BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    get_ClosestHitFraction(): PrivateScope, Public, HideBySig, SpecialName
    set_ClosestHitFraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFilterGroup(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterGroup(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFilterMask(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterMask(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionObject(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionObject(CollisionObject): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    set_Flags(UInt32): PrivateScope, Public, HideBySig, SpecialName
    get_HasHit(): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.AllHitsRayResultCallback: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.RayResultCallback
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 RayToWorld 'get set' : 
    SharpDX.Vector3 RayFromWorld 'get set' : 
    System.Collections.Generic.IList`1[SharpDX.Vector3] HitPointWorld 'get ' : 
    System.Collections.Generic.IList`1[SharpDX.Vector3] HitNormalWorld 'get ' : 
    System.Collections.Generic.IList`1[System.Single] HitFractions 'get ' : 
    System.Collections.Generic.IList`1[BulletSharp.CollisionObject] CollisionObjects 'get ' : 
  Methods:
    AddSingleResult(LocalRayResult, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig
    get_CollisionObjects(): PrivateScope, Public, HideBySig, SpecialName
    get_HitFractions(): PrivateScope, Public, HideBySig, SpecialName
    get_HitNormalWorld(): PrivateScope, Public, HideBySig, SpecialName
    get_HitPointWorld(): PrivateScope, Public, HideBySig, SpecialName
    get_RayFromWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_RayFromWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_RayToWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_RayToWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.LocalConvexResult: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.CollisionObject, BulletSharp.LocalShapeInfo, SharpDX.Vector3, SharpDX.Vector3, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.LocalShapeInfo LocalShapeInfo 'get set' : 
    SharpDX.Vector3 HitPointLocal 'get set' : 
    SharpDX.Vector3 HitNormalLocal 'get set' : 
    Single HitFraction 'get set' : 
    BulletSharp.CollisionObject HitCollisionObject 'get set' : 
  Methods:
    get_HitCollisionObject(): PrivateScope, Public, HideBySig, SpecialName
    set_HitCollisionObject(CollisionObject): PrivateScope, Public, HideBySig, SpecialName
    get_HitFraction(): PrivateScope, Public, HideBySig, SpecialName
    set_HitFraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_HitNormalLocal(): PrivateScope, Public, HideBySig, SpecialName
    set_HitNormalLocal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_HitPointLocal(): PrivateScope, Public, HideBySig, SpecialName
    set_HitPointLocal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LocalShapeInfo(): PrivateScope, Public, HideBySig, SpecialName
    set_LocalShapeInfo(LocalShapeInfo): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ConvexResultCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Properties:
    Boolean HasHit 'get ' : 
    BulletSharp.CollisionFilterGroups CollisionFilterMask 'get set' : 
    BulletSharp.CollisionFilterGroups CollisionFilterGroup 'get set' : 
    Single ClosestHitFraction 'get set' : 
  Methods:
    AddSingleResult(LocalConvexResult, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    NeedsCollision(BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    get_ClosestHitFraction(): PrivateScope, Public, HideBySig, SpecialName
    set_ClosestHitFraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFilterGroup(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterGroup(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFilterMask(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterMask(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
    get_HasHit(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ClosestConvexResultCallback: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexResultCallback
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 HitPointWorld 'get set' : 
    SharpDX.Vector3 HitNormalWorld 'get set' : 
    BulletSharp.CollisionObject HitCollisionObject 'get set' : 
    SharpDX.Vector3 ConvexToWorld 'get set' : 
    SharpDX.Vector3 ConvexFromWorld 'get set' : 
  Methods:
    AddSingleResult(LocalConvexResult, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig
    get_ConvexFromWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_ConvexFromWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_ConvexToWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_ConvexToWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_HitCollisionObject(): PrivateScope, Public, HideBySig, SpecialName
    set_HitCollisionObject(CollisionObject): PrivateScope, Public, HideBySig, SpecialName
    get_HitNormalWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_HitNormalWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_HitPointWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_HitPointWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ClosestRayResultCallback: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.RayResultCallback
    Void .ctor(SharpDX.Vector3 ByRef, SharpDX.Vector3 ByRef): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 RayToWorld 'get set' : 
    SharpDX.Vector3 RayFromWorld 'get set' : 
    SharpDX.Vector3 HitPointWorld 'get set' : 
    SharpDX.Vector3 HitNormalWorld 'get set' : 
  Methods:
    AddSingleResult(LocalRayResult, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig
    get_HitNormalWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_HitNormalWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_HitPointWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_HitPointWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_RayFromWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_RayFromWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_RayToWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_RayToWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ContactResultCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Properties:
    BulletSharp.CollisionFilterGroups CollisionFilterMask 'get set' : 
    BulletSharp.CollisionFilterGroups CollisionFilterGroup 'get set' : 
  Methods:
    AddSingleResult(ManifoldPoint, CollisionObjectWrapper, Int32, Int32, CollisionObjectWrapper, Int32, Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    NeedsCollision(BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    get_CollisionFilterGroup(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterGroup(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionFilterMask(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionFilterMask(CollisionFilterGroups): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CollisionWorld: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.Dispatcher, BulletSharp.BroadphaseInterface, BulletSharp.CollisionConfiguration): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.OverlappingPairCache PairCache 'get ' : 
    Int32 NumCollisionObjects 'get ' : 
    Boolean IsDisposed 'get ' : 
    Boolean ForceUpdateAllAabbs 'get set' : 
    BulletSharp.DispatcherInfo DispatchInfo 'get ' : 
    BulletSharp.Dispatcher Dispatcher 'get set' : 
    BulletSharp.IDebugDraw DebugDrawer 'get set' : 
    BulletSharp.AlignedCollisionObjectArray CollisionObjectArray 'get ' : 
    BulletSharp.BroadphaseInterface Broadphase 'get set' : 
  Methods:
    AddCollisionObject(CollisionObject): PrivateScope, Public, HideBySig
    AddCollisionObject(CollisionObject, Int16, Int16): PrivateScope, Public, HideBySig
    AddCollisionObject(CollisionObject, CollisionFilterGroups, CollisionFilterGroups): PrivateScope, Public, HideBySig
    ComputeOverlappingPairs(): PrivateScope, Public, HideBySig
    ContactPairTest(CollisionObject, CollisionObject, ContactResultCallback): PrivateScope, Public, HideBySig
    ContactTest(CollisionObject, ContactResultCallback): PrivateScope, Public, HideBySig
    ConvexSweepTest(ConvexShape, Matrix, Matrix, ConvexResultCallback): PrivateScope, Public, HideBySig
    ConvexSweepTest(ConvexShape, Matrix, Matrix, ConvexResultCallback, Single): PrivateScope, Public, HideBySig
    DebugDrawObject(Matrix, CollisionShape, Color3): PrivateScope, Public, HideBySig
    DebugDrawWorld(): PrivateScope, Public, HideBySig
    ObjectQuerySingle(ConvexShape, Matrix, Matrix, CollisionObject, CollisionShape, Matrix, ConvexResultCallback, Single): PrivateScope, Public, Static, HideBySig
    PerformDiscreteCollisionDetection(): PrivateScope, Public, HideBySig
    RayTest(Vector3&, Vector3&, RayResultCallback): PrivateScope, Public, HideBySig
    RayTest(Vector3, Vector3, RayResultCallback): PrivateScope, Public, HideBySig
    RayTestSingle(Matrix, Matrix, CollisionObject, CollisionShape, Matrix, RayResultCallback): PrivateScope, Public, Static, HideBySig
    RemoveCollisionObject(CollisionObject): PrivateScope, Public, HideBySig
    Serialize(Serializer): PrivateScope, Public, HideBySig
    UpdateAabbs(): PrivateScope, Public, HideBySig
    UpdateSingleAabb(CollisionObject): PrivateScope, Public, HideBySig
    get_Broadphase(): PrivateScope, Public, HideBySig, SpecialName
    set_Broadphase(BroadphaseInterface): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionObjectArray(): PrivateScope, Public, HideBySig, SpecialName
    get_DebugDrawer(): PrivateScope, Public, HideBySig, SpecialName
    set_DebugDrawer(IDebugDraw): PrivateScope, Public, HideBySig, SpecialName
    get_Dispatcher(): PrivateScope, Public, HideBySig, SpecialName
    get_DispatchInfo(): PrivateScope, Public, HideBySig, SpecialName
    get_ForceUpdateAllAabbs(): PrivateScope, Public, HideBySig, SpecialName
    set_ForceUpdateAllAabbs(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_NumCollisionObjects(): PrivateScope, Public, HideBySig, SpecialName
    get_PairCache(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ConvexShape: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.CollisionShape
  Properties:
    Int32 NumPreferredPenetrationDirections 'get ' : 
    Single MarginNonVirtual 'get ' : 
  Methods:
    BatchedUnitVectorGetSupportingVertexWithoutMargin(Vector3[], Vector3[]&(Out)): PrivateScope, Public, HideBySig
    GetAabbNonVirtual(Matrix, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    GetAabbSlow(Matrix, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    GetPreferredPenetrationDirection(Int32, Vector3&(Out)): PrivateScope, Public, HideBySig
    LocalGetSupportingVertex(Vector3): PrivateScope, Public, HideBySig
    LocalGetSupportingVertexWithoutMargin(Vector3): PrivateScope, Public, HideBySig
    LocalGetSupportVertexNonVirtual(Vector3): PrivateScope, Public, HideBySig
    LocalGetSupportVertexWithoutMarginNonVirtual(Vector3): PrivateScope, Public, HideBySig
    Project(Matrix&, Vector3&, Single&(Out), Single&(Out), Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    get_MarginNonVirtual(): PrivateScope, Public, HideBySig, SpecialName
    get_NumPreferredPenetrationDirections(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.DispatcherInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    Boolean UseEpa 'get set' : 
    Boolean UseConvexConservativeDistanceUtil 'get set' : 
    Boolean UseContinuous 'get set' : 
    Single TimeStep 'get set' : 
    Single TimeOfImpact 'get set' : 
    Int32 StepCount 'get set' : 
    Boolean EnableSpu 'get set' : 
    Boolean EnableSatConvex 'get set' : 
    DispatchFunc DispatchFunction 'get set' : 
    BulletSharp.IDebugDraw DebugDraw 'get set' : 
    Single ConvexConservativeDistanceThreshold 'get set' : 
    Single AllowedCcdPenetration 'get set' : 
  Methods:
    get_AllowedCcdPenetration(): PrivateScope, Public, HideBySig, SpecialName
    set_AllowedCcdPenetration(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ConvexConservativeDistanceThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_ConvexConservativeDistanceThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DebugDraw(): PrivateScope, Public, HideBySig, SpecialName
    set_DebugDraw(IDebugDraw): PrivateScope, Public, HideBySig, SpecialName
    get_DispatchFunction(): PrivateScope, Public, HideBySig, SpecialName
    set_DispatchFunction(DispatchFunc): PrivateScope, Public, HideBySig, SpecialName
    get_EnableSatConvex(): PrivateScope, Public, HideBySig, SpecialName
    set_EnableSatConvex(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_EnableSpu(): PrivateScope, Public, HideBySig, SpecialName
    set_EnableSpu(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_StepCount(): PrivateScope, Public, HideBySig, SpecialName
    set_StepCount(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_TimeOfImpact(): PrivateScope, Public, HideBySig, SpecialName
    set_TimeOfImpact(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TimeStep(): PrivateScope, Public, HideBySig, SpecialName
    set_TimeStep(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UseContinuous(): PrivateScope, Public, HideBySig, SpecialName
    set_UseContinuous(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_UseConvexConservativeDistanceUtil(): PrivateScope, Public, HideBySig, SpecialName
    set_UseConvexConservativeDistanceUtil(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_UseEpa(): PrivateScope, Public, HideBySig, SpecialName
    set_UseEpa(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.DispatcherInfo+DispatchFunc: AutoLayout, AnsiClass, Class, NestedPublic, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    DispatchFunc Discrete = 1 : Public, Static, Literal, HasDefault
    DispatchFunc Continuous = 2 : Public, Static, Literal, HasDefault
Class BulletSharp.Dispatcher: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Int32 NumManifolds 'get ' : 
    Boolean IsDisposed 'get ' : 
    BulletSharp.PoolAllocator InternalManifoldPool 'get ' : 
  Methods:
    AllocateCollisionAlgorithm(Int32): PrivateScope, Public, HideBySig
    ClearManifold(PersistentManifold): PrivateScope, Public, HideBySig
    DispatchAllCollisionPairs(OverlappingPairCache, DispatcherInfo, Dispatcher): PrivateScope, Public, HideBySig
    FindAlgorithm(CollisionObjectWrapper, CollisionObjectWrapper): PrivateScope, Public, HideBySig
    FindAlgorithm(CollisionObjectWrapper, CollisionObjectWrapper, PersistentManifold): PrivateScope, Public, HideBySig
    FreeCollisionAlgorithm(IntPtr): PrivateScope, Public, HideBySig
    GetManifoldByIndexInternal(Int32): PrivateScope, Public, HideBySig
    GetNewManifold(CollisionObject, CollisionObject): PrivateScope, Public, HideBySig
    NeedsCollision(CollisionObject, CollisionObject): PrivateScope, Public, HideBySig
    NeedsResponse(CollisionObject, CollisionObject): PrivateScope, Public, HideBySig
    ReleaseManifold(PersistentManifold): PrivateScope, Public, HideBySig
    get_InternalManifoldPool(): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_NumManifolds(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.DynamicsWorld: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.CollisionWorld
  Properties:
    System.Object WorldUserInfo 'get set' : 
    BulletSharp.DynamicsWorldType WorldType 'get ' : 
    BulletSharp.ContactSolverInfo SolverInfo 'get ' : 
    Int32 NumConstraints 'get ' : 
    SharpDX.Vector3 Gravity 'get set' : 
    BulletSharp.ConstraintSolver ConstraintSolver 'get set' : 
  Methods:
    AddAction(IAction): PrivateScope, Public, HideBySig
    AddConstraint(TypedConstraint): PrivateScope, Public, HideBySig
    AddConstraint(TypedConstraint, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    AddRigidBody(RigidBody, Int16, Int16): PrivateScope, Public, HideBySig
    AddRigidBody(RigidBody, CollisionFilterGroups, CollisionFilterGroups): PrivateScope, Public, HideBySig
    AddRigidBody(RigidBody): PrivateScope, Public, HideBySig
    ClearForces(): PrivateScope, Public, HideBySig
    GetConstraint(Int32): PrivateScope, Public, HideBySig
    InternalTickCallbackUnmanaged(IntPtr, Single): PrivateScope, Public, HideBySig
    RemoveAction(IAction): PrivateScope, Public, HideBySig
    RemoveConstraint(TypedConstraint): PrivateScope, Public, HideBySig
    RemoveRigidBody(RigidBody): PrivateScope, Public, HideBySig
    SetInternalTickCallback(InternalTickCallback): PrivateScope, Public, HideBySig
    SetInternalTickCallback(InternalTickCallback, Object): PrivateScope, Public, HideBySig
    SetInternalTickCallback(InternalTickCallback, Object, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    StepSimulation(Single): PrivateScope, Public, HideBySig
    StepSimulation(Single, Int32): PrivateScope, Public, HideBySig
    StepSimulation(Single, Int32, Single): PrivateScope, Public, HideBySig
    SynchronizeMotionStates(): PrivateScope, Public, HideBySig
    get_ConstraintSolver(): PrivateScope, Public, HideBySig, SpecialName
    set_ConstraintSolver(ConstraintSolver): PrivateScope, Public, HideBySig, SpecialName
    get_Gravity(): PrivateScope, Public, HideBySig, SpecialName
    set_Gravity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_NumConstraints(): PrivateScope, Public, HideBySig, SpecialName
    get_SolverInfo(): PrivateScope, Public, HideBySig, SpecialName
    get_WorldType(): PrivateScope, Public, HideBySig, SpecialName
    get_WorldUserInfo(): PrivateScope, Public, HideBySig, SpecialName
    set_WorldUserInfo(Object): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.DynamicsWorld+InternalTickCallback: AutoLayout, AnsiClass, Class, NestedPublic, Sealed, BeforeFieldInit
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, SpecialName, RTSpecialName
  Methods:
    Invoke(DynamicsWorld, Single): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    BeginInvoke(DynamicsWorld, Single, AsyncCallback, Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Final, Virtual, VtableLayoutMask
Interface BulletSharp.IAction: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract, BeforeFieldInit
  Methods:
    DebugDraw(IDebugDraw): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    UpdateAction(CollisionWorld, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class BulletSharp.ContactAddedEventHandler: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, SpecialName, RTSpecialName
  Methods:
    Invoke(ManifoldPoint, CollisionObjectWrapper, Int32, Int32, CollisionObjectWrapper, Int32, Int32): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    BeginInvoke(ManifoldPoint, CollisionObjectWrapper, Int32, Int32, CollisionObjectWrapper, Int32, Int32, AsyncCallback, Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Final, Virtual, VtableLayoutMask
Class BulletSharp.ManifoldPoint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    System.Object UserPersistentData 'get set' : 
    SharpDX.Vector3 PositionWorldOnB 'get set' : 
    SharpDX.Vector3 PositionWorldOnA 'get set' : 
    Int32 PartId1 'get set' : 
    Int32 PartId0 'get set' : 
    SharpDX.Vector3 NormalWorldOnB 'get set' : 
    SharpDX.Vector3 LocalPointB 'get set' : 
    SharpDX.Vector3 LocalPointA 'get set' : 
    Int32 LifeTime 'get set' : 
    Boolean LateralFrictionInitialized 'get set' : 
    SharpDX.Vector3 LateralFrictionDir2 'get set' : 
    SharpDX.Vector3 LateralFrictionDir1 'get set' : 
    Int32 Index1 'get set' : 
    Int32 Index0 'get set' : 
    Single Distance1 'get set' : 
    Single Distance 'get set' : 
    Single ContactMotion2 'get set' : 
    Single ContactMotion1 'get set' : 
    Single ContactCfm2 'get set' : 
    Single ContactCfm1 'get set' : 
    Single CombinedRollingFriction 'get set' : 
    Single CombinedRestitution 'get set' : 
    Single CombinedFriction 'get set' : 
    Single AppliedImpulseLateral2 'get set' : 
    Single AppliedImpulseLateral1 'get set' : 
    Single AppliedImpulse 'get set' : 
  Events:
    BulletSharp.ContactAddedEventHandler ContactAdded: SpecialName
  Methods:
    add_ContactAdded(ContactAddedEventHandler): PrivateScope, Public, Static, HideBySig, SpecialName
    remove_ContactAdded(ContactAddedEventHandler): PrivateScope, Public, Static, HideBySig, SpecialName
    get_AppliedImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedImpulse(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedImpulseLateral1(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedImpulseLateral1(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedImpulseLateral2(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedImpulseLateral2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CombinedFriction(): PrivateScope, Public, HideBySig, SpecialName
    set_CombinedFriction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CombinedRestitution(): PrivateScope, Public, HideBySig, SpecialName
    set_CombinedRestitution(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CombinedRollingFriction(): PrivateScope, Public, HideBySig, SpecialName
    set_CombinedRollingFriction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ContactCfm1(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactCfm1(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ContactCfm2(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactCfm2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ContactMotion1(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactMotion1(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ContactMotion2(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactMotion2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Distance(): PrivateScope, Public, HideBySig, SpecialName
    set_Distance(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Distance1(): PrivateScope, Public, HideBySig, SpecialName
    set_Distance1(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Index0(): PrivateScope, Public, HideBySig, SpecialName
    set_Index0(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Index1(): PrivateScope, Public, HideBySig, SpecialName
    set_Index1(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_LateralFrictionDir1(): PrivateScope, Public, HideBySig, SpecialName
    set_LateralFrictionDir1(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LateralFrictionDir2(): PrivateScope, Public, HideBySig, SpecialName
    set_LateralFrictionDir2(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LateralFrictionInitialized(): PrivateScope, Public, HideBySig, SpecialName
    set_LateralFrictionInitialized(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_LifeTime(): PrivateScope, Public, HideBySig, SpecialName
    set_LifeTime(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_LocalPointA(): PrivateScope, Public, HideBySig, SpecialName
    set_LocalPointA(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LocalPointB(): PrivateScope, Public, HideBySig, SpecialName
    set_LocalPointB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_NormalWorldOnB(): PrivateScope, Public, HideBySig, SpecialName
    set_NormalWorldOnB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_PartId0(): PrivateScope, Public, HideBySig, SpecialName
    set_PartId0(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PartId1(): PrivateScope, Public, HideBySig, SpecialName
    set_PartId1(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PositionWorldOnA(): PrivateScope, Public, HideBySig, SpecialName
    set_PositionWorldOnA(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_PositionWorldOnB(): PrivateScope, Public, HideBySig, SpecialName
    set_PositionWorldOnB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_UserPersistentData(): PrivateScope, Public, HideBySig, SpecialName
    set_UserPersistentData(Object): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.OverlappingPairCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    AddOverlappingPair(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    RemoveOverlappingPair(BroadphaseProxy, BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    RemoveOverlappingPairsContainingProxy(BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.OverlapCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    ProcessOverlap(BroadphasePair): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.OverlapFilterCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    NeedBroadphaseCollision(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.OverlappingPairCache: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.OverlappingPairCallback
  Properties:
    BulletSharp.AlignedBroadphasePairArray OverlappingPairArray 'get ' : 
    Int32 NumOverlappingPairs 'get ' : 
    Boolean HasDeferredRemoval 'get ' : 
  Methods:
    CleanOverlappingPair(BroadphasePair, Dispatcher): PrivateScope, Public, HideBySig
    CleanProxyFromPairs(BroadphaseProxy, Dispatcher): PrivateScope, Public, HideBySig
    FindPair(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, HideBySig
    ProcessAllOverlappingPairs(OverlapCallback[], Dispatcher): PrivateScope, Public, HideBySig
    SetInternalGhostPairCallback(OverlappingPairCallback): PrivateScope, Public, HideBySig
    SetOverlapFilterCallback(OverlapFilterCallback): PrivateScope, Public, HideBySig
    SortOverlappingPairs(Dispatcher): PrivateScope, Public, HideBySig
    get_HasDeferredRemoval(): PrivateScope, Public, HideBySig, SpecialName
    get_NumOverlappingPairs(): PrivateScope, Public, HideBySig, SpecialName
    get_OverlappingPairArray(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.HashedOverlappingPairCache: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.OverlappingPairCache
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.OverlapFilterCallback OverlapFilterCallback 'get set' : 
    Int32 Count 'get ' : 
  Methods:
    AddOverlappingPair(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig
    NeedsBroadphaseCollision(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, HideBySig
    RemoveOverlappingPair(BroadphaseProxy, BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
    RemoveOverlappingPairsContainingProxy(BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
    get_Count(): PrivateScope, Public, HideBySig, SpecialName
    get_OverlapFilterCallback(): PrivateScope, Public, HideBySig, SpecialName
    set_OverlapFilterCallback(OverlapFilterCallback): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SortedOverlappingPairCache: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.OverlappingPairCache
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.OverlapFilterCallback OverlapFilterCallback 'get set' : 
  Methods:
    AddOverlappingPair(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig
    NeedsBroadphaseCollision(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, HideBySig
    RemoveOverlappingPair(BroadphaseProxy, BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
    RemoveOverlappingPairsContainingProxy(BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
    get_OverlapFilterCallback(): PrivateScope, Public, HideBySig, SpecialName
    set_OverlapFilterCallback(OverlapFilterCallback): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.NullPairCache: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.OverlappingPairCache
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    AddOverlappingPair(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig
    RemoveOverlappingPair(BroadphaseProxy, BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
    RemoveOverlappingPairsContainingProxy(BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
Interface BulletSharp.IDebugDraw: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract, BeforeFieldInit
  Properties:
    BulletSharp.DebugDrawModes DebugMode 'get set' : 
  Methods:
    Draw3dText(Vector3&, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawAabb(Vector3&, Vector3&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawArc(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Color3, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawArc(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Color3, Boolean(HasFieldMarshal), Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawBox(Vector3&, Vector3&, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawBox(Vector3&, Vector3&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawCapsule(Single, Single, Int32, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawCone(Single, Single, Int32, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawContactPoint(Vector3&, Vector3&, Single, Int32, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawCylinder(Single, Single, Int32, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawLine(Vector3&, Vector3&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawLine(Vector3&, Vector3&, Color3, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawPlane(Vector3&, Single, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawSphere(Single, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawSphere(Vector3&, Single, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawSpherePatch(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Single, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawSpherePatch(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Single, Color3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawSpherePatch(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Single, Color3, Single, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawTransform(Matrix&, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawTriangle(Vector3&, Vector3&, Vector3&, Color3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawTriangle(Vector3&, Vector3&, Vector3&, Vector3&, Vector3&, Vector3&, Color3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    FlushLines(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    ReportErrorWarning(String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_DebugMode(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    set_DebugMode(DebugDrawModes): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
Class BulletSharp.DebugDraw: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    BulletSharp.IDebugDraw
    BulletSharp.ITrackingDisposable
    System.IDisposable
  Properties:
    BulletSharp.DebugDrawModes DebugMode 'get set' : 
    Boolean IsDisposed 'get ' : 
  Events:
    System.EventHandler OnDisposed: SpecialName
    System.EventHandler OnDisposing: SpecialName
  Methods:
    add_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    add_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Draw3dText(Vector3&, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawAabb(Vector3&, Vector3&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawArc(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Color3, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawArc(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Color3, Boolean(HasFieldMarshal), Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawBox(Vector3&, Vector3&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawBox(Vector3&, Vector3&, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawCapsule(Single, Single, Int32, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawCone(Single, Single, Int32, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawContactPoint(Vector3&, Vector3&, Single, Int32, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawCylinder(Single, Single, Int32, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawLine(Vector3&, Vector3&, Color3, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawLine(Vector3&, Vector3&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    DrawPlane(Vector3&, Single, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawSphere(Single, Matrix&, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawSphere(Vector3&, Single, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawSpherePatch(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Single, Color3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawSpherePatch(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Single, Color3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawSpherePatch(Vector3&, Vector3&, Vector3&, Single, Single, Single, Single, Single, Color3, Single, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawTransform(Matrix&, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawTriangle(Vector3&, Vector3&, Vector3&, Vector3&, Vector3&, Vector3&, Color3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DrawTriangle(Vector3&, Vector3&, Vector3&, Color3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    FlushLines(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    ReportErrorWarning(String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_DebugMode(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    set_DebugMode(DebugDrawModes): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.Serializer: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Int32 SerializationFlags 'get set' : 
    Int32 NumChunks 'get ' : 
    Int32 CurrentBufferSize 'get ' : 
    IntPtr BufferPointer 'get ' : 
  Methods:
    FinishSerialization(): PrivateScope, Public, HideBySig
    RegisterNameForObject(Object, String): PrivateScope, Public, HideBySig
    SerializeName(String): PrivateScope, Public, HideBySig
    StartSerialization(): PrivateScope, Public, HideBySig
    LockBuffer(): PrivateScope, Public, HideBySig
    get_BufferPointer(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentBufferSize(): PrivateScope, Public, HideBySig, SpecialName
    get_NumChunks(): PrivateScope, Public, HideBySig, SpecialName
    get_SerializationFlags(): PrivateScope, Public, HideBySig, SpecialName
    set_SerializationFlags(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.DefaultSerializer: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.Serializer
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    WriteHeader(String&(Out)): PrivateScope, Public, HideBySig
Class BulletSharp.DiscreteDynamicsWorld: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DynamicsWorld
    Void .ctor(BulletSharp.Dispatcher, BulletSharp.BroadphaseInterface, BulletSharp.ConstraintSolver, BulletSharp.CollisionConfiguration): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean SynchronizeAllMotionStates 'get set' : 
    BulletSharp.SimulationIslandManager SimulationIslandManager 'get ' : 
    Boolean LatencyMotionStateInterpolation 'get set' : 
    Boolean ApplySpeculativeContactRestitution 'get set' : 
  Methods:
    ApplyGravity(): PrivateScope, Public, HideBySig
    DebugDrawConstraint(TypedConstraint): PrivateScope, Public, HideBySig
    SetNumTasks(Int32): PrivateScope, Public, HideBySig
    SynchronizeSingleMotionState(RigidBody): PrivateScope, Public, HideBySig
    get_ApplySpeculativeContactRestitution(): PrivateScope, Public, HideBySig, SpecialName
    set_ApplySpeculativeContactRestitution(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_LatencyMotionStateInterpolation(): PrivateScope, Public, HideBySig, SpecialName
    set_LatencyMotionStateInterpolation(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_SimulationIslandManager(): PrivateScope, Public, HideBySig, SpecialName
    get_SynchronizeAllMotionStates(): PrivateScope, Public, HideBySig, SpecialName
    set_SynchronizeAllMotionStates(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.SoftBodyHelpers: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  Methods:
    CalculateUV(Int32, Int32, Int32, Int32, Int32): PrivateScope, Public, Static, HideBySig
    CreateEllipsoid(SoftBodyWorldInfo, Vector3, Vector3, Int32): PrivateScope, Public, Static, HideBySig
    CreateFromConvexHull(SoftBodyWorldInfo, Vector3[]): PrivateScope, Public, Static, HideBySig
    CreateFromConvexHull(SoftBodyWorldInfo, Vector3[], Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    CreateFromTetGenData(SoftBodyWorldInfo, String, String, String, Boolean(HasFieldMarshal), Boolean(HasFieldMarshal), Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    CreateFromTetGenFile(SoftBodyWorldInfo, String, String, String, Boolean(HasFieldMarshal), Boolean(HasFieldMarshal), Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    CreateFromTriMesh(SoftBodyWorldInfo, Vector3[], Int32[]): PrivateScope, Public, Static, HideBySig
    CreateFromTriMesh(SoftBodyWorldInfo, Vector3[], Int32[], Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    CreateFromTriMesh(SoftBodyWorldInfo, Single[], Int32[]): PrivateScope, Public, Static, HideBySig
    CreateFromTriMesh(SoftBodyWorldInfo, Single[], Int32[], Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    CreatePatch(SoftBodyWorldInfo, Vector3, Vector3, Vector3, Vector3, Int32, Int32, Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    CreatePatchUV(SoftBodyWorldInfo, Vector3, Vector3, Vector3, Vector3, Int32, Int32, Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    CreatePatchUV(SoftBodyWorldInfo, Vector3, Vector3, Vector3, Vector3, Int32, Int32, Int32, Boolean(HasFieldMarshal), Single[]): PrivateScope, Public, Static, HideBySig
    CreateRope(SoftBodyWorldInfo, Vector3, Vector3, Int32, Int32): PrivateScope, Public, Static, HideBySig
    Draw(SoftBody, IDebugDraw): PrivateScope, Public, Static, HideBySig
    Draw(SoftBody, IDebugDraw, DrawFlags): PrivateScope, Public, Static, HideBySig
    DrawClusterTree(SoftBody, IDebugDraw): PrivateScope, Public, Static, HideBySig
    DrawClusterTree(SoftBody, IDebugDraw, Int32): PrivateScope, Public, Static, HideBySig
    DrawClusterTree(SoftBody, IDebugDraw, Int32, Int32): PrivateScope, Public, Static, HideBySig
    DrawFaceTree(SoftBody, IDebugDraw): PrivateScope, Public, Static, HideBySig
    DrawFaceTree(SoftBody, IDebugDraw, Int32): PrivateScope, Public, Static, HideBySig
    DrawFaceTree(SoftBody, IDebugDraw, Int32, Int32): PrivateScope, Public, Static, HideBySig
    DrawFrame(SoftBody, IDebugDraw): PrivateScope, Public, Static, HideBySig
    DrawInfos(SoftBody, IDebugDraw, Boolean(HasFieldMarshal), Boolean(HasFieldMarshal), Boolean(HasFieldMarshal)): PrivateScope, Public, Static, HideBySig
    DrawNodeTree(SoftBody, IDebugDraw): PrivateScope, Public, Static, HideBySig
    DrawNodeTree(SoftBody, IDebugDraw, Int32): PrivateScope, Public, Static, HideBySig
    DrawNodeTree(SoftBody, IDebugDraw, Int32, Int32): PrivateScope, Public, Static, HideBySig
    ReoptimizeLinkOrder(SoftBody): PrivateScope, Public, Static, HideBySig
Class BulletSharp.SoftBody.SoftRigidDynamicsWorld: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DiscreteDynamicsWorld
    Void .ctor(BulletSharp.Dispatcher, BulletSharp.BroadphaseInterface, BulletSharp.ConstraintSolver, BulletSharp.CollisionConfiguration): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.Dispatcher, BulletSharp.BroadphaseInterface, BulletSharp.ConstraintSolver, BulletSharp.CollisionConfiguration, BulletSharp.SoftBody.SoftBodySolver): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.SoftBody.SoftBodyWorldInfo WorldInfo 'get ' : 
    BulletSharp.SoftBody.AlignedSoftBodyArray SoftBodyArray 'get ' : 
    BulletSharp.SoftBody.DrawFlags DrawFlags 'get set' : 
  Methods:
    AddSoftBody(SoftBody): PrivateScope, Public, HideBySig
    AddSoftBody(SoftBody, Int16, Int16): PrivateScope, Public, HideBySig
    AddSoftBody(SoftBody, CollisionFilterGroups, CollisionFilterGroups): PrivateScope, Public, HideBySig
    RemoveSoftBody(SoftBody): PrivateScope, Public, HideBySig
    get_DrawFlags(): PrivateScope, Public, HideBySig, SpecialName
    set_DrawFlags(DrawFlags): PrivateScope, Public, HideBySig, SpecialName
    get_SoftBodyArray(): PrivateScope, Public, HideBySig, SpecialName
    get_WorldInfo(): PrivateScope, Public, HideBySig, SpecialName
Interface BulletSharp.ICharacterController: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract, BeforeFieldInit
  Interfaces:
    BulletSharp.IAction
  Properties:
    Boolean OnGround 'get ' : 
    Boolean CanJump 'get ' : 
  Methods:
    Jump(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    PlayerStep(CollisionWorld, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    PreStep(CollisionWorld): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Reset(CollisionWorld): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    SetUpInterpolate(Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    SetVelocityForTimeInterval(Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    SetWalkDirection(Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    Warp(Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_CanJump(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    get_OnGround(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
Struct BulletSharp.SoftBody.DrawFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SoftBody.DrawFlags Nodes = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Links = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Faces = 4 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Tetras = 8 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Normals = 16 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Contacts = 32 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Anchors = 64 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Notes = 128 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Clusters = 256 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags NodeTree = 512 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags FaceTree = 1024 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags ClusterTree = 2048 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Joints = 4096 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags Std = 4302 : Public, Static, Literal, HasDefault
    BulletSharp.SoftBody.DrawFlags StdTetra = 4306 : Public, Static, Literal, HasDefault
Class BulletSharp.RigidBodyConstructionInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Single, BulletSharp.MotionState, BulletSharp.CollisionShape): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Single, BulletSharp.MotionState, BulletSharp.CollisionShape, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Matrix StartWorldTransform 'get set' : 
    Single RollingFriction 'get set' : 
    Single Restitution 'get set' : 
    BulletSharp.MotionState MotionState 'get set' : 
    Single Mass 'get set' : 
    SharpDX.Vector3 LocalInertia 'get set' : 
    Single LinearSleepingThreshold 'get set' : 
    Single LinearDamping 'get set' : 
    Single Friction 'get set' : 
    BulletSharp.CollisionShape CollisionShape 'get set' : 
    Single AngularSleepingThreshold 'get set' : 
    Single AngularDamping 'get set' : 
    Single AdditionalLinearDampingThresholdSqr 'get set' : 
    Single AdditionalDampingFactor 'get set' : 
    Boolean AdditionalDamping 'get set' : 
    Single AdditionalAngularDampingThresholdSqr 'get set' : 
    Single AdditionalAngularDampingFactor 'get set' : 
  Methods:
    get_AdditionalAngularDampingFactor(): PrivateScope, Public, HideBySig, SpecialName
    set_AdditionalAngularDampingFactor(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AdditionalAngularDampingThresholdSqr(): PrivateScope, Public, HideBySig, SpecialName
    set_AdditionalAngularDampingThresholdSqr(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AdditionalDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_AdditionalDamping(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_AdditionalDampingFactor(): PrivateScope, Public, HideBySig, SpecialName
    set_AdditionalDampingFactor(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AdditionalLinearDampingThresholdSqr(): PrivateScope, Public, HideBySig, SpecialName
    set_AdditionalLinearDampingThresholdSqr(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AngularDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AngularSleepingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularSleepingThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionShape(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionShape(CollisionShape): PrivateScope, Public, HideBySig, SpecialName
    get_Friction(): PrivateScope, Public, HideBySig, SpecialName
    set_Friction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LinearDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LinearSleepingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearSleepingThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LocalInertia(): PrivateScope, Public, HideBySig, SpecialName
    set_LocalInertia(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Mass(): PrivateScope, Public, HideBySig, SpecialName
    set_Mass(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MotionState(): PrivateScope, Public, HideBySig, SpecialName
    set_MotionState(MotionState): PrivateScope, Public, HideBySig, SpecialName
    get_Restitution(): PrivateScope, Public, HideBySig, SpecialName
    set_Restitution(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RollingFriction(): PrivateScope, Public, HideBySig, SpecialName
    set_RollingFriction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_StartWorldTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_StartWorldTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.RigidBody: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionObject
    Void .ctor(BulletSharp.RigidBodyConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean WantsSleeping 'get ' : 
    SharpDX.Vector3 TotalTorque 'get ' : 
    SharpDX.Vector3 TotalForce 'get ' : 
    SharpDX.Quaternion Orientation 'get ' : 
    Int32 NumConstraintRefs 'get ' : 
    BulletSharp.MotionState MotionState 'get set' : 
    SharpDX.Vector3 LocalInertia 'get ' : 
    SharpDX.Vector3 LinearVelocity 'get set' : 
    Single LinearSleepingThreshold 'get ' : 
    SharpDX.Vector3 LinearFactor 'get set' : 
    Single LinearDamping 'get ' : 
    Boolean IsInWorld 'get ' : 
    Single InvMass 'get ' : 
    SharpDX.Matrix InvInertiaTensorWorld 'get ' : 
    SharpDX.Vector3 InvInertiaDiagLocal 'get set' : 
    SharpDX.Vector3 Gravity 'get set' : 
    Int32 FrictionSolverType 'get set' : 
    BulletSharp.RigidBodyFlags Flags 'get set' : 
    Int32 ContactSolverType 'get set' : 
    SharpDX.Matrix CenterOfMassTransform 'get set' : 
    SharpDX.Vector3 CenterOfMassPosition 'get ' : 
    BulletSharp.BroadphaseProxy BroadphaseProxy 'get set' : 
    SharpDX.Vector3 AngularVelocity 'get set' : 
    Single AngularSleepingThreshold 'get ' : 
    SharpDX.Vector3 AngularFactor 'get set' : 
    Single AngularDamping 'get ' : 
  Methods:
    AddConstraintRef(TypedConstraint): PrivateScope, Public, HideBySig
    ApplyCentralForce(Vector3): PrivateScope, Public, HideBySig
    ApplyCentralImpulse(Vector3): PrivateScope, Public, HideBySig
    ApplyDamping(Single): PrivateScope, Public, HideBySig
    ApplyForce(Vector3, Vector3): PrivateScope, Public, HideBySig
    ApplyGravity(): PrivateScope, Public, HideBySig
    ApplyImpulse(Vector3, Vector3): PrivateScope, Public, HideBySig
    ApplyTorque(Vector3): PrivateScope, Public, HideBySig
    ApplyTorqueImpulse(Vector3): PrivateScope, Public, HideBySig
    ClearForces(): PrivateScope, Public, HideBySig
    ComputeAngularImpulseDenominator(Vector3): PrivateScope, Public, HideBySig
    ComputeGyroscopicForceExplicit(Single): PrivateScope, Public, HideBySig
    ComputeGyroscopicImpulseImplicitBody(Single): PrivateScope, Public, HideBySig
    ComputeGyroscopicImpulseImplicitWorld(Single): PrivateScope, Public, HideBySig
    ComputeImpulseDenominator(Vector3, Vector3): PrivateScope, Public, HideBySig
    GetAabb(Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    GetConstraintRef(Int32): PrivateScope, Public, HideBySig
    GetVelocityInLocalPoint(Vector3): PrivateScope, Public, HideBySig
    IntegrateVelocities(Single): PrivateScope, Public, HideBySig
    PredictIntegratedTransform(Single, Matrix&(Out)): PrivateScope, Public, HideBySig
    ProceedToTransform(Matrix): PrivateScope, Public, HideBySig
    RemoveConstraintRef(TypedConstraint): PrivateScope, Public, HideBySig
    SaveKinematicState(Single): PrivateScope, Public, HideBySig
    SetDamping(Single, Single): PrivateScope, Public, HideBySig
    SetMassProps(Single, Vector3): PrivateScope, Public, HideBySig
    SetSleepingThresholds(Single, Single): PrivateScope, Public, HideBySig
    Translate(Vector3): PrivateScope, Public, HideBySig
    Upcast(CollisionObject): PrivateScope, Public, Static, HideBySig
    UpdateDeactivation(Single): PrivateScope, Public, HideBySig
    UpdateInertiaTensor(): PrivateScope, Public, HideBySig
    get_AngularDamping(): PrivateScope, Public, HideBySig, SpecialName
    get_AngularFactor(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularFactor(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AngularSleepingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    get_AngularVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_BroadphaseProxy(): PrivateScope, Public, HideBySig, SpecialName
    set_BroadphaseProxy(BroadphaseProxy): PrivateScope, Public, HideBySig, SpecialName
    get_CenterOfMassPosition(): PrivateScope, Public, HideBySig, SpecialName
    get_CenterOfMassTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_CenterOfMassTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_ContactSolverType(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactSolverType(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    set_Flags(RigidBodyFlags): PrivateScope, Public, HideBySig, SpecialName
    get_FrictionSolverType(): PrivateScope, Public, HideBySig, SpecialName
    set_FrictionSolverType(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Gravity(): PrivateScope, Public, HideBySig, SpecialName
    set_Gravity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_InvInertiaDiagLocal(): PrivateScope, Public, HideBySig, SpecialName
    set_InvInertiaDiagLocal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_InvInertiaTensorWorld(): PrivateScope, Public, HideBySig, SpecialName
    get_InvMass(): PrivateScope, Public, HideBySig, SpecialName
    get_IsInWorld(): PrivateScope, Public, HideBySig, SpecialName
    get_LinearDamping(): PrivateScope, Public, HideBySig, SpecialName
    get_LinearFactor(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearFactor(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LinearSleepingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    get_LinearVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LocalInertia(): PrivateScope, Public, HideBySig, SpecialName
    get_MotionState(): PrivateScope, Public, HideBySig, SpecialName
    set_MotionState(MotionState): PrivateScope, Public, HideBySig, SpecialName
    get_NumConstraintRefs(): PrivateScope, Public, HideBySig, SpecialName
    get_Orientation(): PrivateScope, Public, HideBySig, SpecialName
    get_TotalForce(): PrivateScope, Public, HideBySig, SpecialName
    get_TotalTorque(): PrivateScope, Public, HideBySig, SpecialName
    get_WantsSleeping(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.MultiBodyLinkCollider: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionObject
    Void .ctor(BulletSharp.MultiBody, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.MultiBody MultiBody 'get set' : 
    Int32 Link 'get set' : 
  Methods:
    Upcast(CollisionObject): PrivateScope, Public, Static, HideBySig
    get_Link(): PrivateScope, Public, HideBySig, SpecialName
    set_Link(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_MultiBody(): PrivateScope, Public, HideBySig, SpecialName
    set_MultiBody(MultiBody): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.DiscreteCollisionDetectorInterface: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    GetClosestPoints(ClosestPointInput, Result, IDebugDraw): PrivateScope, Public, HideBySig
    GetClosestPoints(ClosestPointInput, Result, IDebugDraw, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.DiscreteCollisionDetectorInterface+ClosestPointInput: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Matrix TransformB 'get set' : 
    SharpDX.Matrix TransformA 'get set' : 
    Single MaximumDistanceSquared 'get set' : 
  Methods:
    get_MaximumDistanceSquared(): PrivateScope, Public, HideBySig, SpecialName
    set_MaximumDistanceSquared(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TransformA(): PrivateScope, Public, HideBySig, SpecialName
    set_TransformA(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_TransformB(): PrivateScope, Public, HideBySig, SpecialName
    set_TransformB(Matrix): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.DiscreteCollisionDetectorInterface+Result: AutoLayout, AnsiClass, Class, NestedPublic, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    AddContactPoint(Vector3, Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    SetShapeIdentifiersA(Int32, Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    SetShapeIdentifiersB(Int32, Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.StorageResult: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.DiscreteCollisionDetectorInterface+Result
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 NormalOnSurfaceB 'get set' : 
    Single Distance 'get set' : 
    SharpDX.Vector3 ClosestPointInB 'get set' : 
  Methods:
    AddContactPoint(Vector3, Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    get_ClosestPointInB(): PrivateScope, Public, HideBySig, SpecialName
    set_ClosestPointInB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Distance(): PrivateScope, Public, HideBySig, SpecialName
    set_Distance(Single): PrivateScope, Public, HideBySig, SpecialName
    get_NormalOnSurfaceB(): PrivateScope, Public, HideBySig, SpecialName
    set_NormalOnSurfaceB(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ManifoldResult: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.DiscreteCollisionDetectorInterface+Result
    Void .ctor(BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.PersistentManifold PersistentManifold 'get set' : 
    BulletSharp.CollisionObjectWrapper Body1Wrap 'get set' : 
    BulletSharp.CollisionObject Body1Internal 'get ' : 
    BulletSharp.CollisionObjectWrapper Body0Wrap 'get set' : 
    BulletSharp.CollisionObject Body0Internal 'get ' : 
  Methods:
    CalculateCombinedFriction(CollisionObject, CollisionObject): PrivateScope, Public, Static, HideBySig
    CalculateCombinedRestitution(CollisionObject, CollisionObject): PrivateScope, Public, Static, HideBySig
    RefreshContactPoints(): PrivateScope, Public, HideBySig
    get_Body0Internal(): PrivateScope, Public, HideBySig, SpecialName
    get_Body0Wrap(): PrivateScope, Public, HideBySig, SpecialName
    set_Body0Wrap(CollisionObjectWrapper): PrivateScope, Public, HideBySig, SpecialName
    get_Body1Internal(): PrivateScope, Public, HideBySig, SpecialName
    get_Body1Wrap(): PrivateScope, Public, HideBySig, SpecialName
    set_Body1Wrap(CollisionObjectWrapper): PrivateScope, Public, HideBySig, SpecialName
    get_PersistentManifold(): PrivateScope, Public, HideBySig, SpecialName
    set_PersistentManifold(PersistentManifold): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CollisionAlgorithmCreateFunc: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Boolean Swapped 'get set' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    CreateCollisionAlgorithm(CollisionAlgorithmConstructionInfo, CollisionObjectWrapper, CollisionObjectWrapper): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_Swapped(): PrivateScope, Public, HideBySig, SpecialName
    set_Swapped(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.NearCallback: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, SpecialName, RTSpecialName
  Methods:
    Invoke(BroadphasePair, CollisionDispatcher, DispatcherInfo): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    BeginInvoke(BroadphasePair, CollisionDispatcher, DispatcherInfo, AsyncCallback, Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Final, Virtual, VtableLayoutMask
Class BulletSharp.CollisionDispatcher: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.Dispatcher
    Void .ctor(BulletSharp.CollisionConfiguration): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.NearCallback NearCallback 'get set' : 
    BulletSharp.DispatcherFlags DispatcherFlags 'get set' : 
    BulletSharp.CollisionConfiguration CollisionConfiguration 'get set' : 
  Methods:
    DefaultNearCallback(BroadphasePair, CollisionDispatcher, DispatcherInfo): PrivateScope, Public, Static, HideBySig
    RegisterCollisionCreateFunc(BroadphaseNativeType, BroadphaseNativeType, CollisionAlgorithmCreateFunc): PrivateScope, Public, HideBySig
    get_CollisionConfiguration(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionConfiguration(CollisionConfiguration): PrivateScope, Public, HideBySig, SpecialName
    get_DispatcherFlags(): PrivateScope, Public, HideBySig, SpecialName
    set_DispatcherFlags(DispatcherFlags): PrivateScope, Public, HideBySig, SpecialName
    get_NearCallback(): PrivateScope, Public, HideBySig, SpecialName
    set_NearCallback(NearCallback): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.DefaultCollisionConstructionInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 UseEpaPenetrationAlgorithm 'get set' : 
    BulletSharp.PoolAllocator PersistentManifoldPool 'get set' : 
    Int32 DefaultMaxPersistentManifoldPoolSize 'get set' : 
    Int32 DefaultMaxCollisionAlgorithmPoolSize 'get set' : 
    Int32 CustomCollisionAlgorithmMaxElementSize 'get set' : 
    BulletSharp.PoolAllocator CollisionAlgorithmPool 'get set' : 
  Methods:
    get_CollisionAlgorithmPool(): PrivateScope, Public, HideBySig, SpecialName
    set_CollisionAlgorithmPool(PoolAllocator): PrivateScope, Public, HideBySig, SpecialName
    get_CustomCollisionAlgorithmMaxElementSize(): PrivateScope, Public, HideBySig, SpecialName
    set_CustomCollisionAlgorithmMaxElementSize(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_DefaultMaxCollisionAlgorithmPoolSize(): PrivateScope, Public, HideBySig, SpecialName
    set_DefaultMaxCollisionAlgorithmPoolSize(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_DefaultMaxPersistentManifoldPoolSize(): PrivateScope, Public, HideBySig, SpecialName
    set_DefaultMaxPersistentManifoldPoolSize(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PersistentManifoldPool(): PrivateScope, Public, HideBySig, SpecialName
    set_PersistentManifoldPool(PoolAllocator): PrivateScope, Public, HideBySig, SpecialName
    get_UseEpaPenetrationAlgorithm(): PrivateScope, Public, HideBySig, SpecialName
    set_UseEpaPenetrationAlgorithm(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.DefaultCollisionConfiguration: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionConfiguration
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.DefaultCollisionConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.VoronoiSimplexSolver SimplexSolver 'get ' : 
  Methods:
    GetCollisionAlgorithmCreateFunc(BroadphaseNativeType, BroadphaseNativeType): PrivateScope, Public, Virtual, HideBySig
    SetConvexConvexMultipointIterations(): PrivateScope, Public, HideBySig
    SetConvexConvexMultipointIterations(Int32): PrivateScope, Public, HideBySig
    SetConvexConvexMultipointIterations(Int32, Int32): PrivateScope, Public, HideBySig
    SetPlaneConvexMultipointIterations(): PrivateScope, Public, HideBySig
    SetPlaneConvexMultipointIterations(Int32): PrivateScope, Public, HideBySig
    SetPlaneConvexMultipointIterations(Int32, Int32): PrivateScope, Public, HideBySig
    get_SimplexSolver(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CollisionAlgorithmConstructionInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.Dispatcher, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.PersistentManifold Manifold 'get set' : 
    BulletSharp.Dispatcher Dispatcher 'get set' : 
  Methods:
    get_Dispatcher(): PrivateScope, Public, HideBySig, SpecialName
    set_Dispatcher(Dispatcher): PrivateScope, Public, HideBySig, SpecialName
    get_Manifold(): PrivateScope, Public, HideBySig, SpecialName
    set_Manifold(PersistentManifold): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.CollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    CalculateTimeOfImpact(CollisionObject, CollisionObject, DispatcherInfo, ManifoldResult): PrivateScope, Public, HideBySig
    GetAllContactManifolds(AlignedManifoldArray): PrivateScope, Public, HideBySig
    ProcessCollision(CollisionObjectWrapper, CollisionObjectWrapper, DispatcherInfo, ManifoldResult): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ActivatingCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.CollisionAlgorithm
Class BulletSharp.SphereSphereCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.SphereSphereCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.PoolAllocator: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 UsedCount 'get ' : 
    IntPtr PoolAddress 'get ' : 
    Int32 MaxCount 'get ' : 
    Boolean IsDisposed 'get ' : 
    Int32 FreeCount 'get ' : 
    Int32 ElementSize 'get ' : 
  Methods:
    Allocate(Int32): PrivateScope, Public, HideBySig
    FreeMemory(IntPtr): PrivateScope, Public, HideBySig
    ValidPtr(IntPtr): PrivateScope, Public, HideBySig
    get_ElementSize(): PrivateScope, Public, HideBySig, SpecialName
    get_FreeCount(): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_MaxCount(): PrivateScope, Public, HideBySig, SpecialName
    get_PoolAddress(): PrivateScope, Public, HideBySig, SpecialName
    get_UsedCount(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.BoxBoxCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.BoxBoxCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.ConvexPlaneCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionAlgorithm
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, Boolean, Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    CollideSingleContact(Quaternion, CollisionObjectWrapper, CollisionObjectWrapper, DispatcherInfo, ManifoldResult): PrivateScope, Public, HideBySig
Class BulletSharp.ConvexPlaneCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 NumPerturbationIterations 'get set' : 
    Int32 MinimumPointsPerturbationThreshold 'get set' : 
  Methods:
    get_MinimumPointsPerturbationThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_MinimumPointsPerturbationThreshold(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumPerturbationIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_NumPerturbationIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SubSimplexClosestResult: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsValid 'get ' : 
    Boolean Degenerate 'get set' : 
    SharpDX.Vector3 ClosestPointOnSimplex 'get set' : 
    BulletSharp.ScalarArray BarycentricCoords 'get ' : 
  Methods:
    Reset(): PrivateScope, Public, HideBySig
    SetBarycentricCoordinates(): PrivateScope, Public, HideBySig
    SetBarycentricCoordinates(Single): PrivateScope, Public, HideBySig
    SetBarycentricCoordinates(Single, Single): PrivateScope, Public, HideBySig
    SetBarycentricCoordinates(Single, Single, Single): PrivateScope, Public, HideBySig
    SetBarycentricCoordinates(Single, Single, Single, Single): PrivateScope, Public, HideBySig
    get_BarycentricCoords(): PrivateScope, Public, HideBySig, SpecialName
    get_ClosestPointOnSimplex(): PrivateScope, Public, HideBySig, SpecialName
    set_ClosestPointOnSimplex(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Degenerate(): PrivateScope, Public, HideBySig, SpecialName
    set_Degenerate(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_IsValid(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.VoronoiSimplexSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.Vector3Array SimplexVectorW 'get ' : 
    BulletSharp.Vector3Array SimplexPointsQ 'get ' : 
    BulletSharp.Vector3Array SimplexPointsP 'get ' : 
    Int32 NumVertices 'get set' : 
    Boolean NeedsUpdate 'get set' : 
    SharpDX.Vector3 LastW 'get set' : 
    Single EqualVertexThreshold 'get set' : 
    Boolean CachedValidClosest 'get set' : 
    SharpDX.Vector3 CachedV 'get set' : 
    SharpDX.Vector3 CachedP2 'get set' : 
    SharpDX.Vector3 CachedP1 'get set' : 
    BulletSharp.SubSimplexClosestResult CachedBC 'get ' : 
  Methods:
    AddVertex(Vector3, Vector3, Vector3): PrivateScope, Public, HideBySig
    BackupClosest(Vector3): PrivateScope, Public, HideBySig
    Closest(Vector3): PrivateScope, Public, HideBySig
    ClosestPtPointTetrahedron(Vector3, Vector3, Vector3, Vector3, Vector3, SubSimplexClosestResult): PrivateScope, Public, HideBySig
    ClosestPtPointTriangle(Vector3, Vector3, Vector3, Vector3, SubSimplexClosestResult): PrivateScope, Public, HideBySig
    ComputePoints(Vector3, Vector3): PrivateScope, Public, HideBySig
    EmptySimplex(): PrivateScope, Public, HideBySig
    FullSimplex(): PrivateScope, Public, HideBySig
    GetSimplex(Vector3[]&(Out), Vector3[]&(Out), Vector3[]&(Out)): PrivateScope, Public, HideBySig
    InSimplex(Vector3): PrivateScope, Public, HideBySig
    MaxVertex(): PrivateScope, Public, HideBySig
    PointOutsideOfPlane(Vector3, Vector3, Vector3, Vector3, Vector3): PrivateScope, Public, HideBySig
    RemoveVertex(Int32): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
    UpdateClosestVectorAndPoints(): PrivateScope, Public, HideBySig
    get_CachedBC(): PrivateScope, Public, HideBySig, SpecialName
    get_CachedP1(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedP1(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CachedP2(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedP2(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CachedV(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedV(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CachedValidClosest(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedValidClosest(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_EqualVertexThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_EqualVertexThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LastW(): PrivateScope, Public, HideBySig, SpecialName
    set_LastW(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_NeedsUpdate(): PrivateScope, Public, HideBySig, SpecialName
    set_NeedsUpdate(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_NumVertices(): PrivateScope, Public, HideBySig, SpecialName
    set_NumVertices(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_SimplexPointsP(): PrivateScope, Public, HideBySig, SpecialName
    get_SimplexPointsQ(): PrivateScope, Public, HideBySig, SpecialName
    get_SimplexVectorW(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ConvexConvexAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, BulletSharp.VoronoiSimplexSolver, BulletSharp.ConvexPenetrationDepthSolver, Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.PersistentManifold Manifold 'get ' : 
  Methods:
    SetLowLevelOfDetail(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    get_Manifold(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConvexConvexAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(BulletSharp.VoronoiSimplexSolver, BulletSharp.ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.VoronoiSimplexSolver SimplexSolver 'get set' : 
    BulletSharp.ConvexPenetrationDepthSolver PdSolver 'get set' : 
    Int32 NumPerturbationIterations 'get set' : 
    Int32 MinimumPointsPerturbationThreshold 'get set' : 
  Methods:
    get_MinimumPointsPerturbationThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_MinimumPointsPerturbationThreshold(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumPerturbationIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_NumPerturbationIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PdSolver(): PrivateScope, Public, HideBySig, SpecialName
    set_PdSolver(ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig, SpecialName
    get_SimplexSolver(): PrivateScope, Public, HideBySig, SpecialName
    set_SimplexSolver(VoronoiSimplexSolver): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConvexConcaveCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    ClearCache(): PrivateScope, Public, HideBySig
Class BulletSharp.ConvexConcaveCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.ConvexConcaveCollisionAlgorithm+SwappedCreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CompoundChildShapePairCallback: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, SpecialName, RTSpecialName
  Methods:
    Invoke(CollisionShape, CollisionShape): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    BeginInvoke(CollisionShape, CollisionShape, AsyncCallback, Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Final, Virtual, VtableLayoutMask
Class BulletSharp.CompoundCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.CompoundChildShapePairCallback CompoundChildShapePairCallback 'get set' : 
  Methods:
    GetChildAlgorithm(Int32): PrivateScope, Public, HideBySig
    get_CompoundChildShapePairCallback(): PrivateScope, Public, Static, HideBySig, SpecialName
    set_CompoundChildShapePairCallback(CompoundChildShapePairCallback): PrivateScope, Public, Static, HideBySig, SpecialName
Class BulletSharp.CompoundCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CompoundCollisionAlgorithm+SwappedCreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CompoundCompoundCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CompoundCollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CompoundCompoundCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CompoundCompoundCollisionAlgorithm+SwappedCreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.EmptyAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.EmptyAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.SphereTriangleCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.SphereTriangleCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.Box2DBox2DCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.Box2DBox2DCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.BoxBoxDetector: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DiscreteCollisionDetectorInterface
    Void .ctor(BulletSharp.BoxShape, BulletSharp.BoxShape): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.BoxShape Box2 'get set' : 
    BulletSharp.BoxShape Box1 'get set' : 
  Methods:
    get_Box1(): PrivateScope, Public, HideBySig, SpecialName
    set_Box1(BoxShape): PrivateScope, Public, HideBySig, SpecialName
    get_Box2(): PrivateScope, Public, HideBySig, SpecialName
    set_Box2(BoxShape): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConvexInternalShape: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.ConvexShape
  Properties:
    Single MarginNV 'get ' : 
    SharpDX.Vector3 LocalScalingNV 'get ' : 
    SharpDX.Vector3 ImplicitShapeDimensions 'get set' : 
  Methods:
    SetSafeMargin(Vector3): PrivateScope, Public, HideBySig
    SetSafeMargin(Vector3, Single): PrivateScope, Public, HideBySig
    SetSafeMargin(Single): PrivateScope, Public, HideBySig
    SetSafeMargin(Single, Single): PrivateScope, Public, HideBySig
    SetSafeMarginRef(Vector3&): PrivateScope, Public, HideBySig
    SetSafeMarginRef(Vector3&, Single): PrivateScope, Public, HideBySig
    get_ImplicitShapeDimensions(): PrivateScope, Public, HideBySig, SpecialName
    set_ImplicitShapeDimensions(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LocalScalingNV(): PrivateScope, Public, HideBySig, SpecialName
    get_MarginNV(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConvexInternalAabbCachingShape: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.ConvexInternalShape
  Methods:
    RecalcLocalAabb(): PrivateScope, Public, HideBySig
Class BulletSharp.PolyhedralConvexShape: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.ConvexInternalShape
  Properties:
    Int32 NumVertices 'get ' : 
    Int32 NumPlanes 'get ' : 
    Int32 NumEdges 'get ' : 
    BulletSharp.ConvexPolyhedron ConvexPolyhedron 'get ' : 
  Methods:
    GetEdge(Int32, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    GetPlane(Vector3&(Out), Vector3&(Out), Int32): PrivateScope, Public, HideBySig
    GetVertex(Int32, Vector3&(Out)): PrivateScope, Public, HideBySig
    InitializePolyhedralFeatures(): PrivateScope, Public, HideBySig
    InitializePolyhedralFeatures(Int32): PrivateScope, Public, HideBySig
    IsInside(Vector3, Single): PrivateScope, Public, HideBySig
    get_ConvexPolyhedron(): PrivateScope, Public, HideBySig, SpecialName
    get_NumEdges(): PrivateScope, Public, HideBySig, SpecialName
    get_NumPlanes(): PrivateScope, Public, HideBySig, SpecialName
    get_NumVertices(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.PolyhedralConvexAabbCachingShape: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.PolyhedralConvexShape
  Methods:
    GetNonvirtualAabb(Matrix, Vector3&(Out), Vector3&(Out), Single): PrivateScope, Public, HideBySig
    RecalcLocalAabb(): PrivateScope, Public, HideBySig
Class BulletSharp.BoxShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.PolyhedralConvexShape
    Void .ctor(Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Single, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 HalfExtentsWithoutMargin 'get ' : 
    SharpDX.Vector3 HalfExtentsWithMargin 'get ' : 
  Methods:
    GetPlaneEquation(Int32): PrivateScope, Public, HideBySig
    get_HalfExtentsWithMargin(): PrivateScope, Public, HideBySig, SpecialName
    get_HalfExtentsWithoutMargin(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Convex2DConvex2DAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, BulletSharp.VoronoiSimplexSolver, BulletSharp.ConvexPenetrationDepthSolver, Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.PersistentManifold Manifold 'get ' : 
  Methods:
    SetLowLevelOfDetail(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    get_Manifold(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Convex2DConvex2DAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(BulletSharp.VoronoiSimplexSolver, BulletSharp.ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.VoronoiSimplexSolver SimplexSolver 'get set' : 
    BulletSharp.ConvexPenetrationDepthSolver PdSolver 'get set' : 
    Int32 NumPerturbationIterations 'get set' : 
    Int32 MinimumPointsPerturbationThreshold 'get set' : 
  Methods:
    get_MinimumPointsPerturbationThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_MinimumPointsPerturbationThreshold(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumPerturbationIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_NumPerturbationIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PdSolver(): PrivateScope, Public, HideBySig, SpecialName
    set_PdSolver(ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig, SpecialName
    get_SimplexSolver(): PrivateScope, Public, HideBySig, SpecialName
    set_SimplexSolver(VoronoiSimplexSolver): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConvexPenetrationDepthSolver: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    CalcPenDepth(VoronoiSimplexSolver, ConvexShape, ConvexShape, Matrix, Matrix, Vector3&(Out), Vector3&(Out), Vector3&(Out), IDebugDraw): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.GhostObject: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CollisionObject
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.AlignedCollisionObjectArray OverlappingPairs 'get ' : 
    Int32 NumOverlappingObjects 'get ' : 
  Methods:
    AddOverlappingObjectInternal(BroadphaseProxy): PrivateScope, Public, HideBySig
    AddOverlappingObjectInternal(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, HideBySig
    ConvexSweepTest(ConvexShape, Matrix, Matrix, ConvexResultCallback): PrivateScope, Public, HideBySig
    ConvexSweepTest(ConvexShape, Matrix, Matrix, ConvexResultCallback, Single): PrivateScope, Public, HideBySig
    GetOverlappingObject(Int32): PrivateScope, Public, HideBySig
    RayTest(Vector3, Vector3, RayResultCallback): PrivateScope, Public, HideBySig
    RemoveOverlappingObjectInternal(BroadphaseProxy, Dispatcher): PrivateScope, Public, HideBySig
    RemoveOverlappingObjectInternal(BroadphaseProxy, Dispatcher, BroadphaseProxy): PrivateScope, Public, HideBySig
    Upcast(CollisionObject): PrivateScope, Public, Static, HideBySig
    get_NumOverlappingObjects(): PrivateScope, Public, HideBySig, SpecialName
    get_OverlappingPairs(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.PairCachingGhostObject: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GhostObject
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.HashedOverlappingPairCache OverlappingPairCache 'get ' : 
  Methods:
    get_OverlappingPairCache(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.GhostPairCallback: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.OverlappingPairCallback
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    AddOverlappingPair(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, Virtual, HideBySig
    RemoveOverlappingPair(BroadphaseProxy, BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
    RemoveOverlappingPairsContainingProxy(BroadphaseProxy, Dispatcher): PrivateScope, Public, Virtual, HideBySig
Class BulletSharp.Element: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    Int32 Sz   'get set' : 
    Int32 Id   'get set' : 
  Methods:
    get_Id(): PrivateScope, Public, HideBySig, SpecialName
    set_Id(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Sz(): PrivateScope, Public, HideBySig, SpecialName
    set_Sz(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.UnionFind: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 NumElements 'get ' : 
  Methods:
    Allocate(Int32): PrivateScope, Public, HideBySig
    Find(Int32): PrivateScope, Public, HideBySig
    Find(Int32, Int32): PrivateScope, Public, HideBySig
    Free(): PrivateScope, Public, HideBySig
    GetElement(Int32): PrivateScope, Public, HideBySig
    IsRoot(Int32): PrivateScope, Public, HideBySig
    Reset(Int32): PrivateScope, Public, HideBySig
    SortIslands(): PrivateScope, Public, HideBySig
    Unite(Int32, Int32): PrivateScope, Public, HideBySig
    get_NumElements(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SimulationIslandManager: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.UnionFind UnionFind 'get ' : 
    Boolean SplitIslands 'get set' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    BuildIslands(Dispatcher, CollisionWorld): PrivateScope, Public, HideBySig
    FindUnions(Dispatcher, CollisionWorld): PrivateScope, Public, HideBySig
    InitUnionFind(Int32): PrivateScope, Public, HideBySig
    StoreIslandActivationState(CollisionWorld): PrivateScope, Public, HideBySig
    UpdateActivationState(CollisionWorld, Dispatcher): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_SplitIslands(): PrivateScope, Public, HideBySig, SpecialName
    set_SplitIslands(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_UnionFind(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SphereBoxCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.PersistentManifold, BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    GetSphereDistance(CollisionObjectWrapper, Vector3&(Out), Vector3&(Out), Single&(Out), Vector3, Single, Single): PrivateScope, Public, HideBySig
    GetSpherePenetration(Vector3, Vector3, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
Class BulletSharp.SphereBoxCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.SphereShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexInternalShape
    Void .ctor(Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single Radius 'get ' : 
  Methods:
    SetUnscaledRadius(Single): PrivateScope, Public, HideBySig
    get_Radius(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SphereTriangleDetector: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DiscreteCollisionDetectorInterface
    Void .ctor(BulletSharp.SphereShape, BulletSharp.TriangleShape, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    Collide(Vector3, Vector3&(Out), Vector3&(Out), Single&(Out), Single&(Out), Single): PrivateScope, Public, HideBySig
Class BulletSharp.TriangleShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.PolyhedralConvexShape
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.Vector3Array Vertices 'get ' : 
  Methods:
    CalcNormal(Vector3&(Out)): PrivateScope, Public, HideBySig
    GetPlaneEquation(Int32, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    get_Vertices(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConcaveShape: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.CollisionShape
  Methods:
    ProcessAllTriangles(TriangleCallback, Vector3, Vector3): PrivateScope, Public, HideBySig
Class BulletSharp.TriangleMeshShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConcaveShape
  Properties:
    BulletSharp.StridingMeshInterface MeshInterface 'get ' : 
    SharpDX.Vector3 LocalAabbMin 'get ' : 
    SharpDX.Vector3 LocalAabbMax 'get ' : 
  Methods:
    LocalGetSupportingVertex(Vector3): PrivateScope, Public, HideBySig
    LocalGetSupportingVertexWithoutMargin(Vector3): PrivateScope, Public, HideBySig
    RecalcLocalAabb(): PrivateScope, Public, HideBySig
    get_LocalAabbMax(): PrivateScope, Public, HideBySig, SpecialName
    get_LocalAabbMin(): PrivateScope, Public, HideBySig, SpecialName
    get_MeshInterface(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.BvhTriangleMeshShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TriangleMeshShape
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, SharpDX.Vector3 ByRef, SharpDX.Vector3 ByRef): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, SharpDX.Vector3, SharpDX.Vector3, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, SharpDX.Vector3 ByRef, SharpDX.Vector3 ByRef, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean UsesQuantizedAabbCompression 'get ' : 
    BulletSharp.TriangleInfoMap TriangleInfoMap 'get set' : 
    Boolean OwnsBvh 'get ' : 
    BulletSharp.OptimizedBvh OptimizedBvh 'get set' : 
  Methods:
    BuildOptimizedBvh(): PrivateScope, Public, HideBySig
    PartialRefitTree(Vector3, Vector3): PrivateScope, Public, HideBySig
    PartialRefitTree(Vector3&, Vector3&): PrivateScope, Public, HideBySig
    PerformConvexcast(TriangleCallback, Vector3, Vector3, Vector3, Vector3): PrivateScope, Public, HideBySig
    PerformConvexcast(TriangleCallback, Vector3&, Vector3&, Vector3&, Vector3&): PrivateScope, Public, HideBySig
    PerformRaycast(TriangleCallback, Vector3, Vector3): PrivateScope, Public, HideBySig
    PerformRaycast(TriangleCallback, Vector3&, Vector3&): PrivateScope, Public, HideBySig
    RefitTree(Vector3, Vector3): PrivateScope, Public, HideBySig
    RefitTree(Vector3&, Vector3&): PrivateScope, Public, HideBySig
    SerializeSingleBvh(Serializer): PrivateScope, Public, HideBySig
    SerializeSingleTriangleInfoMap(Serializer): PrivateScope, Public, HideBySig
    SetOptimizedBvh(OptimizedBvh, Vector3): PrivateScope, Public, HideBySig
    get_OptimizedBvh(): PrivateScope, Public, HideBySig, SpecialName
    set_OptimizedBvh(OptimizedBvh): PrivateScope, Public, HideBySig, SpecialName
    get_OwnsBvh(): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleInfoMap(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleInfoMap(TriangleInfoMap): PrivateScope, Public, HideBySig, SpecialName
    get_UsesQuantizedAabbCompression(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.InternalEdgeUtility: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  Methods:
    GenerateInternalEdgeInfo(BvhTriangleMeshShape, TriangleInfoMap): PrivateScope, Public, Static, HideBySig
    AdjustInternalEdgeContacts(ManifoldPoint, CollisionObjectWrapper, CollisionObjectWrapper, Int32, Int32): PrivateScope, Public, Static, HideBySig
    AdjustInternalEdgeContacts(ManifoldPoint, CollisionObjectWrapper, CollisionObjectWrapper, Int32, Int32, InternalEdgeAdjustFlags): PrivateScope, Public, Static, HideBySig
Class BulletSharp.TriangleInfoMap: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single ZeroAreaThreshold 'get set' : 
    Int32 Size 'get ' : 
    Single PlanarEpsilon 'get set' : 
    Single MaxEdgeAngleThreshold 'get set' : 
    Single EqualVertexThreshold 'get set' : 
    Single EdgeDistanceThreshold 'get set' : 
    Single ConvexEpsilon 'get set' : 
  Methods:
    Clear(): PrivateScope, Public, HideBySig
    CalculateSerializeBufferSize(): PrivateScope, Public, HideBySig
    Serialize(IntPtr, Serializer): PrivateScope, Public, HideBySig
    get_ConvexEpsilon(): PrivateScope, Public, HideBySig, SpecialName
    set_ConvexEpsilon(Single): PrivateScope, Public, HideBySig, SpecialName
    get_EdgeDistanceThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_EdgeDistanceThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_EqualVertexThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_EqualVertexThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxEdgeAngleThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxEdgeAngleThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_PlanarEpsilon(): PrivateScope, Public, HideBySig, SpecialName
    set_PlanarEpsilon(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Size(): PrivateScope, Public, HideBySig, SpecialName
    get_ZeroAreaThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_ZeroAreaThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Struct BulletSharp.InternalEdgeAdjustFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.InternalEdgeAdjustFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.InternalEdgeAdjustFlags TriangleConvexBackfaceMode = 1 : Public, Static, Literal, HasDefault
    BulletSharp.InternalEdgeAdjustFlags TriangleConcaveDoubleSided = 2 : Public, Static, Literal, HasDefault
    BulletSharp.InternalEdgeAdjustFlags TriangleConvexDoubleSided = 4 : Public, Static, Literal, HasDefault
Class BulletSharp.AxisSweep3: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.BroadphaseInterface
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, UInt16): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, UInt16, BulletSharp.OverlappingPairCache): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, UInt16, BulletSharp.OverlappingPairCache, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.OverlappingPairCallback OverlappingPairUserCallback 'get set' : 
    UInt16 NumHandles 'get ' : 
  Methods:
    AddHandle(Vector3, Vector3, IntPtr, CollisionFilterGroups, CollisionFilterGroups, Dispatcher, IntPtr): PrivateScope, Public, HideBySig
    AddHandle(Vector3, Vector3, IntPtr, Int16, Int16, Dispatcher, IntPtr): PrivateScope, Public, HideBySig
    CreateProxy(Vector3&, Vector3&, BroadphaseNativeType, IntPtr, Int16, Int16, Dispatcher, IntPtr): PrivateScope, Public, Virtual, HideBySig
    Quantize(UInt16&(Out), Vector3, Int32): PrivateScope, Public, HideBySig
    RemoveHandle(UInt16, Dispatcher): PrivateScope, Public, HideBySig
    TestAabbOverlap(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, HideBySig
    UnQuantize(BroadphaseProxy, Vector3, Vector3): PrivateScope, Public, HideBySig
    UpdateHandle(UInt16, Vector3, Vector3, Dispatcher): PrivateScope, Public, HideBySig
    get_NumHandles(): PrivateScope, Public, HideBySig, SpecialName
    get_OverlappingPairUserCallback(): PrivateScope, Public, HideBySig, SpecialName
    set_OverlappingPairUserCallback(OverlappingPairCallback): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.AxisSweep3_32Bit: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.BroadphaseInterface
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, UInt32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, UInt32, BulletSharp.OverlappingPairCache): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, UInt32, BulletSharp.OverlappingPairCache, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.OverlappingPairCallback OverlappingPairUserCallback 'get set' : 
    UInt32 NumHandles 'get ' : 
  Methods:
    AddHandle(Vector3, Vector3, IntPtr, CollisionFilterGroups, CollisionFilterGroups, Dispatcher, IntPtr): PrivateScope, Public, HideBySig
    AddHandle(Vector3, Vector3, IntPtr, Int16, Int16, Dispatcher, IntPtr): PrivateScope, Public, HideBySig
    CreateProxy(Vector3&, Vector3&, BroadphaseNativeType, IntPtr, Int16, Int16, Dispatcher, IntPtr): PrivateScope, Public, Virtual, HideBySig
    Quantize(UInt32&(Out), Vector3, Int32): PrivateScope, Public, HideBySig
    RemoveHandle(UInt32, Dispatcher): PrivateScope, Public, HideBySig
    TestAabbOverlap(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, HideBySig
    UnQuantize(BroadphaseProxy, Vector3, Vector3): PrivateScope, Public, HideBySig
    UpdateHandle(UInt32, Vector3, Vector3, Dispatcher): PrivateScope, Public, HideBySig
    get_NumHandles(): PrivateScope, Public, HideBySig, SpecialName
    get_OverlappingPairUserCallback(): PrivateScope, Public, HideBySig, SpecialName
    set_OverlappingPairUserCallback(OverlappingPairCallback): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.DbvtBroadphase: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.BroadphaseInterface
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.OverlappingPairCache): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    CreateProxy(Vector3&, Vector3&, BroadphaseNativeType, IntPtr, Int16, Int16, Dispatcher, IntPtr): PrivateScope, Public, Virtual, HideBySig
Class BulletSharp.SimpleBroadphaseProxy: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.BroadphaseProxy
  Properties:
    Int32 NextFree 'get set' : 
  Methods:
    get_NextFree(): PrivateScope, Public, HideBySig, SpecialName
    set_NextFree(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SimpleBroadphase: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.BroadphaseInterface
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, BulletSharp.OverlappingPairCache): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    AabbOverlap(SimpleBroadphaseProxy, SimpleBroadphaseProxy): PrivateScope, Public, Static, HideBySig
    CreateProxy(Vector3&, Vector3&, BroadphaseNativeType, IntPtr, Int16, Int16, Dispatcher, IntPtr): PrivateScope, Public, Virtual, HideBySig
    TestAabbOverlap(BroadphaseProxy, BroadphaseProxy): PrivateScope, Public, HideBySig
Class BulletSharp.QuantizedBvh: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsQuantized 'get ' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_IsQuantized(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Struct BulletSharp.QuantizedBvh+TraversalMode: AutoLayout, AnsiClass, Class, NestedPublic, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    TraversalMode Stackless = 0 : Public, Static, Literal, HasDefault
    TraversalMode StacklessCacheFriendly = 1 : Public, Static, Literal, HasDefault
    TraversalMode Recursive = 2 : Public, Static, Literal, HasDefault
Class BulletSharp.OptimizedBvh: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.QuantizedBvh
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.GjkPairDetector: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DiscreteCollisionDetectorInterface
    Void .ctor(BulletSharp.ConvexShape, BulletSharp.ConvexShape, BulletSharp.BroadphaseNativeType, BulletSharp.BroadphaseNativeType, Single, Single, BulletSharp.VoronoiSimplexSolver, BulletSharp.ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.ConvexShape, BulletSharp.ConvexShape, BulletSharp.VoronoiSimplexSolver, BulletSharp.ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 LastUsedMethod 'get set' : 
    Int32 FixContactNormalDirection 'get set' : 
    Int32 DegenerateSimplex 'get set' : 
    Int32 CurIter 'get set' : 
    Int32 CatchDegeneracies 'get set' : 
    Single CachedSeparatingDistance 'get ' : 
    SharpDX.Vector3 CachedSeparatingAxis 'get set' : 
  Methods:
    GetClosestPointsNonVirtual(ClosestPointInput, Result, IDebugDraw): PrivateScope, Public, HideBySig
    SetIgnoreMargin(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetMinkowskiA(ConvexShape): PrivateScope, Public, HideBySig
    SetMinkowskiB(ConvexShape): PrivateScope, Public, HideBySig
    SetPenetrationDepthSolver(ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig
    get_CachedSeparatingAxis(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedSeparatingAxis(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CachedSeparatingDistance(): PrivateScope, Public, HideBySig, SpecialName
    get_CatchDegeneracies(): PrivateScope, Public, HideBySig, SpecialName
    set_CatchDegeneracies(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_CurIter(): PrivateScope, Public, HideBySig, SpecialName
    set_CurIter(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_DegenerateSimplex(): PrivateScope, Public, HideBySig, SpecialName
    set_DegenerateSimplex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_FixContactNormalDirection(): PrivateScope, Public, HideBySig, SpecialName
    set_FixContactNormalDirection(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_LastUsedMethod(): PrivateScope, Public, HideBySig, SpecialName
    set_LastUsedMethod(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConvexCast: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    CalcTimeOfImpact(Matrix, Matrix, Matrix, Matrix, CastResult): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ConvexCast+CastResult: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
    SharpDX.Vector3 Normal 'get set' : 
    SharpDX.Matrix HitTransformB 'get set' : 
    SharpDX.Matrix HitTransformA 'get set' : 
    SharpDX.Vector3 HitPoint 'get set' : 
    Single Fraction 'get set' : 
    BulletSharp.IDebugDraw DebugDrawer 'get set' : 
    Single AllowedPenetration 'get set' : 
  Methods:
    DebugDraw(Single): PrivateScope, Public, HideBySig
    DrawCoordSystem(Matrix): PrivateScope, Public, HideBySig
    ReportFailure(Int32, Int32): PrivateScope, Public, HideBySig
    get_AllowedPenetration(): PrivateScope, Public, HideBySig, SpecialName
    set_AllowedPenetration(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DebugDrawer(): PrivateScope, Public, HideBySig, SpecialName
    set_DebugDrawer(IDebugDraw): PrivateScope, Public, HideBySig, SpecialName
    get_Fraction(): PrivateScope, Public, HideBySig, SpecialName
    set_Fraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_HitPoint(): PrivateScope, Public, HideBySig, SpecialName
    set_HitPoint(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_HitTransformA(): PrivateScope, Public, HideBySig, SpecialName
    set_HitTransformA(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_HitTransformB(): PrivateScope, Public, HideBySig, SpecialName
    set_HitTransformB(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_Normal(): PrivateScope, Public, HideBySig, SpecialName
    set_Normal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ContinuousConvexCollision: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexCast
    Void .ctor(BulletSharp.ConvexShape, BulletSharp.StaticPlaneShape): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.ConvexShape, BulletSharp.ConvexShape, BulletSharp.VoronoiSimplexSolver, BulletSharp.ConvexPenetrationDepthSolver): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.StaticPlaneShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConcaveShape
    Void .ctor(SharpDX.Vector3, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 PlaneNormal 'get ' : 
    Single PlaneConstant 'get ' : 
  Methods:
    get_PlaneConstant(): PrivateScope, Public, HideBySig, SpecialName
    get_PlaneNormal(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.GjkConvexCast: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexCast
    Void .ctor(BulletSharp.ConvexShape, BulletSharp.ConvexShape, BulletSharp.VoronoiSimplexSolver): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.GjkEpaPenetrationDepthSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexPenetrationDepthSolver
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.MinkowskiPenetrationDepthSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexPenetrationDepthSolver
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.PointCollector: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DiscreteCollisionDetectorInterface+Result
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 PointInWorld 'get set' : 
    SharpDX.Vector3 NormalOnBInWorld 'get set' : 
    Boolean HasResult 'get set' : 
    Single Distance 'get set' : 
  Methods:
    AddContactPoint(Vector3, Vector3, Single): PrivateScope, Public, Virtual, HideBySig
    SetShapeIdentifiersA(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    SetShapeIdentifiersB(Int32, Int32): PrivateScope, Public, Virtual, HideBySig
    get_Distance(): PrivateScope, Public, HideBySig, SpecialName
    set_Distance(Single): PrivateScope, Public, HideBySig, SpecialName
    get_HasResult(): PrivateScope, Public, HideBySig, SpecialName
    set_HasResult(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_NormalOnBInWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_NormalOnBInWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_PointInWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_PointInWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.BuSimplex1To4: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.PolyhedralConvexAabbCachingShape
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    AddVertexRef(Vector3&): PrivateScope, Public, HideBySig
    AddVertex(Vector3): PrivateScope, Public, HideBySig
    GetIndex(Int32): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
Class BulletSharp.TriangleCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.InternalTriangleIndexCallback: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
  Methods:
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TetrahedronShapeEx: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.BuSimplex1To4
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    SetVertices(Vector3, Vector3, Vector3, Vector3): PrivateScope, Public, HideBySig
Class BulletSharp.GImpactShapeInterface: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.ConcaveShape
  Properties:
    Int32 NumChildShapes 'get ' : 
    Boolean NeedsRetrieveTriangles 'get ' : 
    Boolean NeedsRetrieveTetrahedrons 'get ' : 
    BulletSharp.Aabb LocalBox 'get ' : 
    Boolean HasBoxSet 'get ' : 
    BulletSharp.GImpactShapeType GImpactShapeType 'get ' : 
    Boolean ChildrenHasTransform 'get ' : 
  Methods:
    GetAabb(Matrix, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, Virtual, HideBySig
    GetAabb(Matrix&, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, Virtual, HideBySig
    GetBulletTetrahedron(Int32, TetrahedronShapeEx): PrivateScope, Public, HideBySig
    GetBulletTriangle(Int32, TriangleShapeEx): PrivateScope, Public, HideBySig
    GetChildAabb(Int32, Matrix, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    GetChildShape(Int32): PrivateScope, Public, HideBySig
    GetChildTransform(Int32): PrivateScope, Public, HideBySig
    GetPrimitiveTriangle(Int32, PrimitiveTriangle): PrivateScope, Public, HideBySig
    LockChildShapes(): PrivateScope, Public, HideBySig
    PostUpdate(): PrivateScope, Public, HideBySig
    ProcessAllTrianglesRay(TriangleCallback, Vector3, Vector3): PrivateScope, Public, HideBySig
    RayTest(Vector3, Vector3, RayResultCallback): PrivateScope, Public, HideBySig
    SetChildTransform(Int32, Matrix): PrivateScope, Public, HideBySig
    UnlockChildShapes(): PrivateScope, Public, HideBySig
    UpdateBound(): PrivateScope, Public, HideBySig
    get_ChildrenHasTransform(): PrivateScope, Public, HideBySig, SpecialName
    get_GImpactShapeType(): PrivateScope, Public, HideBySig, SpecialName
    get_HasBoxSet(): PrivateScope, Public, HideBySig, SpecialName
    get_LocalBox(): PrivateScope, Public, HideBySig, SpecialName
    get_NeedsRetrieveTetrahedrons(): PrivateScope, Public, HideBySig, SpecialName
    get_NeedsRetrieveTriangles(): PrivateScope, Public, HideBySig, SpecialName
    get_NumChildShapes(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.GImpactCompoundShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GImpactShapeInterface
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    AddChildShape(CollisionShape): PrivateScope, Public, HideBySig
    AddChildShape(Matrix, CollisionShape): PrivateScope, Public, HideBySig
Class BulletSharp.GImpactMeshShapePart: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GImpactShapeInterface
    Void .ctor(BulletSharp.StridingMeshInterface, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 VertexCount 'get ' : 
    Int32 Part 'get ' : 
  Methods:
    GetVertex(Int32, Vector3&(Out)): PrivateScope, Public, HideBySig
    get_Part(): PrivateScope, Public, HideBySig, SpecialName
    get_VertexCount(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.GImpactMeshShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.GImpactShapeInterface
    Void .ctor(BulletSharp.StridingMeshInterface): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 MeshPartCount 'get ' : 
    BulletSharp.StridingMeshInterface MeshInterface 'get ' : 
  Methods:
    GetMeshPart(Int32): PrivateScope, Public, HideBySig
    get_MeshInterface(): PrivateScope, Public, HideBySig, SpecialName
    get_MeshPartCount(): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.GImpactShapeType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.GImpactShapeType CompoundShape = 0 : Public, Static, Literal, HasDefault
    BulletSharp.GImpactShapeType TrimeshShapePart = 1 : Public, Static, Literal, HasDefault
    BulletSharp.GImpactShapeType TrimeshShape = 2 : Public, Static, Literal, HasDefault
Class BulletSharp.Face: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.ScalarArray Plane 'get ' : 
    BulletSharp.AlignedIntArray Indices 'get ' : 
  Methods:
    get_Indices(): PrivateScope, Public, HideBySig, SpecialName
    get_Plane(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ConvexPolyhedron: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.AlignedVector3Array Vertices 'get ' : 
    BulletSharp.AlignedVector3Array UniqueEdges 'get ' : 
    Single Radius 'get set' : 
    SharpDX.Vector3 LocalCenter 'get set' : 
    Boolean IsDisposed 'get ' : 
    SharpDX.Vector3 Extents 'get set' : 
    SharpDX.Vector3 E 'get set' : 
    SharpDX.Vector3 C 'get set' : 
  Methods:
    Initialize(): PrivateScope, Public, HideBySig
    ProjectRef(Matrix&, Vector3&, Single&(Out), Single&(Out), Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    Project(Matrix, Vector3, Single&(Out), Single&(Out), Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    TestContainment(): PrivateScope, Public, HideBySig
    get_C(): PrivateScope, Public, HideBySig, SpecialName
    set_C(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_E(): PrivateScope, Public, HideBySig, SpecialName
    set_E(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Extents(): PrivateScope, Public, HideBySig, SpecialName
    set_Extents(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_LocalCenter(): PrivateScope, Public, HideBySig, SpecialName
    set_LocalCenter(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Radius(): PrivateScope, Public, HideBySig, SpecialName
    set_Radius(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UniqueEdges(): PrivateScope, Public, HideBySig, SpecialName
    get_Vertices(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.CapsuleShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexInternalShape
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 UpAxis 'get ' : 
    Single Radius 'get ' : 
    Single HalfHeight 'get ' : 
  Methods:
    get_HalfHeight(): PrivateScope, Public, HideBySig, SpecialName
    get_Radius(): PrivateScope, Public, HideBySig, SpecialName
    get_UpAxis(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CapsuleShapeX: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CapsuleShape
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CapsuleShapeZ: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CapsuleShape
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CylinderShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexInternalShape
    Void .ctor(Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Single, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 UpAxis 'get ' : 
    Single Radius 'get ' : 
    SharpDX.Vector3 HalfExtentsWithoutMargin 'get ' : 
    SharpDX.Vector3 HalfExtentsWithMargin 'get ' : 
  Methods:
    get_HalfExtentsWithMargin(): PrivateScope, Public, HideBySig, SpecialName
    get_HalfExtentsWithoutMargin(): PrivateScope, Public, HideBySig, SpecialName
    get_Radius(): PrivateScope, Public, HideBySig, SpecialName
    get_UpAxis(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CylinderShapeX: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CylinderShape
    Void .ctor(Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Single, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.CylinderShapeZ: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.CylinderShape
    Void .ctor(Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Single, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.ConeShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexInternalShape
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single Radius 'get ' : 
    Single Height 'get ' : 
    Int32 ConeUpIndex 'get set' : 
  Methods:
    get_ConeUpIndex(): PrivateScope, Public, HideBySig, SpecialName
    set_ConeUpIndex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Height(): PrivateScope, Public, HideBySig, SpecialName
    get_Radius(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConeShapeX: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConeShape
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.ConeShapeZ: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConeShape
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.ConvexHullShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.PolyhedralConvexAabbCachingShape
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.IEnumerable`1[SharpDX.Vector3]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.Vector3Array UnscaledPoints 'get ' : 
    Int32 NumPoints 'get ' : 
  Methods:
    AddPoint(Vector3): PrivateScope, Public, HideBySig
    AddPoint(Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    GetScaledPoint(Int32): PrivateScope, Public, HideBySig
    Project(Matrix, Vector3, Single&(Out), Single&(Out), Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    get_NumPoints(): PrivateScope, Public, HideBySig, SpecialName
    get_UnscaledPoints(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.StridingMeshInterface: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Boolean IsDisposed 'get ' : 
    SharpDX.Vector3 Scaling 'get set' : 
    Int32 NumSubParts 'get ' : 
    Boolean HasPremadeAabb 'get ' : 
  Methods:
    CalculateAabbBruteForce(Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    CalculateSerializeBufferSize(): PrivateScope, Public, HideBySig
    GetLockedReadOnlyVertexIndexData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out)): PrivateScope, Public, HideBySig
    GetLockedReadOnlyVertexIndexData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out), Int32): PrivateScope, Public, HideBySig
    GetLockedVertexIndexData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out)): PrivateScope, Public, HideBySig
    GetLockedVertexIndexData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out), Int32): PrivateScope, Public, HideBySig
    GetPremadeAabb(Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    InternalProcessAllTriangles(InternalTriangleIndexCallback, Vector3, Vector3): PrivateScope, Public, HideBySig
    PreallocateIndices(Int32): PrivateScope, Public, HideBySig
    PreallocateVertices(Int32): PrivateScope, Public, HideBySig
    Serialize(IntPtr, Serializer): PrivateScope, Public, HideBySig
    SetPremadeAabb(Vector3, Vector3): PrivateScope, Public, HideBySig
    UnlockReadOnlyVertexData(Int32): PrivateScope, Public, HideBySig
    UnlockVertexData(Int32): PrivateScope, Public, HideBySig
    get_HasPremadeAabb(): PrivateScope, Public, HideBySig, SpecialName
    get_NumSubParts(): PrivateScope, Public, HideBySig, SpecialName
    get_Scaling(): PrivateScope, Public, HideBySig, SpecialName
    set_Scaling(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.IndexedMesh: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.PhyScalarType VertexType 'get set' : 
    Int32 VertexStride 'get set' : 
    BulletSharp.Vector3Array Vertices 'get set' : 
    IntPtr VertexBase 'get set' : 
    Int32 TriangleIndexStride 'get set' : 
    IntPtr TriangleIndexBase 'get set' : 
    BulletSharp.IntArray TriangleIndices 'get set' : 
    Int32 NumVertices 'get set' : 
    Int32 NumTriangles 'get set' : 
    BulletSharp.PhyScalarType IndexType 'get ' : 
  Methods:
    Allocate(Int32, Int32, Int32, Int32, PhyScalarType, PhyScalarType): PrivateScope, Public, HideBySig
    Free(): PrivateScope, Public, HideBySig
    LockIndices(): PrivateScope, Public, HideBySig
    LockVerts(): PrivateScope, Public, HideBySig
    get_IndexType(): PrivateScope, Public, HideBySig, SpecialName
    get_NumTriangles(): PrivateScope, Public, HideBySig, SpecialName
    set_NumTriangles(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumVertices(): PrivateScope, Public, HideBySig, SpecialName
    set_NumVertices(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleIndices(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleIndices(IntArray): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleIndexBase(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleIndexBase(IntPtr): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleIndexStride(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleIndexStride(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_VertexBase(): PrivateScope, Public, HideBySig, SpecialName
    set_VertexBase(IntPtr): PrivateScope, Public, HideBySig, SpecialName
    get_Vertices(): PrivateScope, Public, HideBySig, SpecialName
    set_Vertices(Vector3Array): PrivateScope, Public, HideBySig, SpecialName
    get_VertexStride(): PrivateScope, Public, HideBySig, SpecialName
    set_VertexStride(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_VertexType(): PrivateScope, Public, HideBySig, SpecialName
    set_VertexType(PhyScalarType): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TriangleIndexVertexArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.StridingMeshInterface
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.ICollection`1[System.Int32], System.Collections.Generic.ICollection`1[System.Double]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.ICollection`1[System.Int32], System.Collections.Generic.ICollection`1[System.Single]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(System.Collections.Generic.ICollection`1[System.Int32], System.Collections.Generic.ICollection`1[SharpDX.Vector3]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, IntPtr, Int32, Int32, IntPtr, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.AlignedIndexedMeshArray IndexedMeshArray 'get ' : 
  Methods:
    AddIndexedMesh(IndexedMesh): PrivateScope, Public, HideBySig
    AddIndexedMesh(IndexedMesh, PhyScalarType): PrivateScope, Public, HideBySig
    get_IndexedMeshArray(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.TriangleMesh: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TriangleIndexVertexArray
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Boolean, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single WeldingThreshold 'get set' : 
    Boolean Use4ComponentVertices 'get ' : 
    Boolean Use32BitIndices 'get ' : 
    Int32 NumTriangles 'get ' : 
  Methods:
    AddIndex(Int32): PrivateScope, Public, HideBySig
    AddTriangleRef(Vector3&, Vector3&, Vector3&): PrivateScope, Public, HideBySig
    AddTriangleRef(Vector3&, Vector3&, Vector3&, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    AddTriangle(Vector3, Vector3, Vector3): PrivateScope, Public, HideBySig
    AddTriangle(Vector3, Vector3, Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    AddTriangleIndices(Int32, Int32, Int32): PrivateScope, Public, HideBySig
    FindOrAddVertex(Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    get_NumTriangles(): PrivateScope, Public, HideBySig, SpecialName
    get_Use32BitIndices(): PrivateScope, Public, HideBySig, SpecialName
    get_Use4ComponentVertices(): PrivateScope, Public, HideBySig, SpecialName
    get_WeldingThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_WeldingThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.BulletMaterial: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, Serializable, BeforeFieldInit
  :System.ValueType
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single Restitution 'get set' : 
    Single Friction 'get set' : 
    Int32 SizeInBytes 'get ' : 
  Methods:
    get_SizeInBytes(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_Friction(): PrivateScope, Public, HideBySig, SpecialName
    set_Friction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Restitution(): PrivateScope, Public, HideBySig, SpecialName
    set_Restitution(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.MaterialProperties: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.PhyScalarType TriangleType 'get set' : 
    Int32 TriangleMaterialStride 'get set' : 
    IntPtr TriangleMaterialsBase 'get set' : 
    Int32 NumTriangles 'get set' : 
    Int32 NumMaterials 'get set' : 
    BulletSharp.PhyScalarType MaterialType 'get set' : 
    Int32 MaterialStride 'get set' : 
    IntPtr MaterialBase 'get set' : 
  Methods:
    Allocate(Int32, Int32, Int32, Int32, PhyScalarType, PhyScalarType): PrivateScope, Public, HideBySig
    Free(): PrivateScope, Public, HideBySig
    get_MaterialBase(): PrivateScope, Public, HideBySig, SpecialName
    set_MaterialBase(IntPtr): PrivateScope, Public, HideBySig, SpecialName
    get_MaterialStride(): PrivateScope, Public, HideBySig, SpecialName
    set_MaterialStride(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_MaterialType(): PrivateScope, Public, HideBySig, SpecialName
    set_MaterialType(PhyScalarType): PrivateScope, Public, HideBySig, SpecialName
    get_NumMaterials(): PrivateScope, Public, HideBySig, SpecialName
    set_NumMaterials(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumTriangles(): PrivateScope, Public, HideBySig, SpecialName
    set_NumTriangles(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleMaterialsBase(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleMaterialsBase(IntPtr): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleMaterialStride(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleMaterialStride(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleType(): PrivateScope, Public, HideBySig, SpecialName
    set_TriangleType(PhyScalarType): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TriangleIndexVertexMaterialArray: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TriangleIndexVertexArray
    Void .ctor(System.Collections.Generic.ICollection`1[System.Int32], System.Collections.Generic.ICollection`1[SharpDX.Vector3], System.Collections.Generic.ICollection`1[BulletSharp.BulletMaterial], System.Collections.Generic.ICollection`1[System.Int32]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Int32, IntPtr, Int32, Int32, IntPtr, Int32, Int32, IntPtr, Int32, IntPtr, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    AddMaterialProperties(MaterialProperties): PrivateScope, Public, HideBySig
    AddMaterialProperties(MaterialProperties, PhyScalarType): PrivateScope, Public, HideBySig
    GetLockedMaterialData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out)): PrivateScope, Public, HideBySig
    GetLockedMaterialData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out), Int32): PrivateScope, Public, HideBySig
    GetLockedReadOnlyMaterialData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out)): PrivateScope, Public, HideBySig
    GetLockedReadOnlyMaterialData(DataStream&(Out), Int32&(Out), PhyScalarType&(Out), Int32&(Out), DataStream&(Out), Int32&(Out), Int32&(Out), PhyScalarType&(Out), Int32): PrivateScope, Public, HideBySig
Class BulletSharp.ConvexTriangleMeshShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.PolyhedralConvexAabbCachingShape
    Void .ctor(BulletSharp.StridingMeshInterface): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.StridingMeshInterface MeshInterface 'get ' : 
  Methods:
    CalculatePrincipalAxisTransform(Matrix&, Vector3&(Out), Single&(Out)): PrivateScope, Public, HideBySig
    get_MeshInterface(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ScaledBvhTriangleMeshShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConcaveShape
    Void .ctor(BulletSharp.BvhTriangleMeshShape, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.BvhTriangleMeshShape ChildShape 'get ' : 
  Methods:
    get_ChildShape(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.EmptyShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConcaveShape
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.MultiSphereShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexInternalAabbCachingShape
    Void .ctor(SharpDX.Vector3[], Single[]): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 SphereCount 'get ' : 
  Methods:
    GetSpherePosition(Int32): PrivateScope, Public, HideBySig
    GetSphereRadius(Int32): PrivateScope, Public, HideBySig
    get_SphereCount(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.UniformScalingShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexShape
    Void .ctor(BulletSharp.ConvexShape, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single UniformScalingFactor 'get ' : 
    BulletSharp.ConvexShape ChildShape 'get ' : 
  Methods:
    get_ChildShape(): PrivateScope, Public, HideBySig, SpecialName
    get_UniformScalingFactor(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Box2DShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.PolyhedralConvexShape
    Void .ctor(Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(Single, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.Vector3Array Vertices 'get ' : 
    BulletSharp.Vector3Array Normals 'get ' : 
    SharpDX.Vector3 HalfExtentsWithoutMargin 'get ' : 
    SharpDX.Vector3 HalfExtentsWithMargin 'get ' : 
    SharpDX.Vector3 Centroid 'get ' : 
  Methods:
    GetPlaneEquation(Int32): PrivateScope, Public, HideBySig
    GetVertex(Int32): PrivateScope, Public, HideBySig
    get_Centroid(): PrivateScope, Public, HideBySig, SpecialName
    get_HalfExtentsWithMargin(): PrivateScope, Public, HideBySig, SpecialName
    get_HalfExtentsWithoutMargin(): PrivateScope, Public, HideBySig, SpecialName
    get_Normals(): PrivateScope, Public, HideBySig, SpecialName
    get_Vertices(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Convex2DShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexShape
    Void .ctor(BulletSharp.ConvexShape): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.ConvexShape ChildShape 'get ' : 
  Methods:
    get_ChildShape(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.ConvexPointCloudShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.PolyhedralConvexAabbCachingShape
    Void .ctor(SharpDX.Vector3[], SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3[], SharpDX.Vector3, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.Vector3Array UnscaledPoints 'get ' : 
    Int32 NumPoints 'get ' : 
  Methods:
    GetScaledPoint(Int32): PrivateScope, Public, HideBySig
    SetPoints(Vector3[]): PrivateScope, Public, HideBySig
    SetPoints(Vector3[], Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetPoints(Vector3[], Boolean(HasFieldMarshal), Vector3): PrivateScope, Public, HideBySig
    get_NumPoints(): PrivateScope, Public, HideBySig, SpecialName
    get_UnscaledPoints(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.HeightfieldTerrainShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConcaveShape
    Void .ctor(Int32, Int32, System.IO.Stream, Single, Single, Single, Int32, BulletSharp.PhyScalarType, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    SetUseDiamondSubdivision(): PrivateScope, Public, HideBySig
    SetUseDiamondSubdivision(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetUseZigzagSubdivision(): PrivateScope, Public, HideBySig
    SetUseZigzagSubdivision(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
Class BulletSharp.MinkowskiSumShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConvexInternalShape
    Void .ctor(BulletSharp.ConvexShape, BulletSharp.ConvexShape): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Matrix TransformB 'get set' : 
    SharpDX.Matrix TransformA 'get set' : 
    BulletSharp.ConvexShape ShapeB 'get ' : 
    BulletSharp.ConvexShape ShapeA 'get ' : 
  Methods:
    get_ShapeA(): PrivateScope, Public, HideBySig, SpecialName
    get_ShapeB(): PrivateScope, Public, HideBySig, SpecialName
    get_TransformA(): PrivateScope, Public, HideBySig, SpecialName
    set_TransformA(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_TransformB(): PrivateScope, Public, HideBySig, SpecialName
    set_TransformB(Matrix): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.MultimaterialTriangleMeshShape: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.BvhTriangleMeshShape
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, SharpDX.Vector3, SharpDX.Vector3, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.StridingMeshInterface, Boolean, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    GetMaterialProperties(Int32, Int32): PrivateScope, Public, HideBySig
Class BulletSharp.ShapeHull: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.ConvexShape): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.Vector3Array Vertices 'get ' : 
    Int32 NumVertices 'get ' : 
    Int32 NumTriangles 'get ' : 
    Int32 NumIndices 'get ' : 
    BulletSharp.UIntArray Indices 'get ' : 
  Methods:
    BuildHull(Single): PrivateScope, Public, HideBySig
    GetIndexStream(): PrivateScope, Public, HideBySig
    GetVertexStream(): PrivateScope, Public, HideBySig
    get_Indices(): PrivateScope, Public, HideBySig, SpecialName
    get_NumIndices(): PrivateScope, Public, HideBySig, SpecialName
    get_NumTriangles(): PrivateScope, Public, HideBySig, SpecialName
    get_NumVertices(): PrivateScope, Public, HideBySig, SpecialName
    get_Vertices(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.BulletTriangle: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.BulletTriangle*): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    SharpDX.Vector3 vertex0 : Public
    SharpDX.Vector3 vertex1 : Public
    SharpDX.Vector3 vertex2 : Public
    Int32 partId : Public
    Int32 triangleIndex : Public
Class BulletSharp.TriangleBuffer: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TriangleCallback
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 NumTriangles 'get ' : 
  Methods:
    ClearBuffer(): PrivateScope, Public, HideBySig
    GetTriangle(Int32): PrivateScope, Public, HideBySig
    get_NumTriangles(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Aabb: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.Aabb, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.Aabb): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Vector3 Min 'get set' : 
    SharpDX.Vector3 Max 'get set' : 
  Methods:
    AppyTransform(Matrix): PrivateScope, Public, HideBySig
    CollidePlane(Vector4): PrivateScope, Public, HideBySig
    CollideRay(Vector3, Vector3): PrivateScope, Public, HideBySig
    CollideTriangleExact(Vector3, Vector3, Vector3, Vector4): PrivateScope, Public, HideBySig
    CopyWithMargin(Aabb, Single): PrivateScope, Public, HideBySig
    FindIntersection(Aabb, Aabb): PrivateScope, Public, HideBySig
    GetCenterExtend(Vector3&(Out), Vector3&(Out)): PrivateScope, Public, HideBySig
    HasCollision(Aabb): PrivateScope, Public, HideBySig
    IncrementMargin(Single): PrivateScope, Public, HideBySig
    Invalidate(): PrivateScope, Public, HideBySig
    Merge(Aabb): PrivateScope, Public, HideBySig
    OverlappingTransConservative(Aabb, Matrix): PrivateScope, Public, HideBySig
    ProjectionInterval(Vector3, Single&(Out), Single&(Out)): PrivateScope, Public, HideBySig
    get_Max(): PrivateScope, Public, HideBySig, SpecialName
    set_Max(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Min(): PrivateScope, Public, HideBySig, SpecialName
    set_Min(Vector3): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.GimTriangleContact: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.GimTriangleContact): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Vector4 SeparatingNormal 'get set' : 
    BulletSharp.Vector3Array Points 'get ' : 
    Int32 PointCount 'get set' : 
    Single PenetrationDepth 'get set' : 
  Methods:
    CopyFrom(GimTriangleContact): PrivateScope, Public, HideBySig
    MergePoints(Vector4, Single, Vector3[]): PrivateScope, Public, HideBySig
    get_PenetrationDepth(): PrivateScope, Public, HideBySig, SpecialName
    set_PenetrationDepth(Single): PrivateScope, Public, HideBySig, SpecialName
    get_PointCount(): PrivateScope, Public, HideBySig, SpecialName
    set_PointCount(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Points(): PrivateScope, Public, HideBySig, SpecialName
    get_SeparatingNormal(): PrivateScope, Public, HideBySig, SpecialName
    set_SeparatingNormal(Vector4): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.PrimitiveTriangle: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.Vector3Array Vertices 'get ' : 
    SharpDX.Vector4 Plane 'get set' : 
    Single Margin 'get set' : 
    Single Dummy 'get set' : 
  Methods:
    ApplyTransform(Matrix): PrivateScope, Public, HideBySig
    BuildTriPlane(): PrivateScope, Public, HideBySig
    ClipTriangle(PrimitiveTriangle, Vector3[]): PrivateScope, Public, HideBySig
    FindTriangleCollisionClipMethod(PrimitiveTriangle, GimTriangleContact): PrivateScope, Public, HideBySig
    GetEdgePlane(Int32, Vector4&(Out)): PrivateScope, Public, HideBySig
    OverlapTestConservative(PrimitiveTriangle): PrivateScope, Public, HideBySig
    get_Dummy(): PrivateScope, Public, HideBySig, SpecialName
    set_Dummy(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Margin(): PrivateScope, Public, HideBySig, SpecialName
    set_Margin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Plane(): PrivateScope, Public, HideBySig, SpecialName
    set_Plane(Vector4): PrivateScope, Public, HideBySig, SpecialName
    get_Vertices(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TriangleShapeEx: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TriangleShape
    Void .ctor(BulletSharp.TriangleShapeEx): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    ApplyTransform(Matrix): PrivateScope, Public, HideBySig
    BuildTriPlane(Vector4): PrivateScope, Public, HideBySig
    OverlapTestConservative(TriangleShapeEx): PrivateScope, Public, HideBySig
Class BulletSharp.CompoundFromGImpact: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  Methods:
    Create(GImpactMeshShape, Single): PrivateScope, Public, Static, HideBySig
Class BulletSharp.GImpactCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ActivatingCollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 Part1 'get set' : 
    Int32 Part0 'get set' : 
    Int32 Face1 'get set' : 
    Int32 Face0 'get set' : 
  Methods:
    GImpactVsCompoundshape(CollisionObjectWrapper, CollisionObjectWrapper, GImpactShapeInterface, CompoundShape, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    GImpactVsConcave(CollisionObjectWrapper, CollisionObjectWrapper, GImpactShapeInterface, ConcaveShape, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    GImpactVsGImpact(CollisionObjectWrapper, CollisionObjectWrapper, GImpactShapeInterface, GImpactShapeInterface): PrivateScope, Public, HideBySig
    GImpactVsShape(CollisionObjectWrapper, CollisionObjectWrapper, GImpactShapeInterface, CollisionShape, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    RegisterAlgorithm(CollisionDispatcher): PrivateScope, Public, Static, HideBySig
    get_Face0(): PrivateScope, Public, HideBySig, SpecialName
    set_Face0(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Face1(): PrivateScope, Public, HideBySig, SpecialName
    set_Face1(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Part0(): PrivateScope, Public, HideBySig, SpecialName
    set_Part0(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Part1(): PrivateScope, Public, HideBySig, SpecialName
    set_Part1(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.GImpactCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.MotionState: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Matrix WorldTransform 'get set' : 
  Methods:
    get_WorldTransform(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    set_WorldTransform(Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.WheelInfoConstructionInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single WheelsDampingRelaxation 'get set' : 
    Single WheelsDampingCompression 'get set' : 
    Single WheelRadius 'get set' : 
    SharpDX.Vector3 WheelDirectionCS 'get set' : 
    SharpDX.Vector3 WheelAxleCS 'get set' : 
    Single SuspensionStiffness 'get set' : 
    Single SuspensionRestLength 'get set' : 
    Single MaxSuspensionTravelCm 'get set' : 
    Single MaxSuspensionForce 'get set' : 
    Boolean IsFrontWheel 'get set' : 
    Single FrictionSlip 'get set' : 
    SharpDX.Vector3 ChassisConnectionCS 'get set' : 
  Methods:
    get_ChassisConnectionCS(): PrivateScope, Public, HideBySig, SpecialName
    set_ChassisConnectionCS(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_FrictionSlip(): PrivateScope, Public, HideBySig, SpecialName
    set_FrictionSlip(Single): PrivateScope, Public, HideBySig, SpecialName
    get_IsFrontWheel(): PrivateScope, Public, HideBySig, SpecialName
    set_IsFrontWheel(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_MaxSuspensionForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSuspensionForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxSuspensionTravelCm(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSuspensionTravelCm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionRestLength(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionRestLength(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionStiffness(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionStiffness(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WheelAxleCS(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelAxleCS(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_WheelDirectionCS(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelDirectionCS(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_WheelRadius(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelRadius(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WheelsDampingCompression(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelsDampingCompression(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WheelsDampingRelaxation(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelsDampingRelaxation(Single): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.RaycastInfo: AutoLayout, AnsiClass, Class, Public, SequentialLayout, Sealed, BeforeFieldInit
  :System.ValueType
  Fields:
    SharpDX.Vector3 ContactNormalWS : Public
    SharpDX.Vector3 ContactPointWS : Public
    System.Object GroundObject : Public
    SharpDX.Vector3 HardPointWS : Public
    Boolean IsInContact : Public
    Single SuspensionLength : Public
    SharpDX.Vector3 WheelAxleWS : Public
    SharpDX.Vector3 WheelDirectionWS : Public
Class BulletSharp.WheelInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.WheelInfoConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Fields:
    BulletSharp.RaycastInfo RaycastInfo : Public
  Properties:
    SharpDX.Matrix WorldTransform 'get set' : 
    Single WheelsSuspensionForce 'get set' : 
    Single WheelsRadius 'get set' : 
    Single WheelsDampingRelaxation 'get set' : 
    Single WheelsDampingCompression 'get set' : 
    SharpDX.Vector3 WheelDirectionCS 'get set' : 
    SharpDX.Vector3 WheelAxleCS 'get set' : 
    Single SuspensionStiffness 'get set' : 
    Single SuspensionRestLength1 'get set' : 
    Single SuspensionRestLength 'get ' : 
    Single SuspensionRelativeVelocity 'get set' : 
    Single Steering 'get set' : 
    Single SkidInfo 'get set' : 
    Single Rotation 'get set' : 
    Single RollInfluence 'get set' : 
    Single MaxSuspensionTravelCm 'get set' : 
    Single MaxSuspensionForce 'get set' : 
    Boolean IsFrontWheel 'get set' : 
    Single FrictionSlip 'get set' : 
    Single EngineForce 'get set' : 
    Single DeltaRotation 'get set' : 
    Single ClippedInvContactDotSuspension 'get set' : 
    System.Object ClientInfo 'get set' : 
    SharpDX.Vector3 ChassisConnectionPointCS 'get set' : 
    Single Brake 'get set' : 
  Methods:
    UpdateWheel(RigidBody, ValueType RaycastInfo IsBoxed): PrivateScope, Public, HideBySig
    get_Brake(): PrivateScope, Public, HideBySig, SpecialName
    set_Brake(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ChassisConnectionPointCS(): PrivateScope, Public, HideBySig, SpecialName
    set_ChassisConnectionPointCS(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_ClientInfo(): PrivateScope, Public, HideBySig, SpecialName
    set_ClientInfo(Object): PrivateScope, Public, HideBySig, SpecialName
    get_ClippedInvContactDotSuspension(): PrivateScope, Public, HideBySig, SpecialName
    set_ClippedInvContactDotSuspension(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DeltaRotation(): PrivateScope, Public, HideBySig, SpecialName
    set_DeltaRotation(Single): PrivateScope, Public, HideBySig, SpecialName
    get_EngineForce(): PrivateScope, Public, HideBySig, SpecialName
    set_EngineForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_FrictionSlip(): PrivateScope, Public, HideBySig, SpecialName
    set_FrictionSlip(Single): PrivateScope, Public, HideBySig, SpecialName
    get_IsFrontWheel(): PrivateScope, Public, HideBySig, SpecialName
    set_IsFrontWheel(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_MaxSuspensionForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSuspensionForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxSuspensionTravelCm(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSuspensionTravelCm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RollInfluence(): PrivateScope, Public, HideBySig, SpecialName
    set_RollInfluence(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Rotation(): PrivateScope, Public, HideBySig, SpecialName
    set_Rotation(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SkidInfo(): PrivateScope, Public, HideBySig, SpecialName
    set_SkidInfo(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Steering(): PrivateScope, Public, HideBySig, SpecialName
    set_Steering(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionRelativeVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionRelativeVelocity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionRestLength(): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionRestLength1(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionRestLength1(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionStiffness(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionStiffness(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WheelAxleCS(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelAxleCS(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_WheelDirectionCS(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelDirectionCS(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_WheelsDampingCompression(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelsDampingCompression(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WheelsDampingRelaxation(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelsDampingRelaxation(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WheelsRadius(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelsRadius(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WheelsSuspensionForce(): PrivateScope, Public, HideBySig, SpecialName
    set_WheelsSuspensionForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WorldTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_WorldTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.TransformUtil: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  Methods:
    CalculateDiffAxisAngle(Matrix, Matrix, Vector3&(Out), Single&(Out)): PrivateScope, Public, Static, HideBySig
    CalculateDiffAxisAngleQuaternion(Quaternion, Quaternion, Vector3&(Out), Single&(Out)): PrivateScope, Public, Static, HideBySig
    CalculateVelocity(Matrix, Matrix, Single, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, Static, HideBySig
    CalculateVelocityQuaternion(Vector3, Vector3, Quaternion, Quaternion, Single, Vector3&(Out), Vector3&(Out)): PrivateScope, Public, Static, HideBySig
    IntegrateTransform(Matrix, Vector3, Vector3, Single, Matrix&(Out)): PrivateScope, Public, Static, HideBySig
Class BulletSharp.ConvexSeparatingDistanceUtil: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single ConservativeSeparatingDistance 'get ' : 
  Methods:
    InitSeparatingDistance(Vector3, Single, Matrix, Matrix): PrivateScope, Public, HideBySig
    UpdateSeparatingDistance(Matrix, Matrix): PrivateScope, Public, HideBySig
    get_ConservativeSeparatingDistance(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.JointFeedback: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Vector3 AppliedTorqueBodyB 'get set' : 
    SharpDX.Vector3 AppliedTorqueBodyA 'get set' : 
    SharpDX.Vector3 AppliedForceBodyB 'get set' : 
    SharpDX.Vector3 AppliedForceBodyA 'get set' : 
  Methods:
    get_AppliedForceBodyA(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedForceBodyA(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedForceBodyB(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedForceBodyB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedTorqueBodyA(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedTorqueBodyA(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedTorqueBodyB(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedTorqueBodyB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TypedConstraint: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    BulletSharp.ITrackingDisposable
    System.IDisposable
  Properties:
    Int32 UserConstraintType 'get set' : 
    System.Object UserObject 'get set' : 
    Int32 Uid  'get ' : 
    BulletSharp.RigidBody RigidBodyB 'get ' : 
    BulletSharp.RigidBody RigidBodyA 'get ' : 
    Int32 OverrideNumSolverIterations 'get set' : 
    Boolean NeedsFeedback 'get set' : 
    BulletSharp.JointFeedback JointFeedback 'get set' : 
    Boolean IsEnabled 'get set' : 
    Boolean IsDisposed 'get ' : 
    Single DebugDrawSize 'get set' : 
    BulletSharp.TypedConstraintType ConstraintType 'get ' : 
    Single BreakingImpulseThreshold 'get set' : 
    Single AppliedImpulse 'get ' : 
  Events:
    System.EventHandler OnDisposed: SpecialName
    System.EventHandler OnDisposing: SpecialName
  Methods:
    add_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposing(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    add_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    remove_OnDisposed(EventHandler): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    BuildJacobian(): PrivateScope, Public, HideBySig
    CalculateSerializeBufferSize(): PrivateScope, Public, HideBySig
    EnableFeedback(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    GetFixedBody(): PrivateScope, Public, Static, HideBySig
    GetInfo1(ConstraintInfo1): PrivateScope, Public, HideBySig
    GetInfo2(ConstraintInfo2): PrivateScope, Public, HideBySig
    GetParam(ConstraintParam): PrivateScope, Public, HideBySig
    GetParam(ConstraintParam, Int32): PrivateScope, Public, HideBySig
    InternalGetAppliedImpulse(): PrivateScope, Public, HideBySig
    InternalSetAppliedImpulse(Single): PrivateScope, Public, HideBySig
    Serialize(IntPtr, Serializer): PrivateScope, Public, HideBySig
    SetParam(ConstraintParam, Single): PrivateScope, Public, HideBySig
    SetParam(ConstraintParam, Single, Int32): PrivateScope, Public, HideBySig
    get_AppliedImpulse(): PrivateScope, Public, HideBySig, SpecialName
    get_BreakingImpulseThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_BreakingImpulseThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ConstraintType(): PrivateScope, Public, HideBySig, SpecialName
    get_DebugDrawSize(): PrivateScope, Public, HideBySig, SpecialName
    set_DebugDrawSize(Single): PrivateScope, Public, HideBySig, SpecialName
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_IsEnabled(): PrivateScope, Public, HideBySig, SpecialName
    set_IsEnabled(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_JointFeedback(): PrivateScope, Public, HideBySig, SpecialName
    set_JointFeedback(JointFeedback): PrivateScope, Public, HideBySig, SpecialName
    get_NeedsFeedback(): PrivateScope, Public, HideBySig, SpecialName
    set_NeedsFeedback(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_OverrideNumSolverIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_OverrideNumSolverIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_RigidBodyA(): PrivateScope, Public, HideBySig, SpecialName
    get_RigidBodyB(): PrivateScope, Public, HideBySig, SpecialName
    get_Uid(): PrivateScope, Public, HideBySig, SpecialName
    get_UserObject(): PrivateScope, Public, HideBySig, SpecialName
    set_UserObject(Object): PrivateScope, Public, HideBySig, SpecialName
    get_UserConstraintType(): PrivateScope, Public, HideBySig, SpecialName
    set_UserConstraintType(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TypedConstraint+ConstraintInfo1: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 NumConstraintRows 'get set' : 
    Int32 Nub  'get set' : 
  Methods:
    get_Nub(): PrivateScope, Public, HideBySig, SpecialName
    set_Nub(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumConstraintRows(): PrivateScope, Public, HideBySig, SpecialName
    set_NumConstraintRows(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TypedConstraint+ConstraintInfo2: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.ScalarArray UpperLimit 'get ' : 
    Int32 Rowskip 'get set' : 
    Int32 NumIterations 'get set' : 
    BulletSharp.ScalarArray LowerLimit 'get ' : 
    BulletSharp.ScalarArray J2linearAxis 'get ' : 
    BulletSharp.ScalarArray J2angularAxis 'get ' : 
    BulletSharp.ScalarArray J1linearAxis 'get ' : 
    BulletSharp.ScalarArray J1angularAxis 'get ' : 
    Single Fps 'get set' : 
    Single Erp 'get set' : 
    Single Damping 'get set' : 
    BulletSharp.ScalarArray ConstraintError 'get ' : 
    BulletSharp.ScalarArray Cfm 'get ' : 
  Methods:
    get_Cfm(): PrivateScope, Public, HideBySig, SpecialName
    get_ConstraintError(): PrivateScope, Public, HideBySig, SpecialName
    get_Damping(): PrivateScope, Public, HideBySig, SpecialName
    set_Damping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Erp(): PrivateScope, Public, HideBySig, SpecialName
    set_Erp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Fps(): PrivateScope, Public, HideBySig, SpecialName
    set_Fps(Single): PrivateScope, Public, HideBySig, SpecialName
    get_J1angularAxis(): PrivateScope, Public, HideBySig, SpecialName
    get_J1linearAxis(): PrivateScope, Public, HideBySig, SpecialName
    get_J2angularAxis(): PrivateScope, Public, HideBySig, SpecialName
    get_J2linearAxis(): PrivateScope, Public, HideBySig, SpecialName
    get_LowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_NumIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_NumIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Rowskip(): PrivateScope, Public, HideBySig, SpecialName
    set_Rowskip(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_UpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.DefaultMotionState: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.MotionState
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(SharpDX.Matrix, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Matrix WorldTransform 'get set' : 
    System.Object UserObject 'get set' : 
    SharpDX.Matrix StartWorldTrans 'get set' : 
    SharpDX.Matrix GraphicsWorldTrans 'get set' : 
    SharpDX.Matrix CenterOfMassOffset 'get set' : 
  Methods:
    get_CenterOfMassOffset(): PrivateScope, Public, HideBySig, SpecialName
    set_CenterOfMassOffset(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_GraphicsWorldTrans(): PrivateScope, Public, HideBySig, SpecialName
    set_GraphicsWorldTrans(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_StartWorldTrans(): PrivateScope, Public, HideBySig, SpecialName
    set_StartWorldTrans(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_UserObject(): PrivateScope, Public, HideBySig, SpecialName
    set_UserObject(Object): PrivateScope, Public, HideBySig, SpecialName
    get_WorldTransform(): PrivateScope, Public, Virtual, HideBySig, SpecialName
    set_WorldTransform(Matrix): PrivateScope, Public, Virtual, HideBySig, SpecialName
    GetWorldTransform(Matrix&(Out)): PrivateScope, Public, HideBySig
Class BulletSharp.Clock: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.Clock): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single TimeSeconds 'get ' : 
    UInt32 TimeMilliseconds 'get ' IsLong : 
    UInt32 TimeMicroseconds 'get ' IsLong : 
  Methods:
    op_Assign(Clock): PrivateScope, Public, HideBySig, SpecialName
    Reset(): PrivateScope, Public, HideBySig
    get_TimeMicroseconds(): PrivateScope, Public, HideBySig, SpecialName
    get_TimeMilliseconds(): PrivateScope, Public, HideBySig, SpecialName
    get_TimeSeconds(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.CProfileNode: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    IntPtr UserPointer 'get set' : 
    Single TotalTime 'get ' : 
    Int32 TotalCalls 'get ' : 
    BulletSharp.CProfileNode Sibling 'get ' : 
    BulletSharp.CProfileNode Parent 'get ' : 
    System.String Name 'get ' : 
    BulletSharp.CProfileNode Child 'get ' : 
  Methods:
    Call(): PrivateScope, Public, HideBySig
    CleanupMemory(): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
    Return(): PrivateScope, Public, HideBySig
    get_Child(): PrivateScope, Public, HideBySig, SpecialName
    get_Name(): PrivateScope, Public, HideBySig, SpecialName
    get_Parent(): PrivateScope, Public, HideBySig, SpecialName
    get_Sibling(): PrivateScope, Public, HideBySig, SpecialName
    get_TotalCalls(): PrivateScope, Public, HideBySig, SpecialName
    get_TotalTime(): PrivateScope, Public, HideBySig, SpecialName
    get_UserPointer(): PrivateScope, Public, HideBySig, SpecialName
    set_UserPointer(IntPtr): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CProfileIterator: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    Boolean IsRoot 'get ' : 
    Boolean IsDone 'get ' : 
    IntPtr CurrentUserPointer 'get set' : 
    Single CurrentTotalTime 'get ' : 
    Int32 CurrentTotalCalls 'get ' : 
    Single CurrentParentTotalTime 'get ' : 
    Int32 CurrentParentTotalCalls 'get ' : 
    System.String CurrentParentName 'get ' : 
    System.String CurrentName 'get ' : 
  Methods:
    EnterChild(Int32): PrivateScope, Public, HideBySig
    EnterParent(): PrivateScope, Public, HideBySig
    First(): PrivateScope, Public, HideBySig
    Next(): PrivateScope, Public, HideBySig
    get_CurrentName(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentParentName(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentParentTotalCalls(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentParentTotalTime(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentTotalCalls(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentTotalTime(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentUserPointer(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentUserPointer(IntPtr): PrivateScope, Public, HideBySig, SpecialName
    get_IsDone(): PrivateScope, Public, HideBySig, SpecialName
    get_IsRoot(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.CProfileManager: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single TimeSinceReset 'get ' : 
    BulletSharp.CProfileIterator Iterator 'get ' : 
    Int32 FrameCountSinceReset 'get ' : 
  Methods:
    CleanupMemory(): PrivateScope, Public, Static, HideBySig
    DumpAll(): PrivateScope, Public, Static, HideBySig
    DumpRecursive(CProfileIterator, Int32): PrivateScope, Public, Static, HideBySig
    IncrementFrameCounter(): PrivateScope, Public, Static, HideBySig
    ReleaseIterator(CProfileIterator): PrivateScope, Public, Static, HideBySig
    Reset(): PrivateScope, Public, Static, HideBySig
    StopProfile(): PrivateScope, Public, Static, HideBySig
    get_FrameCountSinceReset(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_Iterator(): PrivateScope, Public, Static, HideBySig, SpecialName
    get_TimeSinceReset(): PrivateScope, Public, Static, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.CProfileSample: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
Class BulletSharp.GeometryUtil: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  Methods:
    AreVerticesBehindPlane(Vector3, AlignedVector3Array, Single): PrivateScope, Public, Static, HideBySig
    GetPlaneEquationsFromVertices(AlignedVector3Array, AlignedVector3Array): PrivateScope, Public, Static, HideBySig
    GetVerticesFromPlaneEquations(AlignedVector3Array, AlignedVector3Array): PrivateScope, Public, Static, HideBySig
    IsPointInsidePlanes(AlignedVector3Array, Vector3, Single): PrivateScope, Public, Static, HideBySig
Class BulletSharp.CpuFeatureUtility: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  Properties:
    BulletSharp.CpuFeatures CpuFeatures 'get ' : 
  Methods:
    get_CpuFeatures(): PrivateScope, Public, Static, HideBySig, SpecialName
Struct BulletSharp.CpuFeatures: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.CpuFeatures None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.CpuFeatures Fma3 = 1 : Public, Static, Literal, HasDefault
    BulletSharp.CpuFeatures Sse4 = 2 : Public, Static, Literal, HasDefault
    BulletSharp.CpuFeatures NeonHpfp = 4 : Public, Static, Literal, HasDefault
Class BulletSharp.ContactSolverInfoData: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single WarmstartingFactor 'get set' : 
    Single TimeStep 'get set' : 
    Single Tau 'get set' : 
    Single SplitImpulseTurnErp 'get set' : 
    Single SplitImpulsePenetrationThreshold 'get set' : 
    Int32 SplitImpulse 'get set' : 
    Single Sor 'get set' : 
    BulletSharp.SolverModes SolverMode 'get set' : 
    Single SingleAxisRollingFrictionThreshold 'get set' : 
    Single Restitution 'get set' : 
    Int32 RestingContactRestitutionThreshold 'get set' : 
    Int32 NumIterations 'get set' : 
    Int32 MinimumSolverBatchSize 'get set' : 
    Single MaxGyroscopicForce 'get set' : 
    Single MaxErrorReduction 'get set' : 
    Single LinearSlop 'get set' : 
    Single GlobalCfm 'get set' : 
    Single Friction 'get set' : 
    Single Erp2 'get set' : 
    Single Erp 'get set' : 
    Single Damping 'get set' : 
  Methods:
    get_Damping(): PrivateScope, Public, HideBySig, SpecialName
    set_Damping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Erp(): PrivateScope, Public, HideBySig, SpecialName
    set_Erp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Erp2(): PrivateScope, Public, HideBySig, SpecialName
    set_Erp2(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Friction(): PrivateScope, Public, HideBySig, SpecialName
    set_Friction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_GlobalCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_GlobalCfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LinearSlop(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearSlop(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxErrorReduction(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxErrorReduction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxGyroscopicForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxGyroscopicForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MinimumSolverBatchSize(): PrivateScope, Public, HideBySig, SpecialName
    set_MinimumSolverBatchSize(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_NumIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_RestingContactRestitutionThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_RestingContactRestitutionThreshold(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Restitution(): PrivateScope, Public, HideBySig, SpecialName
    set_Restitution(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SingleAxisRollingFrictionThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_SingleAxisRollingFrictionThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SolverMode(): PrivateScope, Public, HideBySig, SpecialName
    set_SolverMode(SolverModes): PrivateScope, Public, HideBySig, SpecialName
    get_Sor(): PrivateScope, Public, HideBySig, SpecialName
    set_Sor(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SplitImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_SplitImpulse(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_SplitImpulsePenetrationThreshold(): PrivateScope, Public, HideBySig, SpecialName
    set_SplitImpulsePenetrationThreshold(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SplitImpulseTurnErp(): PrivateScope, Public, HideBySig, SpecialName
    set_SplitImpulseTurnErp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Tau(): PrivateScope, Public, HideBySig, SpecialName
    set_Tau(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TimeStep(): PrivateScope, Public, HideBySig, SpecialName
    set_TimeStep(Single): PrivateScope, Public, HideBySig, SpecialName
    get_WarmstartingFactor(): PrivateScope, Public, HideBySig, SpecialName
    set_WarmstartingFactor(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.ContactSolverInfo: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ContactSolverInfoData
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.ConstraintSetting: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single Tau 'get set' : 
    Single ImpulseClamp 'get set' : 
    Single Damping 'get set' : 
  Methods:
    get_Damping(): PrivateScope, Public, HideBySig, SpecialName
    set_Damping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ImpulseClamp(): PrivateScope, Public, HideBySig, SpecialName
    set_ImpulseClamp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Tau(): PrivateScope, Public, HideBySig, SpecialName
    set_Tau(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.Point2PointConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TypedConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.ConstraintSetting Setting 'get set' : 
    SharpDX.Vector3 PivotInB 'get set' : 
    SharpDX.Vector3 PivotInA 'get set' : 
    BulletSharp.Point2PointFlags Flags 'get ' : 
  Methods:
    GetInfo1NonVirtual(ConstraintInfo1): PrivateScope, Public, HideBySig
    GetInfo2NonVirtual(ConstraintInfo2, Matrix, Matrix): PrivateScope, Public, HideBySig
    UpdateRhs(Single): PrivateScope, Public, HideBySig
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    get_PivotInA(): PrivateScope, Public, HideBySig, SpecialName
    set_PivotInA(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_PivotInB(): PrivateScope, Public, HideBySig, SpecialName
    set_PivotInB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Setting(): PrivateScope, Public, HideBySig, SpecialName
    set_Setting(ConstraintSetting): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.Point2PointFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.Point2PointFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.Point2PointFlags Erp = 1 : Public, Static, Literal, HasDefault
    BulletSharp.Point2PointFlags Cfm = 2 : Public, Static, Literal, HasDefault
Class BulletSharp.HingeConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TypedConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean UseReferenceFrameA 'get set' : 
    Boolean UseFrameOffset 'get set' : 
    Single UpperLimit 'get ' : 
    Int32 SolveLimit 'get ' : 
    Single MotorTargetVelocity 'get set' : 
    Single MaxMotorImpulse 'get set' : 
    Single LowerLimit 'get ' : 
    Single LimitSoftness 'get ' : 
    Single LimitSign 'get ' : 
    Single LimitRelaxationFactor 'get ' : 
    Single LimitBiasFactor 'get ' : 
    Single HingeAngle 'get ' : 
    Boolean HasLimit 'get ' : 
    SharpDX.Matrix FrameOffsetB 'get set' : 
    SharpDX.Matrix FrameOffsetA 'get set' : 
    BulletSharp.HingeFlags Flags 'get ' : 
    Boolean EnableMotor 'get set' : 
    SharpDX.Matrix BFrame 'get ' : 
    Boolean AngularOnly 'get set' : 
    SharpDX.Matrix AFrame 'get ' : 
  Methods:
    EnableAngularMotor(Boolean(HasFieldMarshal), Single, Single): PrivateScope, Public, HideBySig
    GetHingeAngle(Matrix, Matrix): PrivateScope, Public, HideBySig
    GetInfo1NonVirtual(ConstraintInfo1): PrivateScope, Public, HideBySig
    GetInfo2Internal(ConstraintInfo2, Matrix, Matrix, Vector3, Vector3): PrivateScope, Public, HideBySig
    GetInfo2InternalUsingFrameOffset(ConstraintInfo2, Matrix, Matrix, Vector3, Vector3): PrivateScope, Public, HideBySig
    GetInfo2NonVirtual(ConstraintInfo2, Matrix, Matrix, Vector3, Vector3): PrivateScope, Public, HideBySig
    SetAxis(Vector3): PrivateScope, Public, HideBySig
    SetFrames(Matrix, Matrix): PrivateScope, Public, HideBySig
    SetLimit(Single, Single): PrivateScope, Public, HideBySig
    SetLimit(Single, Single, Single): PrivateScope, Public, HideBySig
    SetLimit(Single, Single, Single, Single): PrivateScope, Public, HideBySig
    SetLimit(Single, Single, Single, Single, Single): PrivateScope, Public, HideBySig
    SetMotorTarget(Quaternion, Single): PrivateScope, Public, HideBySig
    SetMotorTarget(Single, Single): PrivateScope, Public, HideBySig
    TestLimit(Matrix, Matrix): PrivateScope, Public, HideBySig
    UpdateRhs(Single): PrivateScope, Public, HideBySig
    get_AFrame(): PrivateScope, Public, HideBySig, SpecialName
    get_AngularOnly(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularOnly(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_BFrame(): PrivateScope, Public, HideBySig, SpecialName
    get_EnableMotor(): PrivateScope, Public, HideBySig, SpecialName
    set_EnableMotor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetA(): PrivateScope, Public, HideBySig, SpecialName
    set_FrameOffsetA(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetB(): PrivateScope, Public, HideBySig, SpecialName
    set_FrameOffsetB(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_HasLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_HingeAngle(): PrivateScope, Public, HideBySig, SpecialName
    get_LimitBiasFactor(): PrivateScope, Public, HideBySig, SpecialName
    get_LimitRelaxationFactor(): PrivateScope, Public, HideBySig, SpecialName
    get_LimitSign(): PrivateScope, Public, HideBySig, SpecialName
    get_LimitSoftness(): PrivateScope, Public, HideBySig, SpecialName
    get_LowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_MaxMotorImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxMotorImpulse(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MotorTargetVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_MotorTargetVelocity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SolveLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_UpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_UseFrameOffset(): PrivateScope, Public, HideBySig, SpecialName
    set_UseFrameOffset(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_UseReferenceFrameA(): PrivateScope, Public, HideBySig, SpecialName
    set_UseReferenceFrameA(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.HingeAccumulatedAngleConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.HingeConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single AccumulatedHingeAngle 'get set' : 
  Methods:
    get_AccumulatedHingeAngle(): PrivateScope, Public, HideBySig, SpecialName
    set_AccumulatedHingeAngle(Single): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.HingeFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.HingeFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.HingeFlags CfmStop = 1 : Public, Static, Literal, HasDefault
    BulletSharp.HingeFlags ErpStop = 2 : Public, Static, Literal, HasDefault
    BulletSharp.HingeFlags CfmNormal = 4 : Public, Static, Literal, HasDefault
    BulletSharp.HingeFlags ErpNormal = 8 : Public, Static, Literal, HasDefault
Class BulletSharp.ConeTwistConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TypedConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single TwistSpan 'get ' : 
    Single TwistLimitSign 'get ' : 
    Single TwistAngle 'get ' : 
    Single SwingSpan2 'get ' : 
    Single SwingSpan1 'get ' : 
    Int32 SolveTwistLimit 'get ' : 
    Int32 SolveSwingLimit 'get ' : 
    Single RelaxationFactor 'get ' : 
    SharpDX.Quaternion MotorTarget 'get set' : 
    Single MaxMotorImpulse 'get set' : 
    Single LimitSoftness 'get ' : 
    Boolean IsPastSwingLimit 'get ' : 
    Boolean IsMotorEnabled 'get ' : 
    Boolean IsMaxMotorImpulseNormalized 'get ' : 
    SharpDX.Matrix FrameOffsetB 'get ' : 
    SharpDX.Matrix FrameOffsetA 'get ' : 
    BulletSharp.ConeTwistFlags Flags 'get ' : 
    Single FixThresh 'get set' : 
    Single Damping 'get set' : 
    Single BiasFactor 'get ' : 
    SharpDX.Matrix BFrame 'get ' : 
    Boolean AngularOnly 'get set' : 
    SharpDX.Matrix AFrame 'get ' : 
  Methods:
    CalcAngleInfo(): PrivateScope, Public, HideBySig
    CalcAngleInfo2(Matrix, Matrix, Matrix, Matrix): PrivateScope, Public, HideBySig
    EnableMotor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    GetInfo1NonVirtual(ConstraintInfo1): PrivateScope, Public, HideBySig
    GetInfo2NonVirtual(ConstraintInfo2, Matrix, Matrix, Matrix, Matrix): PrivateScope, Public, HideBySig
    GetLimit(Int32): PrivateScope, Public, HideBySig
    GetPointForAngle(Single, Single): PrivateScope, Public, HideBySig
    SetFrames(Matrix, Matrix): PrivateScope, Public, HideBySig
    SetLimit(Single, Single, Single): PrivateScope, Public, HideBySig
    SetLimit(Single, Single, Single, Single): PrivateScope, Public, HideBySig
    SetLimit(Single, Single, Single, Single, Single): PrivateScope, Public, HideBySig
    SetLimit(Single, Single, Single, Single, Single, Single): PrivateScope, Public, HideBySig
    SetLimit(Int32, Single): PrivateScope, Public, HideBySig
    SetMaxMotorImpulseNormalized(Single): PrivateScope, Public, HideBySig
    SetMotorTargetInConstraintSpace(Quaternion): PrivateScope, Public, HideBySig
    UpdateRhs(Single): PrivateScope, Public, HideBySig
    get_AFrame(): PrivateScope, Public, HideBySig, SpecialName
    get_AngularOnly(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularOnly(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_BFrame(): PrivateScope, Public, HideBySig, SpecialName
    get_BiasFactor(): PrivateScope, Public, HideBySig, SpecialName
    get_Damping(): PrivateScope, Public, HideBySig, SpecialName
    set_Damping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_FixThresh(): PrivateScope, Public, HideBySig, SpecialName
    set_FixThresh(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetA(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetB(): PrivateScope, Public, HideBySig, SpecialName
    get_IsMaxMotorImpulseNormalized(): PrivateScope, Public, HideBySig, SpecialName
    get_IsMotorEnabled(): PrivateScope, Public, HideBySig, SpecialName
    get_IsPastSwingLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_LimitSoftness(): PrivateScope, Public, HideBySig, SpecialName
    get_MaxMotorImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxMotorImpulse(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MotorTarget(): PrivateScope, Public, HideBySig, SpecialName
    set_MotorTarget(Quaternion): PrivateScope, Public, HideBySig, SpecialName
    get_RelaxationFactor(): PrivateScope, Public, HideBySig, SpecialName
    get_SolveSwingLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_SolveTwistLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_SwingSpan1(): PrivateScope, Public, HideBySig, SpecialName
    get_SwingSpan2(): PrivateScope, Public, HideBySig, SpecialName
    get_TwistAngle(): PrivateScope, Public, HideBySig, SpecialName
    get_TwistLimitSign(): PrivateScope, Public, HideBySig, SpecialName
    get_TwistSpan(): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.ConeTwistFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.ConeTwistFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.ConeTwistFlags LinearCfm = 1 : Public, Static, Literal, HasDefault
    BulletSharp.ConeTwistFlags LinearErp = 2 : Public, Static, Literal, HasDefault
    BulletSharp.ConeTwistFlags AngularCfm = 4 : Public, Static, Literal, HasDefault
Class BulletSharp.RotationalLimitMotor: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.RotationalLimitMotor): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single TargetVelocity 'get set' : 
    Single StopErp 'get set' : 
    Single StopCfm 'get set' : 
    Single NormalCfm 'get set' : 
    Boolean NeedApplyTorques 'get ' : 
    Single MaxMotorForce 'get set' : 
    Single MaxLimitForce 'get set' : 
    Single LoLimit 'get set' : 
    Single LimitSoftness 'get set' : 
    Boolean IsLimited 'get ' : 
    Single HiLimit 'get set' : 
    Boolean EnableMotor 'get set' : 
    Single Damping 'get set' : 
    Single CurrentPosition 'get set' : 
    Single CurrentLimitError 'get set' : 
    Int32 CurrentLimit 'get set' : 
    Single Bounce 'get set' : 
    Single AccumulatedImpulse 'get set' : 
  Methods:
    SolveAngularLimits(Single, Vector3, Single, RigidBody, RigidBody): PrivateScope, Public, HideBySig
    TestLimitValue(Single): PrivateScope, Public, HideBySig
    get_AccumulatedImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_AccumulatedImpulse(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Bounce(): PrivateScope, Public, HideBySig, SpecialName
    set_Bounce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimit(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimitError(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimitError(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentPosition(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentPosition(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Damping(): PrivateScope, Public, HideBySig, SpecialName
    set_Damping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_EnableMotor(): PrivateScope, Public, HideBySig, SpecialName
    set_EnableMotor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_HiLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_HiLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_IsLimited(): PrivateScope, Public, HideBySig, SpecialName
    get_LimitSoftness(): PrivateScope, Public, HideBySig, SpecialName
    set_LimitSoftness(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LoLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LoLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxLimitForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxLimitForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxMotorForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxMotorForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_NeedApplyTorques(): PrivateScope, Public, HideBySig, SpecialName
    get_NormalCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_NormalCfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_StopCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_StopCfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_StopErp(): PrivateScope, Public, HideBySig, SpecialName
    set_StopErp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TargetVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_TargetVelocity(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TranslationalLimitMotor: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.TranslationalLimitMotor): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Vector3 UpperLimit 'get set' : 
    SharpDX.Vector3 TargetVelocity 'get set' : 
    SharpDX.Vector3 StopErp 'get set' : 
    SharpDX.Vector3 StopCfm 'get set' : 
    Single Restitution 'get set' : 
    SharpDX.Vector3 NormalCfm 'get set' : 
    SharpDX.Vector3 MaxMotorForce 'get set' : 
    SharpDX.Vector3 LowerLimit 'get set' : 
    Single LimitSoftness 'get set' : 
    BulletSharp.BoolArray EnableMotor 'get ' : 
    Single Damping 'get set' : 
    SharpDX.Vector3 CurrentLinearDiff 'get set' : 
    SharpDX.Vector3 CurrentLimitError 'get set' : 
    BulletSharp.IntArray CurrentLimit 'get ' : 
    SharpDX.Vector3 AccumulatedImpulse 'get set' : 
  Methods:
    IsLimited(Int32): PrivateScope, Public, HideBySig
    NeedApplyForce(Int32): PrivateScope, Public, HideBySig
    SolveLinearAxis(Single, Single, RigidBody, Vector3, RigidBody, Vector3, Int32, Vector3, Vector3): PrivateScope, Public, HideBySig
    TestLimitValue(Int32, Single): PrivateScope, Public, HideBySig
    get_AccumulatedImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_AccumulatedImpulse(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimitError(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimitError(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLinearDiff(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLinearDiff(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Damping(): PrivateScope, Public, HideBySig, SpecialName
    set_Damping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_EnableMotor(): PrivateScope, Public, HideBySig, SpecialName
    get_LimitSoftness(): PrivateScope, Public, HideBySig, SpecialName
    set_LimitSoftness(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LowerLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_MaxMotorForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxMotorForce(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_NormalCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_NormalCfm(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Restitution(): PrivateScope, Public, HideBySig, SpecialName
    set_Restitution(Single): PrivateScope, Public, HideBySig, SpecialName
    get_StopCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_StopCfm(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_StopErp(): PrivateScope, Public, HideBySig, SpecialName
    set_StopErp(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_TargetVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_TargetVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_UpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_UpperLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.Generic6DofConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TypedConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean UseLinearReferenceFrameA 'get set' : 
    Boolean UseFrameOffset 'get set' : 
    BulletSharp.TranslationalLimitMotor TranslationalLimitMotor 'get ' : 
    SharpDX.Vector3 LinearUpperLimit 'get set' : 
    SharpDX.Vector3 LinearLowerLimit 'get set' : 
    SharpDX.Matrix FrameOffsetB 'get set' : 
    SharpDX.Matrix FrameOffsetA 'get set' : 
    BulletSharp.SixDofFlags Flags 'get ' : 
    SharpDX.Matrix CalculatedTransformB 'get ' : 
    SharpDX.Matrix CalculatedTransformA 'get ' : 
    SharpDX.Vector3 AngularUpperLimit 'get set' : 
    SharpDX.Vector3 AngularLowerLimit 'get set' : 
  Methods:
    CalcAnchorPos(): PrivateScope, Public, HideBySig
    CalculateTransforms(): PrivateScope, Public, HideBySig
    CalculateTransforms(Matrix, Matrix): PrivateScope, Public, HideBySig
    GetLimitMotorInfo2(RotationalLimitMotor, Matrix, Matrix, Vector3, Vector3, Vector3, Vector3, ConstraintInfo2, Int32, Vector3, Int32): PrivateScope, Public, HideBySig
    GetLimitMotorInfo2(RotationalLimitMotor, Matrix, Matrix, Vector3, Vector3, Vector3, Vector3, ConstraintInfo2, Int32, Vector3, Int32, Int32): PrivateScope, Public, HideBySig
    GetAngle(Int32): PrivateScope, Public, HideBySig
    GetAxis(Int32): PrivateScope, Public, HideBySig
    GetInfo1NonVirtual(ConstraintInfo1): PrivateScope, Public, HideBySig
    GetInfo2NonVirtual(ConstraintInfo2, Matrix, Matrix, Vector3, Vector3, Vector3, Vector3): PrivateScope, Public, HideBySig
    GetRelativePivotPosition(Int32): PrivateScope, Public, HideBySig
    GetRotationalLimitMotor(Int32): PrivateScope, Public, HideBySig
    IsLimited(Int32): PrivateScope, Public, HideBySig
    SetAxis(Vector3, Vector3): PrivateScope, Public, HideBySig
    SetFrames(Matrix, Matrix): PrivateScope, Public, HideBySig
    SetLimit(Int32, Single, Single): PrivateScope, Public, HideBySig
    TestAngularLimitMotor(Int32): PrivateScope, Public, HideBySig
    UpdateRhs(Single): PrivateScope, Public, HideBySig
    get_AngularLowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularLowerLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AngularUpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularUpperLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CalculatedTransformA(): PrivateScope, Public, HideBySig, SpecialName
    get_CalculatedTransformB(): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetA(): PrivateScope, Public, HideBySig, SpecialName
    set_FrameOffsetA(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetB(): PrivateScope, Public, HideBySig, SpecialName
    set_FrameOffsetB(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_LinearLowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearLowerLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LinearUpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearUpperLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_TranslationalLimitMotor(): PrivateScope, Public, HideBySig, SpecialName
    get_UseFrameOffset(): PrivateScope, Public, HideBySig, SpecialName
    set_UseFrameOffset(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_UseLinearReferenceFrameA(): PrivateScope, Public, HideBySig, SpecialName
    set_UseLinearReferenceFrameA(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.SixDofFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SixDofFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SixDofFlags CfmNormal = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SixDofFlags CfmStop = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SixDofFlags ErpStop = 4 : Public, Static, Literal, HasDefault
Class BulletSharp.SliderConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TypedConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean UseLinearReferenceFrameA 'get ' : 
    Boolean UseFrameOffset 'get set' : 
    Single UpperLinLimit 'get set' : 
    Single UpperAngularLimit 'get set' : 
    Single TargetLinMotorVelocity 'get set' : 
    Single TargetAngularMotorVelocity 'get set' : 
    Boolean SolveLinLimit 'get ' : 
    Boolean SolveAngularLimit 'get ' : 
    Single SoftnessOrthoLin 'get set' : 
    Single SoftnessOrthoAngular 'get set' : 
    Single SoftnessLimLin 'get set' : 
    Single SoftnessLimAngular 'get set' : 
    Single SoftnessDirLin 'get set' : 
    Single SoftnessDirAngular 'get set' : 
    Single RestitutionOrthoLin 'get set' : 
    Single RestitutionOrthoAngular 'get set' : 
    Single RestitutionLimLin 'get set' : 
    Single RestitutionLimAngular 'get set' : 
    Single RestitutionDirLin 'get set' : 
    Single RestitutionDirAngular 'get set' : 
    Boolean PoweredLinMotor 'get set' : 
    Boolean PoweredAngularMotor 'get set' : 
    Single MaxLinMotorForce 'get set' : 
    Single MaxAngularMotorForce 'get set' : 
    Single LowerLinLimit 'get set' : 
    Single LowerAngularLimit 'get set' : 
    Single LinearPos 'get ' : 
    Single LinDepth 'get ' : 
    SharpDX.Matrix FrameOffsetB 'get ' : 
    SharpDX.Matrix FrameOffsetA 'get ' : 
    BulletSharp.SliderFlags Flags 'get ' : 
    Single DampingOrthoLin 'get set' : 
    Single DampingOrthoAngular 'get set' : 
    Single DampingLimLin 'get set' : 
    Single DampingLimAngular 'get set' : 
    Single DampingDirLin 'get set' : 
    Single DampingDirAngular 'get set' : 
    SharpDX.Matrix CalculatedTransformB 'get ' : 
    SharpDX.Matrix CalculatedTransformA 'get ' : 
    Single AngularPos 'get ' : 
    Single AngularDepth 'get ' : 
    SharpDX.Vector3 AnchorInB 'get ' : 
    SharpDX.Vector3 AnchorInA 'get ' : 
  Methods:
    CalculateTransforms(Matrix, Matrix): PrivateScope, Public, HideBySig
    GetInfo1NonVirtual(ConstraintInfo1): PrivateScope, Public, HideBySig
    GetInfo2NonVirtual(ConstraintInfo2, Matrix, Matrix, Vector3, Vector3, Single, Single): PrivateScope, Public, HideBySig
    SetFrames(Matrix, Matrix): PrivateScope, Public, HideBySig
    TestAngularLimits(): PrivateScope, Public, HideBySig
    TestLinLimits(): PrivateScope, Public, HideBySig
    get_AnchorInA(): PrivateScope, Public, HideBySig, SpecialName
    get_AnchorInB(): PrivateScope, Public, HideBySig, SpecialName
    get_AngularDepth(): PrivateScope, Public, HideBySig, SpecialName
    get_AngularPos(): PrivateScope, Public, HideBySig, SpecialName
    get_CalculatedTransformA(): PrivateScope, Public, HideBySig, SpecialName
    get_CalculatedTransformB(): PrivateScope, Public, HideBySig, SpecialName
    get_DampingDirAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_DampingDirAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DampingDirLin(): PrivateScope, Public, HideBySig, SpecialName
    set_DampingDirLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DampingLimAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_DampingLimAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DampingLimLin(): PrivateScope, Public, HideBySig, SpecialName
    set_DampingLimLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DampingOrthoAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_DampingOrthoAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_DampingOrthoLin(): PrivateScope, Public, HideBySig, SpecialName
    set_DampingOrthoLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetA(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetB(): PrivateScope, Public, HideBySig, SpecialName
    get_LinDepth(): PrivateScope, Public, HideBySig, SpecialName
    get_LinearPos(): PrivateScope, Public, HideBySig, SpecialName
    get_LowerAngularLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LowerAngularLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LowerLinLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LowerLinLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxAngularMotorForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxAngularMotorForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxLinMotorForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxLinMotorForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_PoweredAngularMotor(): PrivateScope, Public, HideBySig, SpecialName
    set_PoweredAngularMotor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_PoweredLinMotor(): PrivateScope, Public, HideBySig, SpecialName
    set_PoweredLinMotor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_RestitutionDirAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_RestitutionDirAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RestitutionDirLin(): PrivateScope, Public, HideBySig, SpecialName
    set_RestitutionDirLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RestitutionLimAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_RestitutionLimAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RestitutionLimLin(): PrivateScope, Public, HideBySig, SpecialName
    set_RestitutionLimLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RestitutionOrthoAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_RestitutionOrthoAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RestitutionOrthoLin(): PrivateScope, Public, HideBySig, SpecialName
    set_RestitutionOrthoLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SoftnessDirAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_SoftnessDirAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SoftnessDirLin(): PrivateScope, Public, HideBySig, SpecialName
    set_SoftnessDirLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SoftnessLimAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_SoftnessLimAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SoftnessLimLin(): PrivateScope, Public, HideBySig, SpecialName
    set_SoftnessLimLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SoftnessOrthoAngular(): PrivateScope, Public, HideBySig, SpecialName
    set_SoftnessOrthoAngular(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SoftnessOrthoLin(): PrivateScope, Public, HideBySig, SpecialName
    set_SoftnessOrthoLin(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SolveAngularLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_SolveLinLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_TargetAngularMotorVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_TargetAngularMotorVelocity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TargetLinMotorVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_TargetLinMotorVelocity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UpperAngularLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_UpperAngularLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UpperLinLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_UpperLinLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_UseFrameOffset(): PrivateScope, Public, HideBySig, SpecialName
    set_UseFrameOffset(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_UseLinearReferenceFrameA(): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.SliderFlags: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
    BulletSharp.SliderFlags None = 0 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags CfmDirLinear = 1 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags ErpDirLinear = 2 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags CfmDirAngular = 4 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags ErpDirAngular = 8 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags CfmOrthoLinear = 16 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags ErpOrthoLinear = 32 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags CfmOrthoAngular = 64 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags ErpOrthoAngular = 128 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags CfmLimLinear = 256 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags ErpLimLinear = 512 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags CfmLimAngular = 1024 : Public, Static, Literal, HasDefault
    BulletSharp.SliderFlags ErpLimAngular = 2048 : Public, Static, Literal, HasDefault
Class BulletSharp.Generic6DofSpringConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.Generic6DofConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    EnableSpring(Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    GetDamping(Int32): PrivateScope, Public, HideBySig
    GetEquilibriumPoint(Int32): PrivateScope, Public, HideBySig
    GetStiffness(Int32): PrivateScope, Public, HideBySig
    IsSpringEnabled(Int32): PrivateScope, Public, HideBySig
    SetDamping(Int32, Single): PrivateScope, Public, HideBySig
    SetEquilibriumPoint(Int32, Single): PrivateScope, Public, HideBySig
    SetEquilibriumPoint(Int32): PrivateScope, Public, HideBySig
    SetEquilibriumPoint(): PrivateScope, Public, HideBySig
    SetStiffness(Int32, Single): PrivateScope, Public, HideBySig
Class BulletSharp.UniversalConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.Generic6DofConstraint
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 Axis2 'get ' : 
    SharpDX.Vector3 Axis1 'get ' : 
    Single Angle2 'get ' : 
    Single Angle1 'get ' : 
    SharpDX.Vector3 Anchor2 'get ' : 
    SharpDX.Vector3 Anchor 'get ' : 
  Methods:
    SetLowerLimit(Single, Single): PrivateScope, Public, HideBySig
    SetUpperLimit(Single, Single): PrivateScope, Public, HideBySig
    get_Anchor(): PrivateScope, Public, HideBySig, SpecialName
    get_Anchor2(): PrivateScope, Public, HideBySig, SpecialName
    get_Angle1(): PrivateScope, Public, HideBySig, SpecialName
    get_Angle2(): PrivateScope, Public, HideBySig, SpecialName
    get_Axis1(): PrivateScope, Public, HideBySig, SpecialName
    get_Axis2(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.RotationalLimitMotor2: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.RotationalLimitMotor2): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single TargetVelocity 'get set' : 
    Single StopErp 'get set' : 
    Single StopCfm 'get set' : 
    Boolean SpringStiffnessLimited 'get set' : 
    Single SpringStiffness 'get set' : 
    Boolean SpringDampingLimited 'get set' : 
    Single SpringDamping 'get set' : 
    Single ServoTarget 'get set' : 
    Boolean ServoMotor 'get set' : 
    Single MotorErp 'get set' : 
    Single MotorCfm 'get set' : 
    Single MaxMotorForce 'get set' : 
    Single LoLimit 'get set' : 
    Boolean IsLimited 'get ' : 
    Single HiLimit 'get set' : 
    Single EquilibriumPoint 'get set' : 
    Boolean EnableSpring 'get set' : 
    Boolean EnableMotor 'get set' : 
    Single CurrentPosition 'get set' : 
    Single CurrentLimitErrorHi 'get set' : 
    Single CurrentLimitError 'get set' : 
    Int32 CurrentLimit 'get set' : 
    Single Bounce 'get set' : 
  Methods:
    TestLimitValue(Single): PrivateScope, Public, HideBySig
    get_Bounce(): PrivateScope, Public, HideBySig, SpecialName
    set_Bounce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimit(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimitError(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimitError(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimitErrorHi(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimitErrorHi(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentPosition(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentPosition(Single): PrivateScope, Public, HideBySig, SpecialName
    get_EnableMotor(): PrivateScope, Public, HideBySig, SpecialName
    set_EnableMotor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_EnableSpring(): PrivateScope, Public, HideBySig, SpecialName
    set_EnableSpring(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_EquilibriumPoint(): PrivateScope, Public, HideBySig, SpecialName
    set_EquilibriumPoint(Single): PrivateScope, Public, HideBySig, SpecialName
    get_HiLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_HiLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_IsLimited(): PrivateScope, Public, HideBySig, SpecialName
    get_LoLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LoLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxMotorForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxMotorForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MotorCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_MotorCfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MotorErp(): PrivateScope, Public, HideBySig, SpecialName
    set_MotorErp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ServoMotor(): PrivateScope, Public, HideBySig, SpecialName
    set_ServoMotor(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_ServoTarget(): PrivateScope, Public, HideBySig, SpecialName
    set_ServoTarget(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SpringDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_SpringDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SpringDampingLimited(): PrivateScope, Public, HideBySig, SpecialName
    set_SpringDampingLimited(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_SpringStiffness(): PrivateScope, Public, HideBySig, SpecialName
    set_SpringStiffness(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SpringStiffnessLimited(): PrivateScope, Public, HideBySig, SpecialName
    set_SpringStiffnessLimited(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_StopCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_StopCfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_StopErp(): PrivateScope, Public, HideBySig, SpecialName
    set_StopErp(Single): PrivateScope, Public, HideBySig, SpecialName
    get_TargetVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_TargetVelocity(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.TranslationalLimitMotor2: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.TranslationalLimitMotor2): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Vector3 UpperLimit 'get set' : 
    SharpDX.Vector3 TargetVelocity 'get set' : 
    SharpDX.Vector3 StopErp 'get set' : 
    SharpDX.Vector3 StopCfm 'get set' : 
    BulletSharp.BoolArray SpringStiffnessLimited 'get ' : 
    SharpDX.Vector3 SpringStiffness 'get set' : 
    BulletSharp.BoolArray SpringDampingLimited 'get ' : 
    SharpDX.Vector3 SpringDamping 'get set' : 
    SharpDX.Vector3 ServoTarget 'get set' : 
    BulletSharp.BoolArray ServoMotor 'get ' : 
    SharpDX.Vector3 MotorErp 'get set' : 
    SharpDX.Vector3 MotorCfm 'get set' : 
    SharpDX.Vector3 MaxMotorForce 'get set' : 
    SharpDX.Vector3 LowerLimit 'get set' : 
    SharpDX.Vector3 EquilibriumPoint 'get set' : 
    BulletSharp.BoolArray EnableSpring 'get ' : 
    BulletSharp.BoolArray EnableMotor 'get ' : 
    SharpDX.Vector3 CurrentLinearDiff 'get set' : 
    SharpDX.Vector3 CurrentLimitErrorHi 'get set' : 
    SharpDX.Vector3 CurrentLimitError 'get set' : 
    BulletSharp.IntArray CurrentLimit 'get ' : 
    SharpDX.Vector3 Bounce 'get set' : 
  Methods:
    IsLimited(Int32): PrivateScope, Public, HideBySig
    TestLimitValue(Int32, Single): PrivateScope, Public, HideBySig
    get_Bounce(): PrivateScope, Public, HideBySig, SpecialName
    set_Bounce(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimit(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimitError(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimitError(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLimitErrorHi(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLimitErrorHi(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentLinearDiff(): PrivateScope, Public, HideBySig, SpecialName
    set_CurrentLinearDiff(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_EnableMotor(): PrivateScope, Public, HideBySig, SpecialName
    get_EnableSpring(): PrivateScope, Public, HideBySig, SpecialName
    get_EquilibriumPoint(): PrivateScope, Public, HideBySig, SpecialName
    set_EquilibriumPoint(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LowerLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_MaxMotorForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxMotorForce(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_MotorCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_MotorCfm(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_MotorErp(): PrivateScope, Public, HideBySig, SpecialName
    set_MotorErp(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_ServoMotor(): PrivateScope, Public, HideBySig, SpecialName
    get_ServoTarget(): PrivateScope, Public, HideBySig, SpecialName
    set_ServoTarget(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_SpringDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_SpringDamping(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_SpringDampingLimited(): PrivateScope, Public, HideBySig, SpecialName
    get_SpringStiffness(): PrivateScope, Public, HideBySig, SpecialName
    set_SpringStiffness(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_SpringStiffnessLimited(): PrivateScope, Public, HideBySig, SpecialName
    get_StopCfm(): PrivateScope, Public, HideBySig, SpecialName
    set_StopCfm(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_StopErp(): PrivateScope, Public, HideBySig, SpecialName
    set_StopErp(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_TargetVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_TargetVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_UpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_UpperLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.Generic6DofSpring2Constraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TypedConstraint
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, SharpDX.Matrix, BulletSharp.RotateOrder): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix, BulletSharp.RotateOrder): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.TranslationalLimitMotor2 TranslationalLimitMotor 'get ' : 
    BulletSharp.RotateOrder RotationOrder 'get set' : 
    SharpDX.Vector3 LinearUpperLimit 'get set' : 
    SharpDX.Vector3 LinearLowerLimit 'get set' : 
    SharpDX.Matrix FrameOffsetB 'get ' : 
    SharpDX.Matrix FrameOffsetA 'get ' : 
    SharpDX.Matrix CalculatedTransformB 'get ' : 
    SharpDX.Matrix CalculatedTransformA 'get ' : 
    SharpDX.Vector3 AngularUpperLimitReversed 'get set' : 
    SharpDX.Vector3 AngularUpperLimit 'get set' : 
    SharpDX.Vector3 AngularLowerLimitReversed 'get set' : 
    SharpDX.Vector3 AngularLowerLimit 'get set' : 
  Methods:
    CalculateTransforms(): PrivateScope, Public, HideBySig
    CalculateTransforms(Matrix, Matrix): PrivateScope, Public, HideBySig
    EnableMotor(Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    EnableSpring(Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    GetAngle(Int32): PrivateScope, Public, HideBySig
    GetAxis(Int32): PrivateScope, Public, HideBySig
    GetRelativePivotPosition(Int32): PrivateScope, Public, HideBySig
    GetRotationalLimitMotor(Int32): PrivateScope, Public, HideBySig
    IsLimited(Int32): PrivateScope, Public, HideBySig
    SetAxis(Vector3, Vector3): PrivateScope, Public, HideBySig
    SetBounce(Int32, Single): PrivateScope, Public, HideBySig
    SetDamping(Int32, Single): PrivateScope, Public, HideBySig
    SetDamping(Int32, Single, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetEquilibriumPoint(Int32): PrivateScope, Public, HideBySig
    SetEquilibriumPoint(Int32, Single): PrivateScope, Public, HideBySig
    SetEquilibriumPoint(): PrivateScope, Public, HideBySig
    SetFrames(Matrix, Matrix): PrivateScope, Public, HideBySig
    SetLimit(Int32, Single, Single): PrivateScope, Public, HideBySig
    SetLimitReversed(Int32, Single, Single): PrivateScope, Public, HideBySig
    SetMaxMotorForce(Int32, Single): PrivateScope, Public, HideBySig
    SetServo(Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetServoTarget(Int32, Single): PrivateScope, Public, HideBySig
    SetStiffness(Int32, Single): PrivateScope, Public, HideBySig
    SetStiffness(Int32, Single, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetTargetVelocity(Int32, Single): PrivateScope, Public, HideBySig
    get_AngularLowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularLowerLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AngularLowerLimitReversed(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularLowerLimitReversed(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AngularUpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularUpperLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AngularUpperLimitReversed(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularUpperLimitReversed(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CalculatedTransformA(): PrivateScope, Public, HideBySig, SpecialName
    get_CalculatedTransformB(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetA(): PrivateScope, Public, HideBySig, SpecialName
    get_FrameOffsetB(): PrivateScope, Public, HideBySig, SpecialName
    get_LinearLowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearLowerLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_LinearUpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearUpperLimit(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_RotationOrder(): PrivateScope, Public, HideBySig, SpecialName
    set_RotationOrder(RotateOrder): PrivateScope, Public, HideBySig, SpecialName
    get_TranslationalLimitMotor(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Hinge2Constraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.Generic6DofSpring2Constraint
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 Axis2 'get ' : 
    SharpDX.Vector3 Axis1 'get ' : 
    Single Angle2 'get ' : 
    Single Angle1 'get ' : 
    SharpDX.Vector3 Anchor2 'get ' : 
    SharpDX.Vector3 Anchor 'get ' : 
  Methods:
    SetLowerLimit(Single): PrivateScope, Public, HideBySig
    SetUpperLimit(Single): PrivateScope, Public, HideBySig
    get_Anchor(): PrivateScope, Public, HideBySig, SpecialName
    get_Anchor2(): PrivateScope, Public, HideBySig, SpecialName
    get_Angle1(): PrivateScope, Public, HideBySig, SpecialName
    get_Angle2(): PrivateScope, Public, HideBySig, SpecialName
    get_Axis1(): PrivateScope, Public, HideBySig, SpecialName
    get_Axis2(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.GearConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.TypedConstraint
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single Ratio 'get set' : 
    SharpDX.Vector3 AxisB 'get set' : 
    SharpDX.Vector3 AxisA 'get set' : 
  Methods:
    get_AxisA(): PrivateScope, Public, HideBySig, SpecialName
    set_AxisA(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AxisB(): PrivateScope, Public, HideBySig, SpecialName
    set_AxisB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Ratio(): PrivateScope, Public, HideBySig, SpecialName
    set_Ratio(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.FixedConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.Generic6DofSpring2Constraint
    Void .ctor(BulletSharp.RigidBody, BulletSharp.RigidBody, SharpDX.Matrix, SharpDX.Matrix): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.ConstraintSolver: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    BulletSharp.ConstraintSolverType SolverType 'get ' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    AllSolved(ContactSolverInfo, IDebugDraw): PrivateScope, Public, HideBySig
    PrepareSolve(Int32, Int32): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
    SolveGroup(CollisionObject[], PersistentManifold[], TypedConstraint[], ContactSolverInfo, IDebugDraw, Dispatcher): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_SolverType(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SequentialImpulseConstraintSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.ConstraintSolver
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    UInt32 RandSeed 'get set' IsLong : 
  Methods:
    Rand2(): PrivateScope, Public, HideBySig
    RandInt2(Int32): PrivateScope, Public, HideBySig
    get_RandSeed(): PrivateScope, Public, HideBySig, SpecialName
    set_RandSeed(UInt32 IsLong): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.NncgConstraintSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SequentialImpulseConstraintSolver
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Boolean OnlyForNoneContact 'get set' : 
  Methods:
    get_OnlyForNoneContact(): PrivateScope, Public, HideBySig, SpecialName
    set_OnlyForNoneContact(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.Solve2LinearConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Methods:
    ResolveBilateralPairConstraint(RigidBody, RigidBody, Matrix, Matrix, Vector3, Single, Vector3, Vector3, Vector3, Vector3, Single, Vector3, Vector3, Vector3, Single, Vector3, Vector3, Vector3, Single, Vector3, Single&(Out), Single&(Out)): PrivateScope, Public, HideBySig
    ResolveUnilateralPairConstraint(RigidBody, RigidBody, Matrix, Matrix, Vector3, Single, Vector3, Vector3, Vector3, Vector3, Single, Vector3, Vector3, Vector3, Single, Vector3, Vector3, Vector3, Single, Vector3, Single&(Out), Single&(Out)): PrivateScope, Public, HideBySig
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.VehicleRaycasterResult: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Vector3 HitPointInWorld 'get set' : 
    SharpDX.Vector3 HitNormalInWorld 'get set' : 
    Single DistFraction 'get set' : 
  Methods:
    get_DistFraction(): PrivateScope, Public, HideBySig, SpecialName
    set_DistFraction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_HitNormalInWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_HitNormalInWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_HitPointInWorld(): PrivateScope, Public, HideBySig, SpecialName
    set_HitPointInWorld(Vector3): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Interface BulletSharp.IVehicleRaycaster: AutoLayout, AnsiClass, Class, Public, ClassSemanticsMask, Abstract, BeforeFieldInit
  Methods:
    CastRay(Vector3, Vector3, VehicleRaycasterResult): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
Class BulletSharp.RaycastVehicle: AutoLayout, AnsiClass, Class, Public
    Void .ctor(VehicleTuning, BulletSharp.RigidBody, BulletSharp.IVehicleRaycaster): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    BulletSharp.IAction
  Properties:
    System.Collections.Generic.IList`1[BulletSharp.WheelInfo] WheelInfo 'get ' : 
    Int32 UpAxis 'get ' : 
    BulletSharp.RigidBody RigidBody 'get ' : 
    Int32 RightAxis 'get ' : 
    Int32 NumWheels 'get ' : 
    SharpDX.Vector3 ForwardVector 'get ' : 
    Int32 ForwardAxis 'get ' : 
    Single CurrentSpeedKmHour 'get ' : 
    SharpDX.Matrix ChassisWorldTransform 'get ' : 
  Methods:
    AddWheel(Vector3, Vector3, Vector3, Single, Single, VehicleTuning, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    ApplyEngineForce(Single, Int32): PrivateScope, Public, HideBySig
    DebugDraw(IDebugDraw): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    GetSteeringValue(Int32): PrivateScope, Public, HideBySig
    GetWheelInfo(Int32): PrivateScope, Public, HideBySig
    GetWheelTransformWS(Int32): PrivateScope, Public, HideBySig
    RayCast(WheelInfo): PrivateScope, Public, HideBySig
    ResetSuspension(): PrivateScope, Public, HideBySig
    SetBrake(Single, Int32): PrivateScope, Public, HideBySig
    SetCoordinateSystem(Int32, Int32, Int32): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    SetPitchControl(Single): PrivateScope, Public, HideBySig
    SetSteeringValue(Single, Int32): PrivateScope, Public, HideBySig
    UpdateAction(CollisionWorld, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    UpdateFriction(Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    UpdateSuspension(Single): PrivateScope, Public, HideBySig
    UpdateVehicle(Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    UpdateWheelTransform(Int32): PrivateScope, Public, HideBySig
    UpdateWheelTransform(Int32, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    UpdateWheelTransformsWS(WheelInfo): PrivateScope, Public, HideBySig
    UpdateWheelTransformsWS(WheelInfo, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    get_ChassisWorldTransform(): PrivateScope, Public, HideBySig, SpecialName
    get_CurrentSpeedKmHour(): PrivateScope, Public, HideBySig, SpecialName
    get_ForwardAxis(): PrivateScope, Public, HideBySig, SpecialName
    get_ForwardVector(): PrivateScope, Public, HideBySig, SpecialName
    get_NumWheels(): PrivateScope, Public, HideBySig, SpecialName
    get_RightAxis(): PrivateScope, Public, HideBySig, SpecialName
    get_RigidBody(): PrivateScope, Public, HideBySig, SpecialName
    get_UpAxis(): PrivateScope, Public, HideBySig, SpecialName
    get_WheelInfo(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.RaycastVehicle+VehicleTuning: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Single SuspensionStiffness 'get set' : 
    Single SuspensionDamping 'get set' : 
    Single SuspensionCompression 'get set' : 
    Single MaxSuspensionTravelCm 'get set' : 
    Single MaxSuspensionForce 'get set' : 
    Single FrictionSlip 'get set' : 
  Methods:
    get_FrictionSlip(): PrivateScope, Public, HideBySig, SpecialName
    set_FrictionSlip(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxSuspensionForce(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSuspensionForce(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxSuspensionTravelCm(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSuspensionTravelCm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionCompression(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionCompression(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SuspensionStiffness(): PrivateScope, Public, HideBySig, SpecialName
    set_SuspensionStiffness(Single): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.DefaultVehicleRaycaster: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.DynamicsWorld): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    BulletSharp.IVehicleRaycaster
    System.IDisposable
  Methods:
    CastRay(Vector3, Vector3, VehicleRaycasterResult): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.KinematicCharacterController: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(BulletSharp.PairCachingGhostObject, BulletSharp.ConvexShape, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.PairCachingGhostObject, BulletSharp.ConvexShape, Single, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    BulletSharp.ICharacterController
    BulletSharp.IAction
  Properties:
    Boolean OnGround 'get ' : 
    Single MaxSlope 'get set' : 
    Boolean CanJump 'get ' : 
    Single Gravity 'get set' : 
    BulletSharp.PairCachingGhostObject GhostObject 'get ' : 
  Methods:
    DebugDraw(IDebugDraw): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Jump(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    PlayerStep(CollisionWorld, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    PreStep(CollisionWorld): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Reset(CollisionWorld): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    SetFallSpeed(Single): PrivateScope, Public, HideBySig
    SetJumpSpeed(Single): PrivateScope, Public, HideBySig
    SetMaxJumpHeight(Single): PrivateScope, Public, HideBySig
    SetUpAxis(Int32): PrivateScope, Public, HideBySig
    SetUpInterpolate(Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    SetUseGhostSweepTest(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetVelocityForTimeInterval(Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    SetWalkDirection(Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    UpdateAction(CollisionWorld, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    Warp(Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    get_GhostObject(): PrivateScope, Public, HideBySig, SpecialName
    get_Gravity(): PrivateScope, Public, HideBySig, SpecialName
    set_Gravity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_CanJump(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_MaxSlope(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxSlope(Single): PrivateScope, Public, HideBySig, SpecialName
    get_OnGround(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
Class BulletSharp.MultiBodyLink: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Properties:
    SharpDX.Quaternion ZeroRotParentToThis 'get set' : 
    Int32 PosVarCount 'get set' : 
    Int32 Parent 'get set' : 
    Single Mass 'get set' : 
    System.String LinkName 'get ' : 
    BulletSharp.FeatherstoneJointType JointType 'get set' : 
    System.String JointName 'get ' : 
    SharpDX.Vector3 InertiaLocal 'get set' : 
    Int32 Flags 'get set' : 
    SharpDX.Vector3 EVector 'get set' : 
    SharpDX.Vector3 DVector 'get set' : 
    Int32 DofOffset 'get set' : 
    Int32 DofCount 'get set' : 
    BulletSharp.MultiBodyLinkCollider Collider 'get set' : 
    Int32 CfgOffset 'get set' : 
    SharpDX.Matrix CachedWorldTransform 'get set' : 
    SharpDX.Vector3 CachedRVector 'get set' : 
    SharpDX.Quaternion CachedRotParentToThis 'get set' : 
    SharpDX.Vector3 AppliedTorque 'get set' : 
    SharpDX.Vector3 AppliedForce 'get set' : 
    SharpDX.Vector3 AppliedConstraintTorque 'get set' : 
    SharpDX.Vector3 AppliedConstraintForce 'get set' : 
  Methods:
    GetAxisBottom(Int32): PrivateScope, Public, HideBySig
    GetAxisTop(Int32): PrivateScope, Public, HideBySig
    SetAxisBottom(Int32, Vector3): PrivateScope, Public, HideBySig
    SetAxisBottom(Int32, Single, Single, Single): PrivateScope, Public, HideBySig
    SetAxisTop(Int32, Vector3): PrivateScope, Public, HideBySig
    SetAxisTop(Int32, Single, Single, Single): PrivateScope, Public, HideBySig
    UpdateCacheMultiDof(): PrivateScope, Public, HideBySig
    UpdateCacheMultiDof(Single[]): PrivateScope, Public, HideBySig
    get_AppliedConstraintForce(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedConstraintForce(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedConstraintTorque(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedConstraintTorque(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedForce(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedForce(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedTorque(): PrivateScope, Public, HideBySig, SpecialName
    set_AppliedTorque(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CachedRotParentToThis(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedRotParentToThis(Quaternion): PrivateScope, Public, HideBySig, SpecialName
    get_CachedRVector(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedRVector(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CachedWorldTransform(): PrivateScope, Public, HideBySig, SpecialName
    set_CachedWorldTransform(Matrix): PrivateScope, Public, HideBySig, SpecialName
    get_CfgOffset(): PrivateScope, Public, HideBySig, SpecialName
    set_CfgOffset(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Collider(): PrivateScope, Public, HideBySig, SpecialName
    set_Collider(MultiBodyLinkCollider): PrivateScope, Public, HideBySig, SpecialName
    get_DofCount(): PrivateScope, Public, HideBySig, SpecialName
    set_DofCount(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_DofOffset(): PrivateScope, Public, HideBySig, SpecialName
    set_DofOffset(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_DVector(): PrivateScope, Public, HideBySig, SpecialName
    set_DVector(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_EVector(): PrivateScope, Public, HideBySig, SpecialName
    set_EVector(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Flags(): PrivateScope, Public, HideBySig, SpecialName
    set_Flags(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_InertiaLocal(): PrivateScope, Public, HideBySig, SpecialName
    set_InertiaLocal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_JointName(): PrivateScope, Public, HideBySig, SpecialName
    get_JointType(): PrivateScope, Public, HideBySig, SpecialName
    set_JointType(FeatherstoneJointType): PrivateScope, Public, HideBySig, SpecialName
    get_LinkName(): PrivateScope, Public, HideBySig, SpecialName
    get_Mass(): PrivateScope, Public, HideBySig, SpecialName
    set_Mass(Single): PrivateScope, Public, HideBySig, SpecialName
    get_Parent(): PrivateScope, Public, HideBySig, SpecialName
    set_Parent(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_PosVarCount(): PrivateScope, Public, HideBySig, SpecialName
    set_PosVarCount(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_ZeroRotParentToThis(): PrivateScope, Public, HideBySig, SpecialName
    set_ZeroRotParentToThis(Quaternion): PrivateScope, Public, HideBySig, SpecialName
Struct BulletSharp.FeatherstoneJointType: AutoLayout, AnsiClass, Class, Public, Sealed, BeforeFieldInit
  :System.Enum
  Fields:
    Int32 value__ : Public, SpecialName, RTSpecialName
Class BulletSharp.MultiBody: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(Int32, Single, SharpDX.Vector3, Boolean, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    SharpDX.Quaternion WorldToBaseRot 'get set' : 
    BulletSharp.ScalarArray VelocityVector 'get ' : 
    Boolean UseGyroTerm 'get set' : 
    Int32 NumPosVars 'get ' : 
    Int32 NumLinks 'get set' : 
    Int32 NumDofs 'get ' : 
    Single MaxCoordinateVelocity 'get set' : 
    Single MaxAppliedImpulse 'get set' : 
    Single LinearDamping 'get set' : 
    Single KineticEnergy 'get ' : 
    Boolean IsUsingRK4Integration 'get set' : 
    Boolean IsUsingGlobalVelocities 'get set' : 
    Boolean IsPosUpdated 'get ' : 
    Boolean IsAwake 'get ' : 
    Boolean HasSelfCollision 'get set' : 
    Boolean HasFixedBase 'get ' : 
    Int32 CompanionId 'get set' : 
    Boolean CanSleep 'get set' : 
    SharpDX.Vector3 BaseVelocity 'get set' : 
    SharpDX.Vector3 BaseTorque 'get ' : 
    SharpDX.Vector3 BasePosition 'get set' : 
    SharpDX.Vector3 BaseOmega 'get set' : 
    System.String BaseName 'get ' : 
    Single BaseMass 'get set' : 
    SharpDX.Vector3 BaseInertia 'get set' : 
    SharpDX.Vector3 BaseForce 'get ' : 
    BulletSharp.MultiBodyLinkCollider BaseCollider 'get set' : 
    SharpDX.Vector3 AngularMomentum 'get ' : 
    Single AngularDamping 'get set' : 
  Methods:
    get_IsAwake(): PrivateScope, Public, HideBySig, SpecialName
    get_IsPosUpdated(): PrivateScope, Public, HideBySig, SpecialName
    get_IsUsingGlobalVelocities(): PrivateScope, Public, HideBySig, SpecialName
    set_IsUsingGlobalVelocities(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_IsUsingRK4Integration(): PrivateScope, Public, HideBySig, SpecialName
    set_IsUsingRK4Integration(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_KineticEnergy(): PrivateScope, Public, HideBySig, SpecialName
    get_LinearDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_LinearDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxAppliedImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxAppliedImpulse(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MaxCoordinateVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxCoordinateVelocity(Single): PrivateScope, Public, HideBySig, SpecialName
    get_NumDofs(): PrivateScope, Public, HideBySig, SpecialName
    get_NumLinks(): PrivateScope, Public, HideBySig, SpecialName
    set_NumLinks(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumPosVars(): PrivateScope, Public, HideBySig, SpecialName
    get_UseGyroTerm(): PrivateScope, Public, HideBySig, SpecialName
    set_UseGyroTerm(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_VelocityVector(): PrivateScope, Public, HideBySig, SpecialName
    get_WorldToBaseRot(): PrivateScope, Public, HideBySig, SpecialName
    set_WorldToBaseRot(Quaternion): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
    AddBaseConstraintForce(Vector3): PrivateScope, Public, HideBySig
    AddBaseConstraintTorque(Vector3): PrivateScope, Public, HideBySig
    AddBaseForce(Vector3): PrivateScope, Public, HideBySig
    AddBaseTorque(Vector3): PrivateScope, Public, HideBySig
    AddJointTorque(Int32, Single): PrivateScope, Public, HideBySig
    AddJointTorqueMultiDof(Int32, Int32, Single): PrivateScope, Public, HideBySig
    AddJointTorqueMultiDof(Int32, Single[]): PrivateScope, Public, HideBySig
    AddLinkConstraintForce(Int32, Vector3): PrivateScope, Public, HideBySig
    AddLinkConstraintTorque(Int32, Vector3): PrivateScope, Public, HideBySig
    AddLinkForce(Int32, Vector3): PrivateScope, Public, HideBySig
    AddLinkTorque(Int32, Vector3): PrivateScope, Public, HideBySig
    ApplyDeltaVeeMultiDof(Single[], Single): PrivateScope, Public, HideBySig
    ApplyDeltaVeeMultiDof2(Single[], Single): PrivateScope, Public, HideBySig
    CalcAccelerationDeltasMultiDof(Single[], Single[], AlignedScalarArray, AlignedVector3Array): PrivateScope, Public, HideBySig
    CalculateSerializeBufferSize(): PrivateScope, Public, HideBySig
    CheckMotionAndSleepIfRequired(Single): PrivateScope, Public, HideBySig
    ClearConstraintForces(): PrivateScope, Public, HideBySig
    ClearForcesAndTorques(): PrivateScope, Public, HideBySig
    ClearVelocities(): PrivateScope, Public, HideBySig
    FinalizeMultiDof(): PrivateScope, Public, HideBySig
    GetJointPos(Int32): PrivateScope, Public, HideBySig
    GetJointTorque(Int32): PrivateScope, Public, HideBySig
    GetJointVel(Int32): PrivateScope, Public, HideBySig
    GetLink(Int32): PrivateScope, Public, HideBySig
    GetLinkForce(Int32): PrivateScope, Public, HideBySig
    GetLinkInertia(Int32): PrivateScope, Public, HideBySig
    GetLinkMass(Int32): PrivateScope, Public, HideBySig
    GetLinkTorque(Int32): PrivateScope, Public, HideBySig
    GetParent(Int32): PrivateScope, Public, HideBySig
    GetParentToLocalRot(Int32): PrivateScope, Public, HideBySig
    GetRVector(Int32): PrivateScope, Public, HideBySig
    GoToSleep(): PrivateScope, Public, HideBySig
    InternalNeedsJointFeedback(): PrivateScope, Public, HideBySig
    LocalDirToWorld(Int32, Vector3): PrivateScope, Public, HideBySig
    LocalPosToWorld(Int32, Vector3): PrivateScope, Public, HideBySig
    ProcessDeltaVeeMultiDof2(): PrivateScope, Public, HideBySig
    Serialize(IntPtr, Serializer): PrivateScope, Public, HideBySig
    SetJointPos(Int32, Single): PrivateScope, Public, HideBySig
    SetJointPosMultiDof(Int32, Single[]): PrivateScope, Public, HideBySig
    SetJointVel(Int32, Single): PrivateScope, Public, HideBySig
    SetJointVelMultiDof(Int32, Single[]): PrivateScope, Public, HideBySig
    SetPosUpdated(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetupFixed(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3): PrivateScope, Public, HideBySig
    SetupPlanar(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3): PrivateScope, Public, HideBySig
    SetupPlanar(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetupPrismatic(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3, Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetupRevolute(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3, Vector3): PrivateScope, Public, HideBySig
    SetupRevolute(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3, Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    SetupSpherical(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3): PrivateScope, Public, HideBySig
    SetupSpherical(Int32, Single, Vector3, Int32, Quaternion, Vector3, Vector3, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    StepPositionsMultiDof(Single): PrivateScope, Public, HideBySig
    StepPositionsMultiDof(Single, Single[]): PrivateScope, Public, HideBySig
    StepPositionsMultiDof(Single, Single[], Single[]): PrivateScope, Public, HideBySig
    WakeUp(): PrivateScope, Public, HideBySig
    WorldDirToLocal(Int32, Vector3): PrivateScope, Public, HideBySig
    WorldPosToLocal(Int32, Vector3): PrivateScope, Public, HideBySig
    get_AngularDamping(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularDamping(Single): PrivateScope, Public, HideBySig, SpecialName
    get_AngularMomentum(): PrivateScope, Public, HideBySig, SpecialName
    get_BaseCollider(): PrivateScope, Public, HideBySig, SpecialName
    set_BaseCollider(MultiBodyLinkCollider): PrivateScope, Public, HideBySig, SpecialName
    get_BaseForce(): PrivateScope, Public, HideBySig, SpecialName
    get_BaseInertia(): PrivateScope, Public, HideBySig, SpecialName
    set_BaseInertia(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_BaseMass(): PrivateScope, Public, HideBySig, SpecialName
    set_BaseMass(Single): PrivateScope, Public, HideBySig, SpecialName
    get_BaseName(): PrivateScope, Public, HideBySig, SpecialName
    get_BaseOmega(): PrivateScope, Public, HideBySig, SpecialName
    set_BaseOmega(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_BasePosition(): PrivateScope, Public, HideBySig, SpecialName
    set_BasePosition(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_BaseTorque(): PrivateScope, Public, HideBySig, SpecialName
    get_BaseVelocity(): PrivateScope, Public, HideBySig, SpecialName
    set_BaseVelocity(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_CanSleep(): PrivateScope, Public, HideBySig, SpecialName
    set_CanSleep(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_CompanionId(): PrivateScope, Public, HideBySig, SpecialName
    set_CompanionId(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_HasFixedBase(): PrivateScope, Public, HideBySig, SpecialName
    get_HasSelfCollision(): PrivateScope, Public, HideBySig, SpecialName
    set_HasSelfCollision(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.MultiBodyConstraint: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Int32 NumRows 'get ' : 
    BulletSharp.MultiBody MultiBodyB 'get ' : 
    BulletSharp.MultiBody MultiBodyA 'get ' : 
    Single MaxAppliedImpulse 'get set' : 
    Boolean IsUnilateral 'get ' : 
    Int32 IslandIdB 'get ' : 
    Int32 IslandIdA 'get ' : 
  Methods:
    AllocateJacobiansMultiDof(): PrivateScope, Public, HideBySig
    DebugDraw(IDebugDraw): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, Abstract
    FinalizeMultiDof(): PrivateScope, Public, HideBySig
    GetAppliedImpulse(Int32): PrivateScope, Public, HideBySig
    GetPosition(Int32): PrivateScope, Public, HideBySig
    InternalSetAppliedImpulse(Int32, Single): PrivateScope, Public, HideBySig
    SetPosition(Int32, Single): PrivateScope, Public, HideBySig
    UpdateJacobianSizes(): PrivateScope, Public, HideBySig
    get_IslandIdA(): PrivateScope, Public, HideBySig, SpecialName
    get_IslandIdB(): PrivateScope, Public, HideBySig, SpecialName
    get_IsUnilateral(): PrivateScope, Public, HideBySig, SpecialName
    get_MaxAppliedImpulse(): PrivateScope, Public, HideBySig, SpecialName
    set_MaxAppliedImpulse(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MultiBodyA(): PrivateScope, Public, HideBySig, SpecialName
    get_MultiBodyB(): PrivateScope, Public, HideBySig, SpecialName
    get_NumRows(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.MultiBodySolverConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Single UpperLimit 'get set' : 
    Int32 SolverBodyIdB 'get set' : 
    Int32 SolverBodyIdA 'get set' : 
    Single RhsPenetration 'get set' : 
    Single Rhs 'get set' : 
    SharpDX.Vector3 Relpos2CrossNormal 'get set' : 
    SharpDX.Vector3 Relpos1CrossNormal 'get set' : 
    Int32 OverrideNumSolverIterations 'get set' : 
    IntPtr OriginalContactPoint 'get set' : 
    Int32 OrgDofIndex 'get set' : 
    BulletSharp.MultiBody MultiBodyB 'get set' : 
    BulletSharp.MultiBody MultiBodyA 'get set' : 
    Single LowerLimit 'get set' : 
    Int32 LinkB 'get set' : 
    Int32 LinkA 'get set' : 
    Single JacDiagABInv 'get set' : 
    Int32 JacBindex 'get set' : 
    Int32 JacAindex 'get set' : 
    Int32 FrictionIndex 'get set' : 
    Single Friction 'get set' : 
    Int32 DeltaVelBindex 'get set' : 
    Int32 DeltaVelAindex 'get set' : 
    SharpDX.Vector3 ContactNormal2 'get set' : 
    SharpDX.Vector3 ContactNormal1 'get set' : 
    Single Cfm 'get set' : 
    Single AppliedPushImpulse 'get ' : 
    Single AppliedImpulse 'get ' : 
    SharpDX.Vector3 AngularComponentB 'get set' : 
    SharpDX.Vector3 AngularComponentA 'get set' : 
  Methods:
    get_AngularComponentA(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularComponentA(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AngularComponentB(): PrivateScope, Public, HideBySig, SpecialName
    set_AngularComponentB(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedImpulse(): PrivateScope, Public, HideBySig, SpecialName
    get_AppliedPushImpulse(): PrivateScope, Public, HideBySig, SpecialName
    get_Cfm(): PrivateScope, Public, HideBySig, SpecialName
    set_Cfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_ContactNormal1(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactNormal1(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_ContactNormal2(): PrivateScope, Public, HideBySig, SpecialName
    set_ContactNormal2(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_DeltaVelAindex(): PrivateScope, Public, HideBySig, SpecialName
    set_DeltaVelAindex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_DeltaVelBindex(): PrivateScope, Public, HideBySig, SpecialName
    set_DeltaVelBindex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Friction(): PrivateScope, Public, HideBySig, SpecialName
    set_Friction(Single): PrivateScope, Public, HideBySig, SpecialName
    get_FrictionIndex(): PrivateScope, Public, HideBySig, SpecialName
    set_FrictionIndex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_JacAindex(): PrivateScope, Public, HideBySig, SpecialName
    set_JacAindex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_JacBindex(): PrivateScope, Public, HideBySig, SpecialName
    set_JacBindex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_JacDiagABInv(): PrivateScope, Public, HideBySig, SpecialName
    set_JacDiagABInv(Single): PrivateScope, Public, HideBySig, SpecialName
    get_LinkA(): PrivateScope, Public, HideBySig, SpecialName
    set_LinkA(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_LinkB(): PrivateScope, Public, HideBySig, SpecialName
    set_LinkB(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_LowerLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_LowerLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    get_MultiBodyA(): PrivateScope, Public, HideBySig, SpecialName
    set_MultiBodyA(MultiBody): PrivateScope, Public, HideBySig, SpecialName
    get_MultiBodyB(): PrivateScope, Public, HideBySig, SpecialName
    set_MultiBodyB(MultiBody): PrivateScope, Public, HideBySig, SpecialName
    get_OrgDofIndex(): PrivateScope, Public, HideBySig, SpecialName
    set_OrgDofIndex(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_OriginalContactPoint(): PrivateScope, Public, HideBySig, SpecialName
    set_OriginalContactPoint(IntPtr): PrivateScope, Public, HideBySig, SpecialName
    get_OverrideNumSolverIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_OverrideNumSolverIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_Relpos1CrossNormal(): PrivateScope, Public, HideBySig, SpecialName
    set_Relpos1CrossNormal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Relpos2CrossNormal(): PrivateScope, Public, HideBySig, SpecialName
    set_Relpos2CrossNormal(Vector3): PrivateScope, Public, HideBySig, SpecialName
    get_Rhs(): PrivateScope, Public, HideBySig, SpecialName
    set_Rhs(Single): PrivateScope, Public, HideBySig, SpecialName
    get_RhsPenetration(): PrivateScope, Public, HideBySig, SpecialName
    set_RhsPenetration(Single): PrivateScope, Public, HideBySig, SpecialName
    get_SolverBodyIdA(): PrivateScope, Public, HideBySig, SpecialName
    set_SolverBodyIdA(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_SolverBodyIdB(): PrivateScope, Public, HideBySig, SpecialName
    set_SolverBodyIdB(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_UpperLimit(): PrivateScope, Public, HideBySig, SpecialName
    set_UpperLimit(Single): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.MultiBodyConstraintSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SequentialImpulseConstraintSolver
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.MultiBodyDynamicsWorld: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DiscreteDynamicsWorld
    Void .ctor(BulletSharp.Dispatcher, BulletSharp.BroadphaseInterface, BulletSharp.MultiBodyConstraintSolver, BulletSharp.CollisionConfiguration): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 NumMultiBodyConstraints 'get ' : 
    Int32 NumMultibodies 'get ' : 
  Methods:
    AddMultiBody(MultiBody): PrivateScope, Public, HideBySig
    AddMultiBody(MultiBody, Int16, Int16): PrivateScope, Public, HideBySig
    AddMultiBody(MultiBody, CollisionFilterGroups, CollisionFilterGroups): PrivateScope, Public, HideBySig
    AddMultiBodyConstraint(MultiBodyConstraint): PrivateScope, Public, HideBySig
    DebugDrawMultiBodyConstraint(MultiBodyConstraint): PrivateScope, Public, HideBySig
    ClearMultiBodyConstraintForces(): PrivateScope, Public, HideBySig
    ClearMultiBodyForces(): PrivateScope, Public, HideBySig
    ForwardKinematics(): PrivateScope, Public, HideBySig
    GetMultiBody(Int32): PrivateScope, Public, HideBySig
    GetMultiBodyConstraint(Int32): PrivateScope, Public, HideBySig
    IntegrateTransforms(Single): PrivateScope, Public, HideBySig
    RemoveMultiBody(MultiBody): PrivateScope, Public, HideBySig
    RemoveMultiBodyConstraint(MultiBodyConstraint): PrivateScope, Public, HideBySig
    get_NumMultibodies(): PrivateScope, Public, HideBySig, SpecialName
    get_NumMultiBodyConstraints(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.MultiBodyJointLimitConstraint: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.MultiBodyConstraint
    Void .ctor(BulletSharp.MultiBody, Int32, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    DebugDraw(IDebugDraw): PrivateScope, Public, Virtual, HideBySig
Class BulletSharp.MultiBodyJointMotor: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.MultiBodyConstraint
    Void .ctor(BulletSharp.MultiBody, Int32, Int32, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.MultiBody, Int32, Single, Single): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    DebugDraw(IDebugDraw): PrivateScope, Public, Virtual, HideBySig
    SetVelocityTarget(Single): PrivateScope, Public, HideBySig
Class BulletSharp.MultiBodyPoint2Point: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.MultiBodyConstraint
    Void .ctor(BulletSharp.MultiBody, Int32, BulletSharp.MultiBody, Int32, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.MultiBody, Int32, BulletSharp.RigidBody, SharpDX.Vector3, SharpDX.Vector3): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    SharpDX.Vector3 PivotInB 'get set' : 
  Methods:
    DebugDraw(IDebugDraw): PrivateScope, Public, Virtual, HideBySig
    get_PivotInB(): PrivateScope, Public, HideBySig, SpecialName
    set_PivotInB(Vector3): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.MlcpSolverInterface: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Methods:
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.DantzigSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.MlcpSolverInterface
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.MlcpSolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SequentialImpulseConstraintSolver
    Void .ctor(BulletSharp.MlcpSolverInterface): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    Int32 NumFallbacks 'get set' : 
    Single Cfm 'get set' : 
  Methods:
    SetMLCPSolver(MlcpSolverInterface): PrivateScope, Public, HideBySig
    get_Cfm(): PrivateScope, Public, HideBySig, SpecialName
    set_Cfm(Single): PrivateScope, Public, HideBySig, SpecialName
    get_NumFallbacks(): PrivateScope, Public, HideBySig, SpecialName
    set_NumFallbacks(Int32): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.VertexBufferDescriptor: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Int32 VertexStride 'get ' : 
    Int32 VertexOffset 'get ' : 
    Int32 NormalStride 'get ' : 
    Int32 NormalOffset 'get ' : 
    Boolean HasVertexPositions 'get ' : 
    Boolean HasNormals 'get ' : 
    BulletSharp.BufferType BufferType 'get ' : 
  Methods:
    get_BufferType(): PrivateScope, Public, HideBySig, SpecialName
    get_HasNormals(): PrivateScope, Public, HideBySig, SpecialName
    get_HasVertexPositions(): PrivateScope, Public, HideBySig, SpecialName
    get_NormalOffset(): PrivateScope, Public, HideBySig, SpecialName
    get_NormalStride(): PrivateScope, Public, HideBySig, SpecialName
    get_VertexOffset(): PrivateScope, Public, HideBySig, SpecialName
    get_VertexStride(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.CpuVertexBufferDescriptor: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.VertexBufferDescriptor
    Void .ctor(BulletSharp.FloatArray, Int32, Int32, Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.FloatArray, Int32, Int32): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Properties:
    BulletSharp.FloatArray VertexBuffer 'get ' : 
    IntPtr BasePointer 'get ' : 
  Methods:
    get_BasePointer(): PrivateScope, Public, HideBySig, SpecialName
    get_VertexBuffer(): PrivateScope, Public, HideBySig, SpecialName
Class BulletSharp.SoftBody.SoftBodySolver: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Interfaces:
    System.IDisposable
  Properties:
    Single TimeScale 'get ' : 
    BulletSharp.SolverType SolverType 'get ' : 
    Int32 NumberOfVelocityIterations 'get set' : 
    Int32 NumberOfPositionIterations 'get set' : 
  Methods:
    CheckInitialized(): PrivateScope, Public, HideBySig
    CopyBackToSoftBodies(): PrivateScope, Public, HideBySig
    CopyBackToSoftBodies(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    Optimize(AlignedSoftBodyArray): PrivateScope, Public, HideBySig
    Optimize(AlignedSoftBodyArray, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    PredictMotion(Single): PrivateScope, Public, HideBySig
    ProcessCollision(SoftBody, SoftBody): PrivateScope, Public, HideBySig
    ProcessCollision(SoftBody, CollisionObjectWrapper): PrivateScope, Public, HideBySig
    SolveConstraints(Single): PrivateScope, Public, HideBySig
    UpdateSoftBodies(): PrivateScope, Public, HideBySig
    get_NumberOfPositionIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_NumberOfPositionIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumberOfVelocityIterations(): PrivateScope, Public, HideBySig, SpecialName
    set_NumberOfVelocityIterations(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_SolverType(): PrivateScope, Public, HideBySig, SpecialName
    get_TimeScale(): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.SoftBody.SoftBodySolverOutput: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  Methods:
    CopySoftBodyToVertexBuffer(SoftBody, VertexBufferDescriptor): PrivateScope, Public, HideBySig
Class BulletSharp.SoftBody.DefaultSoftBodySolver: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.SoftBody.SoftBodySolver
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    CopySoftBodyToVertexBuffer(SoftBody, VertexBufferDescriptor): PrivateScope, Public, HideBySig
Class BulletSharp.SparseSdf: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  Methods:
    GarbageCollect(): PrivateScope, Public, HideBySig
    GarbageCollect(Int32): PrivateScope, Public, HideBySig
    Initialize(): PrivateScope, Public, HideBySig
    Initialize(Int32): PrivateScope, Public, HideBySig
    RemoveReferences(CollisionShape): PrivateScope, Public, HideBySig
    Reset(): PrivateScope, Public, HideBySig
Class BulletSharp.SoftBodyConcaveCollisionAlgorithm: AutoLayout, AnsiClass, Class, Public, Abstract, BeforeFieldInit
  :BulletSharp.CollisionAlgorithm
    Void .ctor(BulletSharp.CollisionAlgorithmConstructionInfo, BulletSharp.CollisionObjectWrapper, BulletSharp.CollisionObjectWrapper, Boolean): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    ClearCache(): PrivateScope, Public, HideBySig
Class BulletSharp.SoftBodyConcaveCollisionAlgorithm+CreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.SoftBodyConcaveCollisionAlgorithm+SwappedCreateFunc: AutoLayout, AnsiClass, Class, NestedPublic, BeforeFieldInit
  :BulletSharp.CollisionAlgorithmCreateFunc
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
Class BulletSharp.SoftBodyRigidBodyCollisionConfiguration: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
  :BulletSharp.DefaultCollisionConfiguration
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.DefaultCollisionConstructionInfo): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Methods:
    GetCollisionAlgorithmCreateFunc(BroadphaseNativeType, BroadphaseNativeType): PrivateScope, Public, Virtual, HideBySig
Class BulletSharp.Serialize.BulletWorldImporter: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.DynamicsWorld): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 VerboseMode 'get set' : 
    Int32 TriangleInfoMapCount 'get ' : 
    Int32 RigidBodyCount 'get ' : 
    Int32 ConstraintCount 'get ' : 
    Int32 CollisionShapeCount 'get ' : 
    Int32 BvhCount 'get ' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    CreateCollisionObject(Matrix, CollisionShape, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateRigidBody(Boolean(HasFieldMarshal), Single, Matrix, CollisionShape, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreatePlaneShape(Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateBoxShape(Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateSphereShape(Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCapsuleShapeX(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCapsuleShapeY(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCapsuleShapeZ(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCylinderShapeX(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCylinderShapeY(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCylinderShapeZ(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeShapeX(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeShapeY(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeShapeZ(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateTriangleMeshContainer(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateBvhTriangleMeshShape(StridingMeshInterface, OptimizedBvh): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConvexTriangleMeshShape(StridingMeshInterface): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGImpactShape(StridingMeshInterface): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConvexHullShape(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCompoundShape(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateScaledTrangleMeshShape(BvhTriangleMeshShape, Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateMultiSphereShape(Vector3[], Single[]): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateOptimizedBvh(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateTriangleInfoMap(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreatePoint2PointConstraint(RigidBody, Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreatePoint2PointConstraint(RigidBody, RigidBody, Vector3, Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, RigidBody, Matrix, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeTwistConstraint(RigidBody, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeTwistConstraint(RigidBody, RigidBody, Matrix, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofConstraint(RigidBody, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofSpringConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofSpring2Constraint(RigidBody, RigidBody, Matrix, Matrix, RotateOrder): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateSliderConstraint(RigidBody, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateSliderConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGearConstraint(RigidBody, RigidBody, Vector3, Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DeleteAllData(): PrivateScope, Public, HideBySig
    LoadFile(String): PrivateScope, Public, HideBySig
    LoadFile(String, String): PrivateScope, Public, HideBySig
    LoadFileFromMemory(Byte[]): PrivateScope, Public, HideBySig
    GetCollisionShapeByIndex(Int32): PrivateScope, Public, HideBySig
    GetRigidBodyByIndex(Int32): PrivateScope, Public, HideBySig
    GetConstraintByIndex(Int32): PrivateScope, Public, HideBySig
    GetBvhByIndex(Int32): PrivateScope, Public, HideBySig
    GetTriangleInfoMapByIndex(Int32): PrivateScope, Public, HideBySig
    GetCollisionShapeByName(String): PrivateScope, Public, HideBySig
    GetRigidBodyByName(String): PrivateScope, Public, HideBySig
    GetConstraintByName(String): PrivateScope, Public, HideBySig
    GetNameForObject(Object): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_BvhCount(): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionShapeCount(): PrivateScope, Public, HideBySig, SpecialName
    get_ConstraintCount(): PrivateScope, Public, HideBySig, SpecialName
    get_RigidBodyCount(): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleInfoMapCount(): PrivateScope, Public, HideBySig, SpecialName
    get_VerboseMode(): PrivateScope, Public, HideBySig, SpecialName
    set_VerboseMode(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.Serialize.BulletXmlWorldImporter: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
    Void .ctor(BulletSharp.DynamicsWorld): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Int32 VerboseMode 'get set' : 
    Int32 TriangleInfoMapCount 'get ' : 
    Int32 RigidBodyCount 'get ' : 
    Int32 ConstraintCount 'get ' : 
    Int32 CollisionShapeCount 'get ' : 
    Int32 BvhCount 'get ' : 
    Boolean IsDisposed 'get ' : 
  Methods:
    CreateCollisionObject(Matrix, CollisionShape, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateRigidBody(Boolean(HasFieldMarshal), Single, Matrix, CollisionShape, String): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreatePlaneShape(Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateBoxShape(Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateSphereShape(Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCapsuleShapeX(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCapsuleShapeY(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCapsuleShapeZ(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCylinderShapeX(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCylinderShapeY(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCylinderShapeZ(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeShapeX(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeShapeY(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeShapeZ(Single, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateTriangleMeshContainer(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateBvhTriangleMeshShape(StridingMeshInterface, OptimizedBvh): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConvexTriangleMeshShape(StridingMeshInterface): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGImpactShape(StridingMeshInterface): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConvexHullShape(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateCompoundShape(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateScaledTrangleMeshShape(BvhTriangleMeshShape, Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateMultiSphereShape(Vector3[], Single[]): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateOptimizedBvh(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateTriangleInfoMap(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreatePoint2PointConstraint(RigidBody, Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreatePoint2PointConstraint(RigidBody, RigidBody, Vector3, Vector3): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, RigidBody, Matrix, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateHingeConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeTwistConstraint(RigidBody, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateConeTwistConstraint(RigidBody, RigidBody, Matrix, Matrix): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofConstraint(RigidBody, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofSpringConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGeneric6DofSpring2Constraint(RigidBody, RigidBody, Matrix, Matrix, RotateOrder): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateSliderConstraint(RigidBody, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateSliderConstraint(RigidBody, RigidBody, Matrix, Matrix, Boolean(HasFieldMarshal)): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    CreateGearConstraint(RigidBody, RigidBody, Vector3, Vector3, Single): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask
    DeleteAllData(): PrivateScope, Public, HideBySig
    LoadFile(String): PrivateScope, Public, HideBySig
    GetCollisionShapeByIndex(Int32): PrivateScope, Public, HideBySig
    GetRigidBodyByIndex(Int32): PrivateScope, Public, HideBySig
    GetConstraintByIndex(Int32): PrivateScope, Public, HideBySig
    GetBvhByIndex(Int32): PrivateScope, Public, HideBySig
    GetTriangleInfoMapByIndex(Int32): PrivateScope, Public, HideBySig
    GetCollisionShapeByName(String): PrivateScope, Public, HideBySig
    GetRigidBodyByName(String): PrivateScope, Public, HideBySig
    GetConstraintByName(String): PrivateScope, Public, HideBySig
    GetNameForObject(Object): PrivateScope, Public, HideBySig
    get_IsDisposed(): PrivateScope, Public, Virtual, HideBySig, VtableLayoutMask, SpecialName
    get_BvhCount(): PrivateScope, Public, HideBySig, SpecialName
    get_CollisionShapeCount(): PrivateScope, Public, HideBySig, SpecialName
    get_ConstraintCount(): PrivateScope, Public, HideBySig, SpecialName
    get_RigidBodyCount(): PrivateScope, Public, HideBySig, SpecialName
    get_TriangleInfoMapCount(): PrivateScope, Public, HideBySig, SpecialName
    get_VerboseMode(): PrivateScope, Public, HideBySig, SpecialName
    set_VerboseMode(Int32): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.Hacd: AutoLayout, AnsiClass, Class, Public, BeforeFieldInit
    Void .ctor(): PrivateScope, Public, HideBySig, SpecialName, RTSpecialName
  Interfaces:
    System.IDisposable
  Properties:
    Double VolumeWeight 'get set' : 
    Double ScaleFactor 'get set' : 
    Int32 NumVerticesPerConvexHull 'get set' : 
    Int32 NTriangles 'get set' : 
    Int32 NPoints 'get set' : 
    Int32 NClusters 'get set' : 
    Double ConnectDist 'get set' : 
    Double Concavity 'get set' : 
    Double CompacityWeight 'get set' : 
    CallBackFunction CallBack 'get set' : 
    Boolean AddNeighboursDistPoints 'get set' : 
    Boolean AddFacesPoints 'get set' : 
    Boolean AddExtraDistPoints 'get set' : 
  Methods:
    Compute(): PrivateScope, Public, HideBySig
    Compute(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    Compute(Boolean(HasFieldMarshal), Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    DenormalizeData(): PrivateScope, Public, HideBySig
    GetCH(Int32, Vector3[]&(Out), Int32[]&(Out)): PrivateScope, Public, HideBySig
    GetNPointsCH(Int32): PrivateScope, Public, HideBySig
    GetNTrianglesCH(Int32): PrivateScope, Public, HideBySig
    GetPoints(): PrivateScope, Public, HideBySig
    GetTriangles(): PrivateScope, Public, HideBySig
    NormalizeData(): PrivateScope, Public, HideBySig
    Save(String, Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig
    Save(String, Boolean(HasFieldMarshal), Int32 IsLong): PrivateScope, Public, HideBySig
    SetPoints(ICollection`1): PrivateScope, Public, HideBySig
    SetPoints(ICollection`1): PrivateScope, Public, HideBySig
    SetTriangles(ICollection`1): PrivateScope, Public, HideBySig
    SetTriangles(ICollection`1): PrivateScope, Public, HideBySig
    get_AddExtraDistPoints(): PrivateScope, Public, HideBySig, SpecialName
    set_AddExtraDistPoints(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_AddFacesPoints(): PrivateScope, Public, HideBySig, SpecialName
    set_AddFacesPoints(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_AddNeighboursDistPoints(): PrivateScope, Public, HideBySig, SpecialName
    set_AddNeighboursDistPoints(Boolean(HasFieldMarshal)): PrivateScope, Public, HideBySig, SpecialName
    get_CallBack(): PrivateScope, Public, HideBySig, SpecialName
    set_CallBack(CallBackFunction): PrivateScope, Public, HideBySig, SpecialName
    get_CompacityWeight(): PrivateScope, Public, HideBySig, SpecialName
    set_CompacityWeight(Double): PrivateScope, Public, HideBySig, SpecialName
    get_Concavity(): PrivateScope, Public, HideBySig, SpecialName
    set_Concavity(Double): PrivateScope, Public, HideBySig, SpecialName
    get_ConnectDist(): PrivateScope, Public, HideBySig, SpecialName
    set_ConnectDist(Double): PrivateScope, Public, HideBySig, SpecialName
    get_NClusters(): PrivateScope, Public, HideBySig, SpecialName
    set_NClusters(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NPoints(): PrivateScope, Public, HideBySig, SpecialName
    set_NPoints(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NTriangles(): PrivateScope, Public, HideBySig, SpecialName
    set_NTriangles(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_NumVerticesPerConvexHull(): PrivateScope, Public, HideBySig, SpecialName
    set_NumVerticesPerConvexHull(Int32): PrivateScope, Public, HideBySig, SpecialName
    get_ScaleFactor(): PrivateScope, Public, HideBySig, SpecialName
    set_ScaleFactor(Double): PrivateScope, Public, HideBySig, SpecialName
    get_VolumeWeight(): PrivateScope, Public, HideBySig, SpecialName
    set_VolumeWeight(Double): PrivateScope, Public, HideBySig, SpecialName
    Dispose(): PrivateScope, Public, Final, Virtual, HideBySig
Class BulletSharp.Hacd+CallBackFunction: AutoLayout, AnsiClass, Class, NestedPublic, Sealed, BeforeFieldInit
  :System.MulticastDelegate
    Void .ctor(System.Object, IntPtr): PrivateScope, Public, SpecialName, RTSpecialName
  Methods:
    Invoke(String, Double, Double, Int32): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    BeginInvoke(String, Double, Double, Int32, AsyncCallback, Object): PrivateScope, Public, Final, Virtual, VtableLayoutMask
    EndInvoke(IAsyncResult): PrivateScope, Public, Final, Virtual, VtableLayoutMask
